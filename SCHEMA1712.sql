--------------------------------------------------------
--  File created - Monday-December-17-2018   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for DB Link FROM_EUC_CHTINQ
--------------------------------------------------------

  CREATE DATABASE LINK "FROM_EUC_CHTINQ"
   CONNECT TO "CHTINQ" IDENTIFIED BY VALUES ':1'
   USING 'euc';
--------------------------------------------------------
--  DDL for DB Link FROM_HRMS_HRMSINQ
--------------------------------------------------------

  CREATE DATABASE LINK "FROM_HRMS_HRMSINQ"
   CONNECT TO "HRMSINQ" IDENTIFIED BY VALUES ':1'
   USING 'hrms';
--------------------------------------------------------
--  DDL for Table COLOR_MASTER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."COLOR_MASTER" 
   (	"COLOR_CD" VARCHAR2(5 BYTE), 
	"COLOR_NAME" VARCHAR2(20 BYTE), 
	"COLOR_FONT" VARCHAR2(20 BYTE), 
	"SHELF" VARCHAR2(2 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_CALCULATE_ACTUAL
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_CALCULATE_ACTUAL" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"PLAN_DATE" VARCHAR2(8 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"ACTUAL_Q1" NUMBER(8,0), 
	"ACTUAL_Q2" NUMBER(8,0), 
	"ACTUAL_Q3" NUMBER(8,0), 
	"ACTUAL_Q4" NUMBER(8,0), 
	"ACTUAL_Q5" NUMBER(8,0), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DAISHA_GROUP
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DAISHA_GROUP" 
   (	"DAISHA_GROUP" VARCHAR2(2 BYTE), 
	"DAISHA_GROUP_N" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DAISHA_MASTER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL_SEQ" VARCHAR2(10 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"MODEL_ALL" VARCHAR2(150 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"DAISHA_TYPE" VARCHAR2(2 BYTE), 
	"DAISHA_GROUP" VARCHAR2(2 BYTE), 
	"MIN" NUMBER(2,0), 
	"MAX" NUMBER(2,0), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE), 
	"SNP" NUMBER(3,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DAISHA_PROGRESSIVE
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"PLAN_DATE" VARCHAR2(8 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"CELL_NAME" VARCHAR2(10 BYTE), 
	"DAISHA_TYPE" VARCHAR2(2 BYTE), 
	"DAISHA_GROUP" VARCHAR2(2 BYTE), 
	"SEQ" NUMBER(9,0), 
	"ROUND" NUMBER(2,0), 
	"MERCHANDISE_CD" VARCHAR2(12 BYTE), 
	"DESTINATION" VARCHAR2(10 BYTE), 
	"COLOR" VARCHAR2(10 BYTE), 
	"LOCATION" VARCHAR2(10 BYTE), 
	"PLAN_PICK_DT" VARCHAR2(8 BYTE), 
	"PLAN_PICK_TM" VARCHAR2(8 BYTE), 
	"ACT_PICK_DT" VARCHAR2(8 BYTE), 
	"ACT_PICK_TM" VARCHAR2(8 BYTE), 
	"SLANE_IN_DT" VARCHAR2(8 BYTE), 
	"SLANE_IN_TM" VARCHAR2(8 BYTE), 
	"BLANE_SIGNAL_DT" VARCHAR2(8 BYTE), 
	"BLANE_SIGNAL_TM" VARCHAR2(8 BYTE), 
	"PLAN_OUT_SLANE_DT" VARCHAR2(8 BYTE), 
	"PLAN_OUT_SLANE_TM" VARCHAR2(8 BYTE), 
	"ACT_OUT_SLANE_DT" VARCHAR2(8 BYTE), 
	"ACT_OUT_SLANE_TM" VARCHAR2(8 BYTE), 
	"BLANE_IN_DT" VARCHAR2(8 BYTE), 
	"BLANE_IN_TM" VARCHAR2(8 BYTE), 
	"BLANE_OUT_DT" VARCHAR2(8 BYTE), 
	"BLANE_OUT_TM" VARCHAR2(8 BYTE), 
	"ORDER_NO" NUMBER(2,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DAISHA_TYPE
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DAISHA_TYPE" 
   (	"DAISHA_TYPE" VARCHAR2(2 BYTE), 
	"DAISHA_TYPE_N" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DELIVERY_CYCLE_MASTER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DELIVERY_CYCLE_MASTER" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"TYPE" VARCHAR2(10 BYTE), 
	"ZONE" VARCHAR2(2 BYTE), 
	"CYCLE_TIME" NUMBER(4,0), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DNM_OVERTIME_CD
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DNM_OVERTIME_CD" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"OVERTIME_CD" VARCHAR2(50 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"OVERTIME_BEGIN" VARCHAR2(5 BYTE), 
	"OVERTIME_END" VARCHAR2(5 BYTE), 
	"WORKINGTIME_MIN" NUMBER(4,0), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DNM_RLTMPLANBYSHF_W
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DNM_RLTMPLANBYSHF_W" 
   (	"SEQ" NUMBER(7,0), 
	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"CAL_DATE" VARCHAR2(8 BYTE), 
	"CAL_TIME" VARCHAR2(5 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(3 BYTE), 
	"CELL_NAME" VARCHAR2(20 BYTE), 
	"PLAN_QTY_BY_SHIFT" NUMBER(8,0), 
	"REALTIME_PLAN_QTY" NUMBER(8,0), 
	"ACTUAL_QTY" NUMBER(8,0), 
	"DIFF_QTY" NUMBER(8,0), 
	"CAP_QTY" NUMBER(8,0), 
	"CYCLE_TIME" NUMBER(7,2), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE), 
	"HISTORY_ENTRY_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DNM_WORKSHIFT_CD
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"WORKSHIFT_CD" VARCHAR2(50 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"WORK1_BEGIN" VARCHAR2(5 BYTE), 
	"WORK1_END" VARCHAR2(5 BYTE), 
	"BREAK1_BEGIN" VARCHAR2(5 BYTE), 
	"BREAK1_END" VARCHAR2(5 BYTE), 
	"WORK2_BEGIN" VARCHAR2(5 BYTE), 
	"WORK2_END" VARCHAR2(5 BYTE), 
	"BREAK2_BEGIN" VARCHAR2(5 BYTE), 
	"BREAK2_END" VARCHAR2(5 BYTE), 
	"WORK3_BEGIN" VARCHAR2(5 BYTE), 
	"WORK3_END" VARCHAR2(5 BYTE), 
	"BREAK3_BEGIN" VARCHAR2(5 BYTE), 
	"BREAK3_END" VARCHAR2(5 BYTE), 
	"WORK4_BEGIN" VARCHAR2(5 BYTE), 
	"WORK4_END" VARCHAR2(5 BYTE), 
	"WORKINGTIME_MIN" NUMBER(4,0), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DNM_WORKSHIFT_N_CAP
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_N_CAP" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"PLAN_DATE" VARCHAR2(8 BYTE), 
	"LINE_CD" VARCHAR2(3 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"WORKSHIFT_CD_DAY" VARCHAR2(50 BYTE), 
	"OVERTIME_CD_DAY" VARCHAR2(50 BYTE), 
	"WORKSHIFT_CD_NIGHT" VARCHAR2(50 BYTE), 
	"OVERTIME_CD_NIGHT" VARCHAR2(50 BYTE), 
	"CAP_QTY" NUMBER(8,0), 
	"CYCLE_TIME" NUMBER(7,2), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_MASTER_COLOR_SH
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_MASTER_COLOR_SH" 
   (	"MODEL" VARCHAR2(10 BYTE), 
	"SHELF" VARCHAR2(5 BYTE), 
	"COLOR" VARCHAR2(3 BYTE), 
	"FLAG" VARCHAR2(1 BYTE), 
	"DAISHA_TYPE" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_METRIX_PART_MASTER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"DAISHA_TYPE" VARCHAR2(2 BYTE), 
	"DAISHA_GROUP" VARCHAR2(2 BYTE), 
	"PART_NO" VARCHAR2(12 BYTE), 
	"DIM_NO" VARCHAR2(3 BYTE), 
	"PART_NAME" VARCHAR2(100 BYTE), 
	"SUPP_CD" VARCHAR2(3 BYTE), 
	"SUPP_NAME" VARCHAR2(20 BYTE), 
	"FLG_DIFF" VARCHAR2(1 BYTE), 
	"COLOR" VARCHAR2(5 BYTE), 
	"SNP" NUMBER(3,0), 
	"QTY" VARCHAR2(3 BYTE), 
	"ORDER_01" NUMBER(2,0), 
	"ORDER_02" NUMBER(2,0), 
	"ORDER_03" NUMBER(2,0), 
	"ORDER_04" NUMBER(2,0), 
	"ORDER_05" NUMBER(2,0), 
	"ORDER_06" NUMBER(2,0), 
	"ORDER_07" NUMBER(2,0), 
	"ORDER_08" NUMBER(2,0), 
	"ORDER_09" NUMBER(2,0), 
	"ORDER_10" NUMBER(2,0), 
	"ORDER_11" NUMBER(2,0), 
	"ORDER_12" NUMBER(2,0), 
	"ORDER_13" NUMBER(2,0), 
	"ORDER_14" NUMBER(2,0), 
	"ORDER_15" NUMBER(2,0), 
	"ORDER_16" NUMBER(2,0), 
	"ORDER_17" NUMBER(2,0), 
	"ORDER_18" NUMBER(2,0), 
	"ORDER_19" NUMBER(2,0), 
	"ORDER_20" NUMBER(2,0), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_PRODUCTION_PLAN
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL_SEQ" VARCHAR2(10 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"PLAN_DATE" VARCHAR2(10 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"CELL_NAME" VARCHAR2(20 BYTE), 
	"PRIORITY" VARCHAR2(2 BYTE), 
	"MERCHANDISE_CD" VARCHAR2(10 BYTE), 
	"PLAN_QTY" NUMBER(8,0), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_PRODUCTION_PLAN_DAISHA
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN_DAISHA" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"PLAN_DATE" VARCHAR2(8 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"CELL_NAME" VARCHAR2(10 BYTE), 
	"PRIORITY" VARCHAR2(2 BYTE), 
	"SEQ" NUMBER(8,0), 
	"MERCHANDISE_CD" VARCHAR2(12 BYTE), 
	"DESTINATION" VARCHAR2(10 BYTE), 
	"COLOR" VARCHAR2(10 BYTE), 
	"ROUND" NUMBER(2,0), 
	"FLAG" VARCHAR2(1 BYTE), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_PROGRESS_ORDER_DAISHA
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"PLAN_DATE" VARCHAR2(8 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"DAISHA_TYPE" VARCHAR2(2 BYTE), 
	"DAISHA_GROUP" VARCHAR2(2 BYTE), 
	"ROUND" VARCHAR2(3 BYTE), 
	"ORDER_NO" NUMBER(2,0), 
	"PLAN_TIME" VARCHAR2(8 BYTE), 
	"ACTUAL_TIME" VARCHAR2(8 BYTE), 
	"DIFF" NUMBER(4,0), 
	"MIN_BLANE" VARCHAR2(8 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_REC_EMPTY_DAISHA
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"CAL_DATE" VARCHAR2(8 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"CELL_NAME" VARCHAR2(5 BYTE), 
	"DAISHA_TYPE" VARCHAR2(2 BYTE), 
	"DAISHA_GROUP" VARCHAR2(2 BYTE), 
	"TOTAL_EMPTY" NUMBER(2,0), 
	"CREATE_DATE" DATE, 
	"UPDATE_DATE" DATE, 
	"ROUND" NUMBER(2,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_TEMP_PROCESS
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" 
   (	"MODEL" VARCHAR2(10 BYTE), 
	"PLAN_DATE" VARCHAR2(8 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"DAISHA_TYPE" VARCHAR2(2 BYTE), 
	"DAISHA_GROUP" VARCHAR2(2 BYTE), 
	"SEQ" NUMBER(9,0), 
	"ROUND" NUMBER(2,0), 
	"DESTINATION" VARCHAR2(10 BYTE), 
	"COLOR" VARCHAR2(10 BYTE), 
	"LOCATION" VARCHAR2(10 BYTE), 
	"PROCESS_ID" NUMBER(1,0), 
	"PROCESS_NAME" VARCHAR2(20 BYTE), 
	"STATUS" VARCHAR2(10 BYTE), 
	"TIME" VARCHAR2(8 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_USER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_USER" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"EMP_NO" VARCHAR2(7 BYTE), 
	"PASSWORD" VARCHAR2(20 BYTE), 
	"GNAME_ENG" VARCHAR2(20 BYTE), 
	"FNAME_ENG" VARCHAR2(20 BYTE), 
	"ROLE" VARCHAR2(6 BYTE), 
	"EMAIL" VARCHAR2(40 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for View V_PRD_PLAN_A3_MODEL_MS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_PRD_PLAN_A3_MODEL_MS" ("FACTORY_CD", "MODEL_SEQ", "MODEL", "MODEL_ALL", "LINE_CD", "CELL_NAME") AS 
  SELECT M1.FACTORY_CD,M1.MODEL_SEQ,MIN(M1.MODEL)as MODEL,M1.MODEL_ALL,A1.LINE_CD,A1.CELL_NAME FROM T_PRD_PLAN_A3_MODEL_MS@FROM_EUC_CHTINQ M1 
LEFT JOIN T_PRD_PLAN_A3_ASSY_PLAN@FROM_EUC_CHTINQ A1
ON M1.FACTORY_CD = A1.FACTORY_CD
AND M1.MODEL_SEQ = A1.MODEL_SEQ
where PLAN_DATE BETWEEN to_char(sysdate,'YYYYMMDD') and  to_char(sysdate+1,'YYYYMMDD')
GROUP by M1.FACTORY_CD,M1.MODEL_SEQ,M1.MODEL_ALL,A1.LINE_CD,A1.CELL_NAME ORDER BY MODEL;
--------------------------------------------------------
--  DDL for View V_PRD_PROGRESSIVE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_PRD_PROGRESSIVE" ("MODEL", "PLAN_DATE", "CELL_NAME", "MODEL_SEQ", "LINE_CD", "SHIFT", "PLAN_Q", "Q1", "Q2", "Q3", "Q4", "Q5", "CYCLE_TIME", "DAYNIGHT", "WORKSHIFT_CD_DAY", "OVERTIME_CD_DAY", "WORKSHIFT_CD_NIGHT", "OVERTIME_CD_NIGHT") AS 
  SELECT A.model,A.PLAN_DATE,A.CELL_NAME, A.model_seq ,A.line_cd, A.shift , A.PLAN_Q,
round(M.Q1*(A.PLAN_Q/480))as Q1,round(M.Q2*(A.PLAN_Q/480))as Q2, round(M.Q3*(A.PLAN_Q/480))as Q3,round(M.Q4*(A.PLAN_Q/480))as Q4,
case A.shift WHEN 'D' THEN CASE WHEN A.OVERTIME_CD_DAY is not null THEN round(M.Q5*(A.PLAN_Q/480))end 
ELSE CASE WHEN A.OVERTIME_CD_NIGHT is not null THEN round(M.Q5*(A.PLAN_Q/480))end END as  Q5 ,A.CYCLE_TIME, 
A.DAYNIGHT,A.WORKSHIFT_CD_DAY,
A.OVERTIME_CD_DAY,A.WORKSHIFT_CD_NIGHT,A.OVERTIME_CD_NIGHT FROM
(SELECT c.model,c.PLAN_DATE,c.CELL_NAME, c.model_seq ,c.line_cd, c.shift , c.PLAN_Q,D.DAYNIGHT,d.WORKSHIFT_CD_DAY,
d.OVERTIME_CD_DAY,
d.WORKSHIFT_CD_NIGHT,
d.OVERTIME_CD_NIGHT,D.CYCLE_TIME FROM
(SELECT B.model,B.CELL_NAME,a.PLAN_DATE, A.model_seq ,a.line_cd, A.shift , A.PLAN_Q FROM
(SELECT  model_seq,shift,line_cd,PLAN_DATE, SUM(plan_qty) AS PLAN_Q FROM T_SLANE_PRODUCTION_PLAN  
WHERE FACTORY_CD = FACTORY_CD AND MODEL_SEQ = MODEL_SEQ
and plan_date = plan_date
AND SHIFT = SHIFT 
group by model_seq,shift,line_cd,PLAN_DATE) A left JOIN V_PRD_PLAN_A3_MODEL_MS B ON A.model_seq = B.model_seq and a.line_cd = B.LINE_CD
GROUP BY b.model, A.model_seq , A.shift,a.line_cd , A.PLAN_Q,B.CELL_NAME,a.PLAN_DATE ) C 
left join(SELECT a.PLAN_DATE,
b.MODEL_SEQ,
b.MODEL,
a.LINE_CD,
a.SHIFT,
a.WORKSHIFT_CD_DAY||a.WORKSHIFT_CD_NIGHT as DAYNIGHT,
a.WORKSHIFT_CD_DAY,
a.OVERTIME_CD_DAY,
a.WORKSHIFT_CD_NIGHT,
a.OVERTIME_CD_NIGHT,
a.CYCLE_TIME FROM V_PRD_PLAN_A3_MODEL_MS b LEFT join( SELECT PLAN_DATE,SUBSTR(LINE_CD,1,2)as LINE_CD,SHIFT,
WORKSHIFT_CD_DAY||WORKSHIFT_CD_NIGHT as DAYNIGHT,WORKSHIFT_CD_DAY,
OVERTIME_CD_DAY,WORKSHIFT_CD_NIGHT,OVERTIME_CD_NIGHT ,CYCLE_TIME
FROM t_prd_plan_a3_workshift_n_cap@from_euc_chtinq) a 
on a.LINE_CD = b.LINE_CD) D on c.PLAN_DATE = d.PLAN_DATE and c.model_seq = d.model_seq 
and c.line_cd = d.line_cd and c.shift = d.shift) A LEFT JOIN (select 
WORKSHIFT_CD,
SHIFT ,
(to_date(work1_end,'HH24:MI')-to_date(work1_begin,'HH24:MI'))*24*60 as Q1,case SHIFT when 'N' THEN 
(TO_DATE(TO_CHAR(SYSDATE+1,'YYYYMMDD')||WORK2_END,'YYYYMMDDHH24:MI')-TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')||WORK2_BEGIN,'YYYYMMDDHH24:MI'))*24 * 60 
else (to_date(work2_end,'HH24:MI')-to_date(work2_begin,'HH24:MI'))*24 *60 end as Q2,
(to_date(work3_end,'HH24:MI')-to_date(work3_begin,'HH24:MI'))*24*60 as Q3,
(to_date(work4_end,'HH24:MI')-to_date(work4_begin,'HH24:MI'))*24*60 as Q4,
120 as Q5
from t_prd_plan_a3_workshift_cd@from_euc_chtinq) M on A.DAYNIGHT = M.WORKSHIFT_CD AND A.SHIFT = M.SHIFT;
--------------------------------------------------------
--  DDL for View V_SLANE_CHART_HANDLING
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_CHART_HANDLING" ("MODEL", "PLAN_DATE", "LINE_CD", "SHIFT", "DAISHA_TYPE", "DAISHA_GROUP", "ROUND", "DIFF_LINE", "DIFF_CHART", "DIFF_RE", "DIFF_CHART_END", "CYCLE_TIME", "DIFF", "PLAN_TIME", "SEQ", "TYPE_DAISHA") AS 
  SELECT  A.MODEL,A.PLAN_DATE,A.LINE_CD,A.SHIFT,A.DAISHA_TYPE,A.DAISHA_GROUP,A.ROUND,
((NVL(A.CYCLE_TIME - A.DIFF,'0')/A.CYCLE_TIME)*100) AS DIFF_LINE,
case  when ((NVL(A.CYCLE_TIME - A.DIFF,'0')/A.CYCLE_TIME)*100) > 100
then 100 else ((NVL(A.CYCLE_TIME - A.DIFF,'0')/A.CYCLE_TIME)*100) 
end as DIFF_CHART,case when 100-((NVL(A.CYCLE_TIME - A.DIFF,'0')/A.CYCLE_TIME)*100) < 0 
then 0 else case when 100-((NVL(A.CYCLE_TIME - A.DIFF,'0')/A.CYCLE_TIME)*100) > 100 
then 100 else 100-((NVL(A.CYCLE_TIME - A.DIFF,'0')/A.CYCLE_TIME)*100) end 
end 
as DIFF_RE,case when ((NVL(A.CYCLE_TIME - A.DIFF,'0')/A.CYCLE_TIME)*100)-100 < 0 
then 0 else ((NVL(A.CYCLE_TIME - A.DIFF,'0')/A.CYCLE_TIME)*100)-100 
end as DIFF_CHART_END,A.CYCLE_TIME,NVL(A.DIFF,'0') as DIFF,A.PLAN_OUT_SLANE_TM as PLAN_TIME,A.SEQ,A.TYPE_DAISHA 
FROM V_SLANE_CHART_HANDLING_NEW A;
--------------------------------------------------------
--  DDL for View V_SLANE_CHART_HANDLING_NEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_CHART_HANDLING_NEW" ("FACTORY_CD", "MODEL", "PLAN_DATE", "SHIFT", "LINE_CD", "CELL_NAME", "DAISHA_TYPE", "DAISHA_GROUP", "CYCLE_TIME", "TYPE_DAISHA", "START_DIFF", "DIFF", "DIFF_CHART", "SEQ", "ROUND", "LOCATION", "BLANE_SIGNAL_DT", "BLANE_SIGNAL_TM", "PLAN_OUT_SLANE_DT", "PLAN_OUT_SLANE_TM", "ACT_OUT_SLANE_DT", "ACT_OUT_SLANE_TM") AS 
  SELECT A.FACTORY_CD,
  A.MODEL,
  A.PLAN_DATE,
  A.SHIFT,
  A.LINE_CD,
  A.CELL_NAME,
  A.DAISHA_TYPE,
  A.DAISHA_GROUP,
  B.CYCLE_TIME,
  B.TYPE as TYPE_DAISHA,
CASE WHEN A.ACT_OUT_SLANE_TM <> 'xx:xx:xx' THEN  ROUND((TO_DATE(TO_CHAR(TO_DATE(A.ACT_OUT_SLANE_DT,'YYYYMMDD'),'DD-MM-YY')||A.ACT_OUT_SLANE_TM,'DD-MM-YYHH24:MI:SS')- TO_DATE(TO_CHAR(TO_DATE(A.BLANE_SIGNAL_DT,'YYYYMMDD'),'DD-MM-YY')||A.BLANE_SIGNAL_TM,'DD-MM-YYHH24:MI:SS'))*24*60)
ELSE 0 END as START_DIFF,

CASE WHEN A.ACT_OUT_SLANE_TM <> 'xx:xx:xx' THEN  ROUND((TO_DATE(TO_CHAR(TO_DATE(A.PLAN_OUT_SLANE_DT,'YYYYMMDD'),'DD-MM-YY')||A.PLAN_OUT_SLANE_TM,'DD-MM-YYHH24:MI:SS')- TO_DATE(TO_CHAR(TO_DATE(A.ACT_OUT_SLANE_DT,'YYYYMMDD'),'DD-MM-YY')||A.ACT_OUT_SLANE_TM,'DD-MM-YYHH24:MI:SS'))*24*60) 
ELSE 0 END as DIFF,
CASE WHEN A.ACT_OUT_SLANE_TM <> 'xx:xx:xx' THEN
B.CYCLE_TIME-NVL(ROUND((TO_DATE(TO_CHAR(TO_DATE(A.PLAN_OUT_SLANE_DT,'YYYYMMDD'),'DD-MM-YY')||A.PLAN_OUT_SLANE_TM,'DD-MM-YYHH24:MI:SS')- TO_DATE(TO_CHAR(TO_DATE(A.ACT_OUT_SLANE_DT,'YYYYMMDD'),'DD-MM-YY')||A.ACT_OUT_SLANE_TM,'DD-MM-YYHH24:MI:SS'))*24*60),'0')
ELSE 0 END as DIFF_CHART,
  A.SEQ,
  A.ROUND,
  A.LOCATION,
  A.BLANE_SIGNAL_DT,
  A.BLANE_SIGNAL_TM,
  A.PLAN_OUT_SLANE_DT,
  A.PLAN_OUT_SLANE_TM,
  A.ACT_OUT_SLANE_DT,
  A.ACT_OUT_SLANE_TM
  FROM T_SLANE_DAISHA_PROGRESSIVE 
  A LEFT JOIN T_SLANE_DELIVERY_CYCLE_MASTER B ON A.MODEL= B.MODEL 
   WHERE  A.BLANE_SIGNAL_TM IS NOT NULL  AND   A.ACT_OUT_SLANE_TM IS NOT NULL AND B.ZONE = 'S';
--------------------------------------------------------
--  DDL for View V_SLANE_CHART_PICKING
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_CHART_PICKING" ("FACTORY_CD", "MODEL", "PLAN_DATE", "SHIFT", "LINE_CD", "CELL_NAME", "DAISHA_TYPE", "DAISHA_GROUP", "CYCLE_TIME", "TYPE_DAISHA", "START_DIFF", "DIFF", "DIFF_CHART", "SEQ", "ROUND", "LOCATION", "PLAN_PICK_DT", "PLAN_PICK_TM", "ACT_PICK_DT", "ACT_PICK_TM", "SLANE_IN_DT", "SLANE_IN_TM", "ORDER_NO") AS 
  SELECT A.FACTORY_CD,
  A.MODEL,
  A.PLAN_DATE,
  A.SHIFT,
  A.LINE_CD,
  A.CELL_NAME,
  A.DAISHA_TYPE,
  A.DAISHA_GROUP,
  B.CYCLE_TIME,
  B.TYPE as TYPE_DAISHA,
   --NVL(ROUND((TO_DATE(TO_CHAR(TO_DATE(A.SLANE_IN_TM,'HH24:MI:SS'),
--'HH24:MI'),'HH24:MI')-TO_DATE(TO_CHAR(TO_DATE(A.ACT_PICK_TM,'HH24:MI:SS'),'HH24:MI'),'HH24:MI'))*24*60),'0') as START_DIFF,
 ROUND((TO_DATE(TO_CHAR(TO_DATE(A.SLANE_IN_DT,'YYYYMMDD'),'DD-MM-YY')||A.SLANE_IN_TM,'DD-MM-YYHH24:MI:SS')- TO_DATE(TO_CHAR(TO_DATE(A.ACT_PICK_DT,'YYYYMMDD'),'DD-MM-YY')||A.ACT_PICK_TM,'DD-MM-YYHH24:MI:SS'))*24*60)
 as START_DIFF,
ROUND((TO_DATE(TO_CHAR(TO_DATE(A.ACT_PICK_DT,'YYYYMMDD'),'DD-MM-YY')||A.ACT_PICK_TM,'DD-MM-YYHH24:MI:SS')- TO_DATE(TO_CHAR(TO_DATE(A.SLANE_IN_DT,'YYYYMMDD'),'DD-MM-YY')||A.SLANE_IN_TM,'DD-MM-YYHH24:MI:SS'))*24*60) as DIFF,
--ROUND((TO_DATE(TO_CHAR(TO_DATE(A.SLANE_IN_DT,'YYYYMMDD'),'DD-MM-YY')||A.SLANE_IN_TM,'DD-MM-YYHH24:MI:SS')- TO_DATE(TO_CHAR(TO_DATE(A.ACT_PICK_DT,'YYYYMMDD'),'DD-MM-YY')||A.ACT_PICK_TM,'DD-MM-YYHH24:MI:SS'))*24*60)
 --as DIFF,
B.CYCLE_TIME-NVL(ROUND((TO_DATE(TO_CHAR(TO_DATE(A.ACT_PICK_DT,'YYYYMMDD'),'DD-MM-YY')||A.ACT_PICK_TM,'DD-MM-YYHH24:MI:SS')- TO_DATE(TO_CHAR(TO_DATE(A.SLANE_IN_DT,'YYYYMMDD'),'DD-MM-YY')||A.SLANE_IN_TM,'DD-MM-YYHH24:MI:SS'))*24*60),'0') as DIFF_CHART,
  A.SEQ,
  A.ROUND,
  A.LOCATION,
  A.PLAN_PICK_DT,
  A.PLAN_PICK_TM,
  A.ACT_PICK_DT,
  A.ACT_PICK_TM,
  A.SLANE_IN_DT,
  A.SLANE_IN_TM,
  A.ORDER_NO
  FROM T_SLANE_DAISHA_PROGRESSIVE 
  A LEFT JOIN T_SLANE_DELIVERY_CYCLE_MASTER B ON A.MODEL= B.MODEL 
   WHERE  A.ACT_PICK_TM IS NOT NULL AND  A.SLANE_IN_TM IS NOT NULL AND B.ZONE = 'P';
--------------------------------------------------------
--  DDL for View V_SLANE_DAISHA_PROGRESSIVE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_DAISHA_PROGRESSIVE" ("MODEL", "PLAN_DATE", "LINE_CD", "CELL_NAME", "DAISHA_TYPE", "DAISHA_GROUP", "TOTAL_EMPTY", "ACT_PICK", "PLAN_PICK", "S_ROUND", "PLAN_OUT", "PLANOUT_TM", "PLAN_ACT_OUT_TM", "ACT_SLANE", "ACT_OUT_SLANE_TM", "BLANE_ROUND", "ASSY", "LOCATION", "BLANE_IN_TM", "ACT_OUT_TM", "PLAN_PICK_TM", "SEQ", "ROUND", "MIN", "MAX") AS 
  SELECT k.model,
    k.PLAN_DATE,
    k.line_cd,
    k.cell_name,
    --x.cell_name,
    k.DAISHA_TYPE,
    k.DAISHA_GROUP ,
    e.total_empty,
    D.ACT_PICK,
    c.PLAN_PICK,
    A.S_ROUND,
    f.PLAN_OUT,
    f.PLANOUT_TM,
    m.PLAN_ACT_OUT_TM,
    p.ACT_SLANE,
    p.ACT_OUT_SLANE_TM,
    i.BLANE_ROUND,
    t.ASSY,
    i.location,
    i.BLANE_IN_TM,
    i.ACT_OUT_SLANE_TM as ACT_OUT_TM,
    d.PLAN_PICK_TM,
    N.SEQ,
    N.ROUND,
    N.MIN,
    N.MAX
  FROM
    (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP
    FROM t_slane_daisha_progressive
    WHERE model  = model
    AND location = location
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) K
  LEFT JOIN
    (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP,
      LISTAGG(ROUND
      ||COLOR, ',') WITHIN GROUP (
    ORDER BY seq DESC) AS S_ROUND
    FROM t_slane_daisha_progressive
    WHERE model  = model
    AND location = 'S-LANE'
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) A
  ON K.model         = A.model
  AND k.plan_date    = a.plan_date
  AND k.line_cd      = a.line_cd
  AND k.DAISHA_TYPE  = a.DAISHA_TYPE
  AND k.DAISHA_GROUP = a.DAISHA_GROUP
  LEFT JOIN
    (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP,
      MAX(PLAN_PICK_TM) AS PLAN_PICK_TM,
      LISTAGG(ROUND
      ||COLOR, ',') WITHIN GROUP (
    ORDER BY seq DESC) AS ACT_PICK
    FROM t_slane_daisha_progressive
    WHERE model  = model
    AND location = 'PICKING'
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) D
  ON k.model         = d.model
  AND k.plan_date    = d.plan_date
  AND k.line_cd      = d.line_cd
  AND k.DAISHA_TYPE  = d.DAISHA_TYPE
  AND k.DAISHA_GROUP = d.DAISHA_GROUP
  LEFT JOIN
    (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP,
      LISTAGG(ROUND
      ||COLOR, ',') WITHIN GROUP (
    ORDER BY seq DESC)      AS PLAN_OUT,
      MAX(PLAN_OUT_SLANE_TM)AS PLANOUT_TM
    FROM t_slane_daisha_progressive
    WHERE model            = model
    AND location           = 'S-LANE'
    AND BLANE_SIGNAL_DT   IS NOT NULL
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) F
  ON k.model         = f.model
  AND k.plan_date    = f.plan_date
  AND k.line_cd      = f.line_cd
  AND k.DAISHA_TYPE  = f.DAISHA_TYPE
  AND k.DAISHA_GROUP = f.DAISHA_GROUP
  LEFT JOIN
    (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP,
      LISTAGG(ROUND
      ||COLOR, ',') WITHIN GROUP (
    ORDER BY seq DESC) AS PLAN_PICK
    FROM t_slane_daisha_progressive
    WHERE model   = model
    AND location IS NULL
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) C
  ON k.model         = c.model
  AND k.plan_date    = c.plan_date
  AND k.line_cd      = c.line_cd
  AND k.DAISHA_TYPE  = c.DAISHA_TYPE
  AND k.DAISHA_GROUP = c.DAISHA_GROUP
  LEFT JOIN
    (SELECT model,
      cal_date,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP,
       sum(total_empty)as total_empty
    FROM t_slane_rec_empty_daisha
    WHERE cal_date = (SELECT 
      MAX(cal_date)AS cal_date from t_slane_rec_empty_daisha)
    GROUP BY model,
     cal_date,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) E
  ON k.line_cd       = e.line_cd
  AND k.model        = e.model
  AND k.DAISHA_TYPE  = e.DAISHA_TYPE
  AND k.DAISHA_GROUP = e.DAISHA_GROUP
  LEFT JOIN
    (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP,
      location,
      MAX(BLANE_IN_TM)AS BLANE_IN_TM,
       MAX(ACT_OUT_SLANE_TM)AS ACT_OUT_SLANE_TM,
      LISTAGG(ROUND
      ||COLOR, ',') WITHIN GROUP (
    ORDER BY seq DESC) AS BLANE_ROUND
    FROM t_slane_daisha_progressive
    WHERE model  = model
    AND (location = 'IN KITTING' 
    OR location = 'IN B-LANE')
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      LOCATION,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) I
  ON k.model         = i.model
  AND k.plan_date    = i.plan_date
  AND k.line_cd      = i.line_cd
  AND k.DAISHA_TYPE  = i.DAISHA_TYPE
  AND k.DAISHA_GROUP = i.DAISHA_GROUP
  LEFT JOIN
    (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP,
      LISTAGG(ROUND
      ||COLOR, ',') WITHIN GROUP (
    ORDER BY seq DESC) AS ASSY
    FROM t_slane_daisha_progressive
    WHERE model  = model
    AND location = 'ASSY'
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      LOCATION,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) T
  ON k.model         = t.model
  AND k.plan_date    = t.plan_date
  AND k.line_cd      = t.line_cd
  AND k.DAISHA_TYPE  = t.DAISHA_TYPE
  AND k.DAISHA_GROUP = t.DAISHA_GROUP
  LEFT JOIN
    (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP,
      LISTAGG(ROUND
      ||COLOR, ',') WITHIN GROUP (
    ORDER BY seq DESC)     AS ACT_SLANE,
      MAX(ACT_OUT_SLANE_TM)AS ACT_OUT_SLANE_TM
    FROM t_slane_daisha_progressive
    WHERE model           = model
    AND location          = 'KITTING'
    OR location           = 'B-LANE'
    AND BLANE_SIGNAL_DT  IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NOT NULL
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      LOCATION,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) P
  ON k.model         = p.model
  AND k.plan_date    = p.plan_date
  AND k.line_cd      = p.line_cd
  AND k.DAISHA_TYPE  = p.DAISHA_TYPE
  AND k.DAISHA_GROUP = p.DAISHA_GROUP
  LEFT JOIN (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP,
      LISTAGG(ROUND
      ||COLOR, ',') WITHIN GROUP (
    ORDER BY seq DESC)      AS ACT_OUT_BEFORE,
      MAX(PLAN_OUT_SLANE_TM)AS PLAN_ACT_OUT_TM
    FROM t_slane_daisha_progressive
    WHERE model            = model
    AND (location           = 'KITTING'
    or location           = 'IN KITTING'
    or location           = 'B-LANE'
    or location           = 'IN B-LANE')
    AND BLANE_SIGNAL_DT   IS NOT NULL
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP)M 
   ON k.model        = M.model
  AND k.plan_date    = M.plan_date
  AND k.line_cd      = M.line_cd
  AND k.DAISHA_TYPE  = M.DAISHA_TYPE
  AND k.DAISHA_GROUP = M.DAISHA_GROUP
  LEFT JOIN (select a.model,
      a.cell_name,
      a.PLAN_DATE,
      a.line_cd ,
      a.DAISHA_TYPE,
      a.DAISHA_GROUP,
      a.SEQ,
      b.round,
      a.min,
      a.max
      from 
(select a.model,
      a.cell_name,
      a.PLAN_DATE,
      a.line_cd ,
      a.DAISHA_TYPE,
      a.DAISHA_GROUP,
       b.min,
       b.max,
      (a.SEQ + b.MIN)-1 as SEQ from (   
    SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP,
    MIN(SEQ ) as SEQ
    FROM t_slane_daisha_progressive
    WHERE model  = model
    AND location = 'S-LANE'
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP)A left join T_SLANE_DAISHA_MASTER B on
      a.model = b.model and
      a.line_cd = b.line_cd and
      a.DAISHA_TYPE = b.DAISHA_TYPE and
      a.DAISHA_GROUP = b.DAISHA_GROUP)A,(SELECT * FROM t_slane_daisha_progressive)B 
      WHERE
      a.model =b.model 
      and a.cell_name = b.cell_name
      and a.PLAN_DATE =b.PLAN_DATE
     and a.line_cd = b.line_cd
     and a.DAISHA_TYPE =b.DAISHA_TYPE
    and  a.DAISHA_GROUP = b.DAISHA_GROUP
    and  a.SEQ = b.SEQ) N ON 
      k.model        = N.model
  AND k.plan_date    = N.plan_date
  AND k.line_cd      = N.line_cd
  AND k.DAISHA_TYPE  = N.DAISHA_TYPE
  AND k.DAISHA_GROUP = N.DAISHA_GROUP;
--------------------------------------------------------
--  DDL for View V_SLANE_DETAIL_EMPTY
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_DETAIL_EMPTY" ("MODEL", "CELL_NAME", "DAISHA_TYPE", "DAISHA_GROUP", "TOTAL_EMPTY") AS 
  SELECT C.MODEL,CELL_NAME,
E.DAISHA_TYPE_N as DAISHA_TYPE,
D.DAISHA_GROUP_N as DAISHA_GROUP,
C.TOTAL_EMPTY FROM
(SELECT  A.MODEL,A.CAL_DATE,A.LINE_CD, CASE  A.LINE_CD WHEN 'CM' THEN 'ALL' ELSE  A.CELL_NAME END AS CELL_NAME, 
 A.DAISHA_TYPE ,A.DAISHA_GROUP,sum( A.total_empty)as total_empty 
FROM t_slane_rec_empty_daisha A,
(SELECT model,LINE_CD,DAISHA_TYPE,
MAX(cal_date)AS cal_date,DAISHA_GROUP from t_slane_rec_empty_daisha  
WHERE model = model 
and LINE_CD = LINE_CD GROUP BY model,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP)B
WHERE A.MODEL = B.MODEL
AND A.LINE_CD = B.LINE_CD
AND A.CAL_DATE = B.cal_date
AND A.DAISHA_TYPE = B.DAISHA_TYPE
AND A.DAISHA_GROUP = B.DAISHA_GROUP
GROUP BY  A.model, A.cal_date, A.line_cd , A.CELL_NAME, A.DAISHA_TYPE,
 A.DAISHA_GROUP)C
 LEFT JOIN T_SLANE_DAISHA_GROUP D ON C.DAISHA_GROUP = D.DAISHA_GROUP    
LEFT JOIN T_SLANE_DAISHA_TYPE E ON C.DAISHA_TYPE = E.DAISHA_TYPE;
--------------------------------------------------------
--  DDL for View V_SLANE_DNM_DAILY_PLAN
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_DNM_DAILY_PLAN" ("MODEL", "SHIFT", "PLAN_DATE", "PLAN_QTY", "PLAN_QTY_BY_SHIFT", "REALTIME_PLAN_QTY", "ACTUAL_QTY", "DIFF_QTY") AS 
  SELECT a.MODEL,b.SHIFT,a.PLAN_DATE,sum(a.PLAN_QTY)as PLAN_QTY,
sum(b.PLAN_QTY_BY_SHIFT)as PLAN_QTY_BY_SHIFT,
sum(REALTIME_PLAN_QTY)as REALTIME_PLAN_QTY,
sum(ACTUAL_QTY)as ACTUAL_QTY,sum(DIFF_QTY)as DIFF_QTY FROM 
(select  MODEL,LINE_CD,sum(PLAN_QTY)as PLAN_QTY,PLAN_DATE 
from T_SLANE_PRODUCTION_PLAN  GROUP BY 
MODEL ,PLAN_DATE,LINE_CD)A left join 
(select LINE_CD,SHIFT,CAL_DATE, 
sum(PLAN_QTY_BY_SHIFT)as PLAN_QTY_BY_SHIFT,
sum(REALTIME_PLAN_QTY)as REALTIME_PLAN_QTY,
sum(ACTUAL_QTY)as ACTUAL_QTY,
sum(DIFF_QTY)as DIFF_QTY  
FROM T_SLANE_DNM_RLTMPLANBYSHF_W 
group by LINE_CD,SHIFT,CAL_DATE)B ON
a.LINE_CD = b.LINE_CD 
and a.PLAN_DATE = b.CAL_DATE 
GROUP BY a.MODEL,a.PLAN_DATE ,b.SHIFT;
--------------------------------------------------------
--  DDL for View V_SLANE_DNM_DAILY_PLAN_B_LANE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_DNM_DAILY_PLAN_B_LANE" ("MODEL", "LINE_CD", "CELL_NAME", "PLAN_QTY", "PLAN_DATE", "SHIFT", "PLAN_QTY_BY_SHIFT", "REALTIME_PLAN_QTY", "ACTUAL_QTY", "DIFF_QTY") AS 
  select A.MODEL,
A.LINE_CD,
A.CELL_NAME,
A.PLAN_QTY,
A.PLAN_DATE,
B.SHIFT,
B.PLAN_QTY_BY_SHIFT,
B.REALTIME_PLAN_QTY,
B.ACTUAL_QTY,
B.DIFF_QTY from
(select  MODEL,LINE_CD,CELL_NAME,sum(PLAN_QTY)as PLAN_QTY,PLAN_DATE 
from T_SLANE_PRODUCTION_PLAN  GROUP BY 
MODEL ,PLAN_DATE,LINE_CD,CELL_NAME)A left join 
(select LINE_CD,SHIFT,CAL_DATE, 
sum(PLAN_QTY_BY_SHIFT)as PLAN_QTY_BY_SHIFT,
sum(REALTIME_PLAN_QTY)as REALTIME_PLAN_QTY,
sum(ACTUAL_QTY)as ACTUAL_QTY,
sum(DIFF_QTY)as DIFF_QTY  
FROM T_SLANE_DNM_RLTMPLANBYSHF_W 
group by LINE_CD,SHIFT,CAL_DATE)B 
on A.LINE_CD = B.LINE_CD
and A.PLAN_DATE = B.CAL_DATE;
--------------------------------------------------------
--  DDL for View V_SLANE_DNM_WORKSHIFT_CD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_DNM_WORKSHIFT_CD" ("FACTORY_CD", "MODEL_SEQ", "MODEL", "SHIFT", "LINE_CD", "WORK1_BEGIN", "WORK1_END", "WORK2_BEGIN", "WORK2_END", "WORK3_BEGIN", "WORK3_END", "WORK4_BEGIN", "WORK4_END") AS 
  SELECT D.FACTORY_CD,
    C.MODEL_SEQ,
    C.MODEL,
    C.SHIFT,
    C.LINE_CD,
    WORK1_BEGIN,
    WORK1_END ,
    WORK2_BEGIN,
    WORK2_END,
    WORK3_BEGIN,
    WORK3_END ,
    WORK4_BEGIN,
    WORK4_END
  FROM
    ( SELECT DISTINCT(a.MODEL_SEQ)AS MODEL_SEQ,
      a.MODEL,
      B.SHIFT,
      a.LINE_CD,
      B.DAYNIGHT
    FROM V_PRD_PLAN_A3_MODEL_MS A
    LEFT JOIN
      (SELECT DISTINCT(SUBSTR(LINE_CD,1,2))AS LINE_CD,
        SHIFT,
        WORKSHIFT_CD_DAY
        ||WORKSHIFT_CD_NIGHT AS DAYNIGHT
      FROM T_SLANE_DNM_WORKSHIFT_N_CAP
      )B
    ON A.LINE_CD = B.LINE_CD
    )C
  LEFT JOIN T_SLANE_DNM_WORKSHIFT_CD D
  ON C.DAYNIGHT = D.WORKSHIFT_CD
  GROUP BY D.FACTORY_CD,
    C.MODEL_SEQ,
    C.MODEL,
    C.SHIFT,
    C.LINE_CD,
    WORK1_BEGIN,
    WORK1_END ,
    WORK2_BEGIN,
    WORK2_END,
    WORK3_BEGIN,
    WORK3_END ,
    WORK4_BEGIN,
    WORK4_END;
--------------------------------------------------------
--  DDL for View V_SLANE_PRODUCTION_PLAN
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_PRODUCTION_PLAN" ("MODEL", "PLAN_DATE", "LINE_CD", "CELL_NAME", "SHIFT", "PLAN_QTY", "WORKINGTIME", "CYCLE_TIME", "TIME_Q1", "TIME_Q2", "TIME_Q3", "TIME_Q4", "TIME_Q5", "PLAN_Q1", "PLAN_Q2", "PLAN_Q3", "PLAN_Q4", "PLAN_Q5") AS 
  SELECT MODEL,
    PLAN_DATE,
    LINE_CD,
    CELL_NAME,
    SHIFT,
    PLAN_QTY,
    workingtime,
    CYCLE_TIME,
    ROUND(TIME_Q1)as TIME_Q1,
    ROUND(TIME_Q2)as TIME_Q2,
    ROUND(TIME_Q3)as TIME_Q3,
    ROUND(TIME_Q4)as TIME_Q4,
    ROUND(TIME_Q5)as TIME_Q5,
    ROUND((TIME_Q1*PLAN_QTY)/workingtime) AS PLAN_Q1,
    ROUND((TIME_Q2*PLAN_QTY)/workingtime) AS PLAN_Q2,
    ROUND((TIME_Q3*PLAN_QTY)/workingtime) AS PLAN_Q3,
    CASE TIME_Q5
      WHEN 0
      THEN (PLAN_QTY      -(ROUND((TIME_Q1*PLAN_QTY)/workingtime)+ROUND((TIME_Q2*PLAN_QTY)/workingtime) +ROUND((TIME_Q3*PLAN_QTY)/workingtime)))
      ELSE (ROUND((TIME_Q4*PLAN_QTY)/workingtime))
    END AS PLAN_Q4,
    CASE TIME_Q5
      WHEN 0
      THEN 0
      ELSE (PLAN_QTY-(ROUND((TIME_Q1*PLAN_QTY)/workingtime)+ROUND((TIME_Q2*PLAN_QTY)/workingtime) +ROUND((TIME_Q3*PLAN_QTY)/workingtime)+ROUND((TIME_Q4*PLAN_QTY)/workingtime)))
    END AS PLAN_Q5
  FROM
    (SELECT MODEL,
      PLAN_DATE,
      LINE_CD,
      CELL_NAME,
      SHIFT,
      PLAN_QTY,
      (workingtime_min+overtime_min) workingtime,
      CYCLE_TIME,
      (to_date(work1_end,'HH24:MI')-to_date(work1_begin,'HH24:MI'))*24*60 AS TIME_Q1,
      CASE SHIFT
        WHEN 'D'
        THEN (to_date(work2_end,'HH24:MI')  -to_date(work2_begin,'HH24:MI'))*24*60
        ELSE 
        CASE WHEN 
        work2_end BETWEEN '23:00' and '23:59'
        THEN 
       (to_date(work2_end,'HH24:MI')  -to_date(work2_begin,'HH24:MI'))*24*60
          ELSE 
         (TO_DATE(TO_CHAR(SYSDATE       +1,'YYYYMMDD')
          ||WORK2_END,'YYYYMMDDHH24:MI')    - TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')
          ||WORK2_BEGIN,'YYYYMMDDHH24:MI')) *24 * 60
          
          END
      END                                                                 AS TIME_Q2,
      (to_date(work3_end,'HH24:MI')-to_date(work3_begin,'HH24:MI'))*24*60 AS TIME_Q3,
      (to_date(work4_end,'HH24:MI')-to_date(work4_begin,'HH24:MI'))*24*60 AS TIME_Q4,
      overtime_min                                                        AS TIME_Q5
    FROM
      (SELECT a.model,
        a.plan_date,
        a.line_cd,
        a.cell_name,
        a.shift,
        SUM(A.PLAN_QTY) PLAN_QTY,
        b.workshift_cd_day,
        b.overtime_cd_day,
        b.cycle_time,
        c.work1_begin,
        c.work1_end,
        c.work2_begin,
        c.work2_end,
        c.work3_begin,
        c.work3_end,
        c.work4_begin,
        c.work4_end,
        NVL(c.workingtime_min,0) AS workingtime_min ,
        NVL(d.workingtime_min,0) AS overtime_min
      FROM t_slane_production_plan a,
        t_slane_dnm_workshift_n_cap b,
        t_slane_dnm_workshift_cd c ,
        t_slane_dnm_overtime_cd d
      WHERE a.plan_date      BETWEEN TO_CHAR(SYSDATE-30 ,'YYYYMMDD') and TO_CHAR(SYSDATE,'YYYYMMDD')
      AND a.shift            = 'D'
      AND a.plan_date        = b.plan_date(+)
      AND a.line_cd          = SUBSTR(b.line_cd(+),1,2)
      AND b.workshift_cd_day = c.workshift_cd
      AND b.overtime_cd_day  = d.overtime_cd (+)
      GROUP BY a.model,
        a.plan_date,
        a.line_cd,
        a.cell_name,
        a.shift,
        b.workshift_cd_day,
        b.overtime_cd_day,
        b.cycle_time,
        c.work1_begin,
        c.work1_end,
        c.work2_begin,
        c.work2_end,
        c.work3_begin,
        c.work3_end,
        c.work4_begin,
        c.work4_end,
        NVL(c.workingtime_min,0),
        NVL(d.workingtime_min,0)
      UNION
      SELECT a.model,
        a.plan_date,
        a.line_cd,
        a.cell_name,
        a.shift,
        SUM(A.PLAN_QTY) PLAN_QTY,
        b.workshift_cd_night,
        b.overtime_cd_night,
        b.cycle_time,
        c.work1_begin,
        c.work1_end,
        c.work2_begin,
        c.work2_end,
        c.work3_begin,
        c.work3_end,
        c.work4_begin,
        c.work4_end,
        NVL(c.workingtime_min,0) AS workingtime_min ,
        NVL(d.workingtime_min,0) AS overtime_min
      FROM t_slane_production_plan a,
        t_slane_dnm_workshift_n_cap b,
        t_slane_dnm_workshift_cd c ,
        t_slane_dnm_overtime_cd d
      WHERE a.plan_date        BETWEEN TO_CHAR(SYSDATE-30 ,'YYYYMMDD') and TO_CHAR(SYSDATE,'YYYYMMDD')
      AND a.shift              = 'N'
      AND a.plan_date          = b.plan_date(+)
      AND a.line_cd            = SUBSTR(b.line_cd(+),1,2)
      AND b.workshift_cd_night = c.workshift_cd
      AND b.overtime_cd_night  = d.overtime_cd (+)
      GROUP BY a.model,
        a.plan_date,
        a.line_cd,
        a.cell_name,
        a.shift,
        b.workshift_cd_night,
        b.overtime_cd_night,
        b.cycle_time,
        c.work1_begin,
        c.work1_end,
        c.work2_begin,
        c.work2_end,
        c.work3_begin,
        c.work3_end,
        c.work4_begin,
        c.work4_end,
        NVL(c.workingtime_min,0),
        NVL(d.workingtime_min,0)
      )
    );
--------------------------------------------------------
--  DDL for View V_SLANE_PROGRESS_ORDER_DAISHA
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_PROGRESS_ORDER_DAISHA" ("FACTORY_CD", "PLAN_DATE", "MODEL", "SHIFT", "LINE_CD", "SECTION", "DAISHA_TYPE", "DAISHA_GROUP", "ROUND", "ORDER_NO", "PLAN_TIME", "ACT_TIME", "DIFF", "MIN_BLANE") AS 
  select A.FACTORY_CD,
A.PLAN_DATE,
A.MODEL,
A.SHIFT,
A.LINE_CD,
B.DAISHA_TYPE_N||C.DAISHA_GROUP_N as SECTION,
B.DAISHA_TYPE_N AS DAISHA_TYPE,
C.DAISHA_GROUP_N as DAISHA_GROUP,
A.ORDER_NO as ROUND,
A.ROUND as ORDER_NO,
SUBSTR(A.PLAN_OUT_SLANE_TM,0,5) as PLAN_TIME,
SUBSTR(A.ACT_OUT_SLANE_TM,0,5) as ACT_TIME,
CASE WHEN A.ACT_OUT_SLANE_TM <> 'xx:xx:xx' THEN 
ROUND((TO_DATE(TO_CHAR(TO_DATE(A.PLAN_OUT_SLANE_DT,'YYYYMMDD'),'DD-MM-YY')||SUBSTR(A.PLAN_OUT_SLANE_TM,0,5),'DD-MM-YYHH24:MI:SS')- 
TO_DATE(TO_CHAR(TO_DATE(A.ACT_OUT_SLANE_DT,'YYYYMMDD'),'DD-MM-YY')||SUBSTR(A.ACT_OUT_SLANE_TM,0,5),'DD-MM-YYHH24:MI:SS'))*24*60) 
ELSE null END as DIFF,
SUBSTR(A.BLANE_OUT_TM,0,5) as MIN_BLANE FROM
T_SLANE_DAISHA_PROGRESSIVE A 
LEFT JOIN T_SLANE_DAISHA_TYPE B ON A.DAISHA_TYPE = B.DAISHA_TYPE
LEFT JOIN T_SLANE_DAISHA_GROUP C ON A.DAISHA_GROUP = C.DAISHA_GROUP
where A.ORDER_NO IS not null;
--------------------------------------------------------
--  DDL for View V_SLANE_PRO_DELIVERY
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_PRO_DELIVERY" ("FACTORY_CD", "MODEL", "PLAN_DATE", "SHIFT", "LINE_CD", "CELL_NAME", "DAISHA_TYPE", "DAISHA_GROUP", "Q1", "Q2", "Q3", "Q4", "Q5") AS 
  SELECT A.FACTORY_CD,
    A.MODEL,
    A.PLAN_DATE,
    A.SHIFT,
    A.LINE_CD,
    A.CELL_NAME,
    B.DAISHA_TYPE_N  AS DAISHA_TYPE,
    D.DAISHA_GROUP_N AS DAISHA_GROUP,
    A.Q1,
    A.Q2,
    A.Q3,
    A.Q4,
    A.Q5
  FROM
    (SELECT a.FACTORY_CD,
      a.MODEL,
      a.PLAN_DATE,
      a.SHIFT,
      a.LINE_CD,
      a.CELL_NAME,
      a.DAISHA_TYPE,
      a.DAISHA_GROUP,
      B.Q1,
      C.Q2,
      D.Q3,
      E.Q4,
      F.Q5
    FROM
      (SELECT FACTORY_CD,
        MODEL,
        PLAN_DATE,
        SHIFT,
        LINE_CD,
        CELL_NAME,
        DAISHA_TYPE,
        DAISHA_GROUP
      FROM T_SLANE_DAISHA_PROGRESSIVE
      GROUP BY FACTORY_CD,
        MODEL,
        PLAN_DATE,
        SHIFT,
        LINE_CD,
        CELL_NAME,
        DAISHA_TYPE,
        DAISHA_GROUP
      )A
    LEFT JOIN
      (SELECT a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        (COUNT(*)*c.snp)AS Q1
      FROM T_SLANE_DAISHA_PROGRESSIVE a,
        (SELECT DISTINCT(MODEL),
          SHIFT,
          WORK1_BEGIN,
          WORK1_END,
          WORK2_BEGIN,
          WORK2_END,
          WORK3_BEGIN,
          WORK3_END,
          WORK4_BEGIN,
          WORK4_END
        FROM V_SLANE_WORKING_TIME
        ) b,
        (SELECT DISTINCT(MODEL),
          snp,
          DAISHA_TYPE,
          DAISHA_GROUP
        FROM T_SLANE_DAISHA_MASTER
        ) c
      WHERE a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date(b.work1_begin,'HH24:MI'),'HH24:MI:SS') AND TO_CHAR(to_date(b.WORK1_END,'HH24:MI'),'HH24:MI:SS')
      AND a.MODEL        = b.MODEL
      AND a.SHIFT        = b.SHIFT
      AND a.PLAN_DATE    = a.PLAN_DATE
      AND a.MODEL        = c.MODEL
      AND a.DAISHA_TYPE  = c.DAISHA_TYPE
      AND a.DAISHA_GROUP = c.DAISHA_GROUP
      GROUP BY a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        c.snp
      )B
    ON a.FACTORY_CD    = b.FACTORY_CD
    AND a.MODEL        = b.MODEL
    AND a.PLAN_DATE    = b.PLAN_DATE
    AND a.SHIFT        = b.SHIFT
    AND a.LINE_CD      = b.LINE_CD
    AND a.DAISHA_TYPE  = b.DAISHA_TYPE
    AND a.DAISHA_GROUP = b.DAISHA_GROUP
    LEFT JOIN
      (SELECT a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        (COUNT(*)*c.snp)AS Q2
      FROM T_SLANE_DAISHA_PROGRESSIVE a,
        (SELECT DISTINCT(MODEL),
          SHIFT,
          WORK1_BEGIN,
          WORK1_END,
          WORK2_BEGIN,
          WORK2_END,
          WORK3_BEGIN,
          WORK3_END,
          WORK4_BEGIN,
          WORK4_END
        FROM V_SLANE_WORKING_TIME
        ) b,
        (SELECT DISTINCT(MODEL),
          snp,
          DAISHA_TYPE,
          DAISHA_GROUP
        FROM T_SLANE_DAISHA_MASTER
        ) c
      WHERE a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date(b.WORK1_END,'HH24:MI'),'HH24:MI:SS') AND TO_CHAR(to_date(b.WORK2_END,'HH24:MI'),'HH24:MI:SS')
      AND a.MODEL        = b.MODEL
      AND a.SHIFT        = b.SHIFT
      AND a.PLAN_DATE    = a.PLAN_DATE
      AND a.MODEL        = c.MODEL
      AND a.DAISHA_TYPE  = c.DAISHA_TYPE
      AND a.DAISHA_GROUP = c.DAISHA_GROUP
      GROUP BY a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        c.snp
      )C
    ON a.FACTORY_CD    = C.FACTORY_CD
    AND a.MODEL        = C.MODEL
    AND a.PLAN_DATE    = C.PLAN_DATE
    AND a.SHIFT        = C.SHIFT
    AND a.LINE_CD      = C.LINE_CD
    AND a.DAISHA_TYPE  = C.DAISHA_TYPE
    AND a.DAISHA_GROUP = C.DAISHA_GROUP
    LEFT JOIN
      (SELECT a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        (COUNT(*)*c.snp)AS Q3
      FROM T_SLANE_DAISHA_PROGRESSIVE a,
        (SELECT DISTINCT(MODEL),
          SHIFT,
          WORK1_BEGIN,
          WORK1_END,
          WORK2_BEGIN,
          WORK2_END,
          WORK3_BEGIN,
          WORK3_END,
          WORK4_BEGIN,
          WORK4_END
        FROM V_SLANE_WORKING_TIME
        ) b,
        (SELECT DISTINCT(MODEL),
          snp,
          DAISHA_TYPE,
          DAISHA_GROUP
        FROM T_SLANE_DAISHA_MASTER
        ) c
      WHERE a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date(b.work3_begin,'HH24:MI'),'HH24:MI:SS') AND TO_CHAR(to_date(b.WORK3_END,'HH24:MI'),'HH24:MI:SS')
      AND a.MODEL        = b.MODEL
      AND a.SHIFT        = b.SHIFT
      AND a.PLAN_DATE    = a.PLAN_DATE
      AND a.MODEL        = c.MODEL
      AND a.DAISHA_TYPE  = c.DAISHA_TYPE
      AND a.DAISHA_GROUP = c.DAISHA_GROUP
      GROUP BY a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        c.snp
      )D
    ON a.FACTORY_CD    = D.FACTORY_CD
    AND a.MODEL        = D.MODEL
    AND a.PLAN_DATE    = D.PLAN_DATE
    AND a.SHIFT        = D.SHIFT
    AND a.LINE_CD      = D.LINE_CD
    AND a.DAISHA_TYPE  = D.DAISHA_TYPE
    AND a.DAISHA_GROUP = D.DAISHA_GROUP
    LEFT JOIN
      (SELECT a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        (COUNT(*)*c.snp)AS Q4
      FROM T_SLANE_DAISHA_PROGRESSIVE a,
        (SELECT DISTINCT(MODEL),
          SHIFT,
          WORK1_BEGIN,
          WORK1_END,
          WORK2_BEGIN,
          WORK2_END,
          WORK3_BEGIN,
          WORK3_END,
          WORK4_BEGIN,
          WORK4_END
        FROM V_SLANE_WORKING_TIME
        ) b,
        (SELECT DISTINCT(MODEL),
          snp,
          DAISHA_TYPE,
          DAISHA_GROUP
        FROM T_SLANE_DAISHA_MASTER
        ) c
      WHERE a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date(b.WORK3_END,'HH24:MI'),'HH24:MI:SS') AND TO_CHAR(to_date(b.WORK4_END,'HH24:MI'),'HH24:MI:SS')
      AND a.MODEL        = b.MODEL
      AND a.SHIFT        = b.SHIFT
      AND a.PLAN_DATE    = a.PLAN_DATE
      AND a.MODEL        = c.MODEL
      AND a.DAISHA_TYPE  = c.DAISHA_TYPE
      AND a.DAISHA_GROUP = c.DAISHA_GROUP
      AND a.ORDER_NO <> '0'
      GROUP BY a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        c.snp
      )E
    ON a.FACTORY_CD    = E.FACTORY_CD
    AND a.MODEL        = E.MODEL
    AND a.PLAN_DATE    = E.PLAN_DATE
    AND a.SHIFT        = E.SHIFT
    AND a.LINE_CD      = E.LINE_CD
    AND a.DAISHA_TYPE  = E.DAISHA_TYPE
    AND a.DAISHA_GROUP = E.DAISHA_GROUP
    LEFT JOIN
      (SELECT a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        case when a.SHIFT = 'D' then (COUNT(*)*c.snp) else (COUNT(*)*c.snp) end AS Q5
      FROM T_SLANE_DAISHA_PROGRESSIVE a,
        (SELECT DISTINCT(MODEL),
          SHIFT,
          WORK1_BEGIN,
          WORK1_END,
          WORK2_BEGIN,
          WORK2_END,
          WORK3_BEGIN,
          WORK3_END,
          WORK4_BEGIN,
          WORK4_END ,
          OVERTIME_BEGIN,
          OVERTIME_END
        FROM V_SLANE_WORKING_TIME
        ) b,
        (SELECT DISTINCT(MODEL),
          snp,
          DAISHA_TYPE,
          DAISHA_GROUP
        FROM T_SLANE_DAISHA_MASTER
        ) c
      WHERE (a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date('17:20','HH24:MI'),'HH24:MI:SS') 
      AND TO_CHAR(to_date('20:00','HH24:MI'),'HH24:MI:SS') OR a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date('05:20','HH24:MI'),'HH24:MI:SS') 
      AND TO_CHAR(to_date('08:00','HH24:MI'),'HH24:MI:SS'))
      AND a.MODEL        = b.MODEL
      AND a.SHIFT        = b.SHIFT
      AND a.PLAN_DATE    = a.PLAN_DATE
      AND a.MODEL        = c.MODEL
      AND a.DAISHA_TYPE  = c.DAISHA_TYPE
      AND a.DAISHA_GROUP = c.DAISHA_GROUP
      AND a.ORDER_NO <> '0'
      GROUP BY a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        c.snp)F
    ON a.FACTORY_CD    = F.FACTORY_CD
    AND a.MODEL        = F.MODEL
    AND a.PLAN_DATE    = F.PLAN_DATE
    AND a.SHIFT        = F.SHIFT
    AND a.LINE_CD      = F.LINE_CD
    AND a.DAISHA_TYPE  = F.DAISHA_TYPE
    AND a.DAISHA_GROUP = F.DAISHA_GROUP
    )A
  LEFT JOIN T_SLANE_DAISHA_TYPE B
  ON A.DAISHA_TYPE = B.DAISHA_TYPE
  LEFT JOIN T_SLANE_DAISHA_GROUP D
  ON A.DAISHA_GROUP = D.DAISHA_GROUP;
--------------------------------------------------------
--  DDL for View V_SLANE_WORKING_TIME
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_WORKING_TIME" ("MODEL", "PLAN_DATE", "LINE_CD", "SHIFT", "PLAN_QTY", "WORKSHIFT_CD_DAY", "OVERTIME_CD_DAY", "CYCLE_TIME", "WORK1_BEGIN", "WORK1_END", "WORK2_BEGIN", "WORK2_END", "WORK3_BEGIN", "WORK3_END", "WORK4_BEGIN", "WORK4_END", "OVERTIME_BEGIN", "OVERTIME_END", "WORKINGTIME_MIN", "OVERTIME_MIN") AS 
  SELECT a.model,
    a.plan_date,
    a.line_cd,
    a.shift,
    SUM(A.PLAN_QTY) PLAN_QTY,
    b.workshift_cd_day,
    b.overtime_cd_day,
    b.cycle_time,
    c.work1_begin,
    c.work1_end,
    c.work2_begin,
    c.work2_end,
    c.work3_begin,
    c.work3_end,
    c.work4_begin,
    c.work4_end,
    d.overtime_begin,
    d.overtime_end,
    NVL(c.workingtime_min,0) AS workingtime_min ,
    NVL(d.workingtime_min,0) AS overtime_min
  FROM t_slane_production_plan a,
    t_slane_dnm_workshift_n_cap b,
    t_slane_dnm_workshift_cd c ,
    t_slane_dnm_overtime_cd d
  WHERE a.plan_date      between to_char(sysdate-1 ,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD')
  AND a.shift            = 'D'
  AND a.plan_date        = b.plan_date(+)
  AND a.line_cd          = SUBSTR(b.line_cd(+),1,2)
  AND b.workshift_cd_day = c.workshift_cd
  AND b.overtime_cd_day  = d.overtime_cd (+)
  GROUP BY a.model,
    a.plan_date,
    a.line_cd,
    a.shift,
    b.workshift_cd_day,
    b.overtime_cd_day,
    b.cycle_time,
    c.work1_begin,
    c.work1_end,
    c.work2_begin,
    c.work2_end,
    c.work3_begin,
    c.work3_end,
    c.work4_begin,
    c.work4_end,
    d.overtime_begin,
    d.overtime_end,
    NVL(c.workingtime_min,0),
    NVL(d.workingtime_min,0)
  UNION
  SELECT a.model,
    a.plan_date,
    a.line_cd,
    a.shift,
    SUM(A.PLAN_QTY) PLAN_QTY,
    b.workshift_cd_night,
    b.overtime_cd_night,
    b.cycle_time,
    c.work1_begin,
    c.work1_end,
    c.work2_begin,
    c.work2_end,
    c.work3_begin,
    c.work3_end,
    c.work4_begin,
    c.work4_end,
    d.overtime_begin,
    d.overtime_end,
    NVL(c.workingtime_min,0) AS workingtime_min ,
    NVL(d.workingtime_min,0) AS overtime_min
  FROM t_slane_production_plan a,
    t_slane_dnm_workshift_n_cap b,
    t_slane_dnm_workshift_cd c ,
    t_slane_dnm_overtime_cd d
   WHERE a.plan_date      between to_char(sysdate-1 ,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD')
  AND a.shift              = 'N'
  AND a.plan_date          = b.plan_date(+)
  AND a.line_cd            = SUBSTR(b.line_cd(+),1,2)
  AND b.workshift_cd_night = c.workshift_cd
  AND b.overtime_cd_night  = d.overtime_cd (+)
  GROUP BY a.model,
    a.plan_date,
    a.line_cd,
    a.shift,
    b.workshift_cd_night,
    b.overtime_cd_night,
    b.cycle_time,
    c.work1_begin,
    c.work1_end,
    c.work2_begin,
    c.work2_end,
    c.work3_begin,
    c.work3_end,
    c.work4_begin,
    c.work4_end,
    d.overtime_begin,
    d.overtime_end,
    NVL(c.workingtime_min,0),
    NVL(d.workingtime_min,0);
--------------------------------------------------------
--  DDL for View V_SLANE_WORKING_TIME_BREAK
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_WORKING_TIME_BREAK" ("MODEL", "PLAN_DATE", "LINE_CD", "SHIFT", "PLAN_QTY", "WORKSHIFT_CD_DAY", "OVERTIME_CD_DAY", "CYCLE_TIME", "WORK1_BEGIN", "WORK1_END", "BREAK1_BEGIN", "BREAK1_END", "WORK2_BEGIN", "WORK2_END", "BREAK2_BEGIN", "BREAK2_END", "WORK3_BEGIN", "WORK3_END", "BREAK3_BEGIN", "BREAK3_END", "WORK4_BEGIN", "WORK4_END", "OVERTIME_BEGIN", "OVERTIME_END", "WORKINGTIME_MIN", "OVERTIME_MIN") AS 
  SELECT a.model,
    a.plan_date,
    a.line_cd,
    a.shift,
    SUM(A.PLAN_QTY) PLAN_QTY,
    b.workshift_cd_day,
    b.overtime_cd_day,
    b.cycle_time,
    c.work1_begin,
    c.work1_end,
    c.break1_begin,
    c.break1_end,
    c.work2_begin,
    c.work2_end,
    c.break2_begin,
    c.break2_end,
    c.work3_begin,
    c.work3_end,
    c.break3_begin,
    c.break3_end,
    c.work4_begin,
    c.work4_end,
    d.overtime_begin,
    d.overtime_end,
    NVL(c.workingtime_min,0) AS workingtime_min ,
    NVL(d.workingtime_min,0) AS overtime_min
  FROM t_slane_production_plan a,
    t_slane_dnm_workshift_n_cap b,
    t_slane_dnm_workshift_cd c ,
    t_slane_dnm_overtime_cd d
  WHERE a.plan_date BETWEEN TO_CHAR(sysdate-7 ,'YYYYMMDD') AND TO_CHAR(sysdate,'YYYYMMDD')
  AND a.shift            = 'D'
  AND a.plan_date        = b.plan_date(+)
  AND a.line_cd          = SUBSTR(b.line_cd(+),1,2)
  AND b.workshift_cd_day = c.workshift_cd
  AND b.overtime_cd_day  = d.overtime_cd (+)
  GROUP BY a.model,
    a.plan_date,
    a.line_cd,
    a.shift,
    b.workshift_cd_day,
    b.overtime_cd_day,
    b.cycle_time,
    c.work1_begin,
    c.work1_end,
    c.break1_begin,
    c.break1_end,
    c.work2_begin,
    c.work2_end,
    c.break2_begin,
    c.break2_end,
    c.work3_begin,
    c.work3_end,
    c.break3_begin,
    c.break3_end,
    c.work4_begin,
    c.work4_end,
    d.overtime_begin,
    d.overtime_end,
    NVL(c.workingtime_min,0),
    NVL(d.workingtime_min,0)
  UNION
  SELECT a.model,
    a.plan_date,
    a.line_cd,
    a.shift,
    SUM(A.PLAN_QTY) PLAN_QTY,
    b.workshift_cd_night,
    b.overtime_cd_night,
    b.cycle_time,
    c.work1_begin,
    c.work1_end,
    c.break1_begin,
    c.break1_end,
    c.work2_begin,
    c.work2_end,
    c.break2_begin,
    c.break2_end,
    c.work3_begin,
    c.work3_end,
    c.break3_begin,
    c.break3_end,
    c.work4_begin,
    c.work4_end,
    d.overtime_begin,
    d.overtime_end,
    NVL(c.workingtime_min,0) AS workingtime_min ,
    NVL(d.workingtime_min,0) AS overtime_min
  FROM t_slane_production_plan a,
    t_slane_dnm_workshift_n_cap b,
    t_slane_dnm_workshift_cd c ,
    t_slane_dnm_overtime_cd d
  WHERE a.plan_date BETWEEN TO_CHAR(sysdate-7 ,'YYYYMMDD') AND TO_CHAR(sysdate,'YYYYMMDD')
  AND a.shift              = 'N'
  AND a.plan_date          = b.plan_date(+)
  AND a.line_cd            = SUBSTR(b.line_cd(+),1,2)
  AND b.workshift_cd_night = c.workshift_cd
  AND b.overtime_cd_night  = d.overtime_cd (+)
  GROUP BY a.model,
    a.plan_date,
    a.line_cd,
    a.shift,
    b.workshift_cd_night,
    b.overtime_cd_night,
    b.cycle_time,
    c.work1_begin,
    c.work1_end,
    c.break1_begin,
    c.break1_end,
    c.work2_begin,
    c.work2_end,
    c.break2_begin,
    c.break2_end,
    c.work3_begin,
    c.work3_end,
    c.break3_begin,
    c.break3_end,
    c.work4_begin,
    c.work4_end,
    d.overtime_begin,
    d.overtime_end,
    NVL(c.workingtime_min,0),
    NVL(d.workingtime_min,0);
--------------------------------------------------------
--  DDL for Index T_SLANE_DAISHA_MASTER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_DAISHA_MASTER_PK" ON "LCDRA"."T_SLANE_DAISHA_MASTER" ("FACTORY_CD", "MODEL_SEQ", "MODEL", "LINE_CD", "DAISHA_TYPE", "DAISHA_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_DNM_OVERTIME_CD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_DNM_OVERTIME_CD_PK" ON "LCDRA"."T_SLANE_DNM_OVERTIME_CD" ("FACTORY_CD", "OVERTIME_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_DNM_WORKSHIFT_N_CAP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_DNM_WORKSHIFT_N_CAP_PK" ON "LCDRA"."T_SLANE_DNM_WORKSHIFT_N_CAP" ("FACTORY_CD", "PLAN_DATE", "LINE_CD", "SHIFT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index t_slane_calculate_actual_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."t_slane_calculate_actual_PK" ON "LCDRA"."T_SLANE_CALCULATE_ACTUAL" ("FACTORY_CD", "PLAN_DATE", "MODEL", "SHIFT", "LINE_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_METRIX_PART_MASTER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_METRIX_PART_MASTER_PK" ON "LCDRA"."T_SLANE_METRIX_PART_MASTER" ("FACTORY_CD", "MODEL", "DAISHA_TYPE", "DAISHA_GROUP", "PART_NO", "DIM_NO", "SUPP_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_PRODUCTION_PLAN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_PRODUCTION_PLAN_PK" ON "LCDRA"."T_SLANE_PRODUCTION_PLAN" ("FACTORY_CD", "MODEL_SEQ", "MODEL", "PLAN_DATE", "SHIFT", "LINE_CD", "PRIORITY", "MERCHANDISE_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_DAISHA_PROGRESSIVE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE_PK" ON "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" ("FACTORY_CD", "MODEL", "PLAN_DATE", "SHIFT", "LINE_CD", "CELL_NAME", "DAISHA_TYPE", "DAISHA_GROUP", "SEQ") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_REC_EMPTY_DAISHA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_REC_EMPTY_DAISHA_PK" ON "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" ("FACTORY_CD", "MODEL", "CAL_DATE", "SHIFT", "LINE_CD", "DAISHA_TYPE", "DAISHA_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_DELIVERY_CYCLE_MAS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_DELIVERY_CYCLE_MAS_PK" ON "LCDRA"."T_SLANE_DELIVERY_CYCLE_MASTER" ("FACTORY_CD", "MODEL", "TYPE", "ZONE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_DNM_WORKSHIFT_CD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD_PK" ON "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" ("FACTORY_CD", "WORKSHIFT_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_PROGRESS_KT_DAISHA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_PROGRESS_KT_DAISHA_PK" ON "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" ("FACTORY_CD", "PLAN_DATE", "MODEL", "SHIFT", "LINE_CD", "DAISHA_TYPE", "DAISHA_GROUP", "ROUND", "ORDER_NO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  Constraints for Table T_SLANE_PRODUCTION_PLAN
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" ADD CONSTRAINT "T_SLANE_PRODUCTION_PLAN_PK" PRIMARY KEY ("FACTORY_CD", "MODEL_SEQ", "MODEL", "PLAN_DATE", "SHIFT", "LINE_CD", "PRIORITY", "MERCHANDISE_CD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("PLAN_QTY" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("MERCHANDISE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("PRIORITY" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("CELL_NAME" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("PLAN_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("MODEL_SEQ" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_METRIX_PART_MASTER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" ADD CONSTRAINT "T_SLANE_METRIX_PART_MASTER_PK" PRIMARY KEY ("FACTORY_CD", "MODEL", "DAISHA_TYPE", "DAISHA_GROUP", "PART_NO", "DIM_NO", "SUPP_CD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" MODIFY ("SUPP_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" MODIFY ("DIM_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" MODIFY ("PART_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" MODIFY ("DAISHA_GROUP" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" MODIFY ("DAISHA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_REC_EMPTY_DAISHA
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" ADD CONSTRAINT "T_SLANE_REC_EMPTY_DAISHA_PK" PRIMARY KEY ("FACTORY_CD", "MODEL", "CAL_DATE", "SHIFT", "LINE_CD", "DAISHA_TYPE", "DAISHA_GROUP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" MODIFY ("TOTAL_EMPTY" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" MODIFY ("DAISHA_GROUP" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" MODIFY ("DAISHA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" MODIFY ("CAL_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_DNM_WORKSHIFT_CD
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" ADD CONSTRAINT "T_SLANE_DNM_WORKSHIFT_CD_PK" PRIMARY KEY ("FACTORY_CD", "WORKSHIFT_CD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORK4_END" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORK4_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("BREAK3_END" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("BREAK3_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORK3_END" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORK3_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("BREAK2_END" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("BREAK2_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORK2_END" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORK2_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("BREAK1_END" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("BREAK1_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORK1_END" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORK1_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORKSHIFT_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_CALCULATE_ACTUAL
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_CALCULATE_ACTUAL" ADD CONSTRAINT "t_slane_calculate_actual_PK" PRIMARY KEY ("FACTORY_CD", "PLAN_DATE", "MODEL", "SHIFT", "LINE_CD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_CALCULATE_ACTUAL" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_CALCULATE_ACTUAL" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_CALCULATE_ACTUAL" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_CALCULATE_ACTUAL" MODIFY ("PLAN_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_CALCULATE_ACTUAL" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_USER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_USER" MODIFY ("EMP_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_USER" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_DAISHA_MASTER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" ADD CONSTRAINT "T_SLANE_DAISHA_MASTER_PK" PRIMARY KEY ("FACTORY_CD", "MODEL_SEQ", "MODEL", "LINE_CD", "DAISHA_TYPE", "DAISHA_GROUP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" MODIFY ("MAX" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" MODIFY ("MIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" MODIFY ("DAISHA_GROUP" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" MODIFY ("DAISHA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" MODIFY ("MODEL_SEQ" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_DAISHA_PROGRESSIVE
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" ADD CONSTRAINT "T_SLANE_DAISHA_PROGRESSIVE_PK" PRIMARY KEY ("FACTORY_CD", "MODEL", "PLAN_DATE", "SHIFT", "LINE_CD", "CELL_NAME", "DAISHA_TYPE", "DAISHA_GROUP", "SEQ")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("DESTINATION" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("MERCHANDISE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("ROUND" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("SEQ" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("DAISHA_GROUP" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("DAISHA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("CELL_NAME" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("PLAN_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_PROGRESS_ORDER_DAISHA
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" ADD CONSTRAINT "T_SLANE_PROGRESS_KT_DAISHA_PK" PRIMARY KEY ("FACTORY_CD", "PLAN_DATE", "MODEL", "SHIFT", "LINE_CD", "DAISHA_TYPE", "DAISHA_GROUP", "ROUND", "ORDER_NO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("ORDER_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("ROUND" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("DAISHA_GROUP" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("DAISHA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("PLAN_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_DNM_OVERTIME_CD
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_DNM_OVERTIME_CD" ADD CONSTRAINT "T_SLANE_DNM_OVERTIME_CD_PK" PRIMARY KEY ("FACTORY_CD", "OVERTIME_CD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_DNM_OVERTIME_CD" MODIFY ("OVERTIME_END" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_OVERTIME_CD" MODIFY ("OVERTIME_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_OVERTIME_CD" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_OVERTIME_CD" MODIFY ("OVERTIME_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_OVERTIME_CD" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_DELIVERY_CYCLE_MASTER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_DELIVERY_CYCLE_MASTER" ADD CONSTRAINT "T_SLANE_DELIVERY_CYCLE_MAS_PK" PRIMARY KEY ("FACTORY_CD", "MODEL", "TYPE", "ZONE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_DELIVERY_CYCLE_MASTER" MODIFY ("CYCLE_TIME" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DELIVERY_CYCLE_MASTER" MODIFY ("ZONE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DELIVERY_CYCLE_MASTER" MODIFY ("TYPE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DELIVERY_CYCLE_MASTER" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DELIVERY_CYCLE_MASTER" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_DNM_WORKSHIFT_N_CAP
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_N_CAP" ADD CONSTRAINT "T_SLANE_DNM_WORKSHIFT_N_CAP_PK" PRIMARY KEY ("FACTORY_CD", "PLAN_DATE", "LINE_CD", "SHIFT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_N_CAP" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_N_CAP" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_N_CAP" MODIFY ("PLAN_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_N_CAP" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_TEMP_PROCESS
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("PROCESS_ID" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("LOCATION" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("DESTINATION" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("ROUND" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("SEQ" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("DAISHA_GROUP" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("DAISHA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("PLAN_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("MODEL" NOT NULL ENABLE);
--------------------------------------------------------
--  DDL for Function GET_TIME_PICKING
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "LCDRA"."GET_TIME_PICKING" (pMODEL VARCHAR2,
                           pTYPE VARCHAR2,
                           pPLAN_DATE VARCHAR2,
                           pSHIFT VARCHAR2,
                           pCAL_TIME VARCHAR2,
                           pLINE VARCHAR2,
                           pZONE VARCHAR2)
                           RETURN VARCHAR2 AS 
                   
  REC_TIME32    V_SLANE_WORKING_TIME_BREAK%ROWTYPE;
  REC_TIME24    V_SLANE_WORKING_TIME_BREAK%ROWTYPE;
  vDATE         VARCHAR(8);
  vTIME         VARCHAR(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
  --vCHECK        NUMBER;
  vCYCLE_P      NUMBER;
  vTIME_PICK    VARCHAR(16);
  vBREAK        VARCHAR(10);
  vCAL_TIME32   VARCHAR(8);
  vBREAK2_BEGIN VARCHAR(5);
  vBREAK2_END   VARCHAR(5);
  vBREAK3_BEGIN VARCHAR(5);
  vBREAK4_BEGIN VARCHAR(5);
  vBREAK4_END   VARCHAR(5);
  vOVER_TIME    VARCHAR(5);
  
  CURSOR C1 IS SELECT DISTINCT MODEL, SHIFT,
               CASE WHEN SUBSTR(BREAK1_BEGIN,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK1_BEGIN,0,2)+24||SUBSTR(BREAK1_BEGIN,3,3)
                ELSE BREAK1_BEGIN END AS BREAK1_BEGIN,
                
               CASE WHEN SUBSTR(BREAK1_END,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK1_END,0,2)+24||SUBSTR(BREAK1_END,3,3)
                ELSE BREAK1_END END AS BREAK1_END,
                
               CASE WHEN SUBSTR(BREAK2_BEGIN,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK2_BEGIN,0,2)+24||SUBSTR(BREAK2_BEGIN,3,3)
                ELSE BREAK2_BEGIN END AS BREAK2_BEGIN,
                
               CASE WHEN SUBSTR(BREAK2_END,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK2_END,0,2)+24||SUBSTR(BREAK2_END,3,3)
                ELSE BREAK2_END END AS BREAK2_END,
                
               CASE WHEN SUBSTR(BREAK3_BEGIN,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK3_BEGIN,0,2)+24||SUBSTR(BREAK3_BEGIN,3,3)
                ELSE BREAK3_BEGIN END AS BREAK3_BEGIN,
                
               CASE WHEN SUBSTR(BREAK3_END,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK3_END,0,2)+24||SUBSTR(BREAK3_END,3,3)
                ELSE BREAK3_END END AS BREAK3_END
               FROM V_SLANE_WORKING_TIME_BREAK
               WHERE MODEL = pMODEL
               AND SHIFT = pSHIFT;
               
 CURSOR C2 IS SELECT DISTINCT MODEL, SHIFT,BREAK1_BEGIN,BREAK1_END,BREAK2_BEGIN,BREAK2_END,BREAK3_BEGIN,BREAK3_END
               FROM V_SLANE_WORKING_TIME_BREAK
               WHERE MODEL = pMODEL
               AND SHIFT = pSHIFT;
BEGIN
  -- Set vDATE
  IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
     vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
  ELSE
     vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
  END IF;
  
  IF pTYPE = 'KT' THEN
      SELECT CYCLE_TIME INTO vCYCLE_P
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'KITTING'
      AND ZONE = pZONE;
  ELSE
      SELECT CYCLE_TIME INTO vCYCLE_P
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'BLANE'
      AND ZONE = pZONE;
  END IF;

  /*IF pLINE IS NULL THEN
    SELECT COUNT(*) INTO vOVER_TIME
    FROM V_SLANE_WORKING_TIME_TEST
    WHERE MODEL = pMODEL
    AND PLAN_DATE = '20180716'
    AND SHIFT = pSHIFT
    AND OVERTIME_CD_DAY IS NOT NULL
    --AND LINE_CD = pLINE
    GROUP BY MODEL, OVERTIME_MIN; 
  ELSE 
    SELECT COUNT(*) INTO vOVER_TIME
    FROM V_SLANE_WORKING_TIME_TEST
    WHERE MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND SHIFT = pSHIFT
    AND OVERTIME_CD_DAY IS NOT NULL
    AND LINE_CD = pLINE
    GROUP BY OVERTIME_MIN;
  END IF;*/
  
    BEGIN
      FOR REC_TIME32 IN C1 LOOP
        
        FOR REC_TIME24 IN C2 LOOP
        
           IF SUBSTR(pCAL_TIME,0,2) BETWEEN '00' AND '07' THEN
              vCAL_TIME32 := SUBSTR(pCAL_TIME,0,2)+24||SUBSTR(pCAL_TIME,3,3);
              vBREAK3_BEGIN := TO_CHAR(TO_DATE(REC_TIME24.BREAK3_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
              
              IF REC_TIME32.BREAK2_BEGIN > '24:00' THEN
                vBREAK2_BEGIN := TO_CHAR(TO_DATE(SUBSTR(REC_TIME32.BREAK2_BEGIN,0,2)-24||SUBSTR(REC_TIME32.BREAK2_BEGIN,3,3),'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI'); 
              ELSE
                vBREAK2_BEGIN := TO_CHAR(TO_DATE(REC_TIME32.BREAK2_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
              END IF;
              
              vBREAK2_END   := REC_TIME32.BREAK2_END;
              
              vBREAK4_BEGIN := TO_CHAR(TO_DATE('05:00','HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
              vBREAK4_BEGIN := SUBSTR(vBREAK4_BEGIN,0,2)+24||SUBSTR(vBREAK4_BEGIN,3,3);
              vBREAK4_END := TO_CHAR(TO_DATE('05:20','HH24:MI'),'HH24:MI');
              vBREAK4_END := SUBSTR(vBREAK4_END,0,2)+24||SUBSTR(vBREAK4_END,3,3);
              
              IF pSHIFT = 'N' THEN
                IF SUBSTR(vBREAK3_BEGIN,0,2) BETWEEN '00' AND '07' THEN
                  vBREAK3_BEGIN := SUBSTR(vBREAK3_BEGIN,0,2)+24||SUBSTR(vBREAK3_BEGIN,3,3);
                END IF;
              END IF;
              
            ELSE
              IF pSHIFT = 'D' THEN
                vCAL_TIME32 := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS'),'HH24:MI');
                vBREAK2_BEGIN := TO_CHAR(TO_DATE(REC_TIME24.BREAK2_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
                vBREAK2_END   := TO_CHAR(TO_DATE(REC_TIME24.BREAK2_END,'HH24:MI'),'HH24:MI');
                
                vBREAK3_BEGIN := TO_CHAR(TO_DATE(REC_TIME24.BREAK3_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
                
                vBREAK4_BEGIN := TO_CHAR(TO_DATE('17:00','HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
                vBREAK4_END := TO_CHAR(TO_DATE('17:20','HH24:MI'),'HH24:MI');
              ELSE 
                vCAL_TIME32 := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS'),'HH24:MI');
                --vCAL_TIME32 := SUBSTR(pCAL_TIME,0,2)+24||SUBSTR(pCAL_TIME,3,3);
                vBREAK2_BEGIN := TO_CHAR(TO_DATE(REC_TIME24.BREAK2_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
                
                IF vBREAK2_BEGIN >= '00:00' THEN
                vBREAK2_BEGIN := SUBSTR(vBREAK2_BEGIN,0,2)+24||SUBSTR(vBREAK2_BEGIN,3,3);
                END IF;
                
                vBREAK2_END   := REC_TIME32.BREAK2_END;
                
                /*vBREAK2_BEGIN := TO_CHAR(TO_DATE(REC_TIME24.BREAK1_END,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
                vBREAK2_END   := REC_TIME32.BREAK2_BEGIN;*/
              END IF;
              
           END IF;
      
          IF TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS'),'HH24:MI') >= TO_CHAR(TO_DATE(REC_TIME32.BREAK1_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI') AND TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS'),'HH24:MI') < REC_TIME32.BREAK1_END THEN
            vBREAK := (TO_DATE(REC_TIME24.BREAK1_END,'HH24:MI')-TO_DATE(REC_TIME24.BREAK1_BEGIN,'HH24:MI'))*1440;
            vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS') ; 
        
          ELSIF vCAL_TIME32 >= vBREAK2_BEGIN AND vCAL_TIME32 < vBREAK2_END THEN
            IF pSHIFT = 'D' THEN
              vBREAK := (TO_DATE(REC_TIME24.BREAK2_END,'HH24:MI')-TO_DATE(REC_TIME24.BREAK2_BEGIN,'HH24:MI'))*1440;
              vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS') ; 
            ELSE
              vBREAK := (TO_DATE(TO_CHAR(sysdate+1,'YYYYMMDD')||REC_TIME24.BREAK2_END,'YYYYMMDDHH24:MI')-TO_DATE(TO_CHAR(sysdate,'YYYYMMDD')||REC_TIME24.BREAK2_BEGIN,'YYYYMMDDHH24:MI'))*1440;
              vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS') ;
            END IF;
            
          ELSIF vCAL_TIME32 >= vBREAK3_BEGIN AND vCAL_TIME32 < REC_TIME32.BREAK3_END THEN
            vBREAK := (TO_DATE(REC_TIME24.BREAK3_END,'HH24:MI')-TO_DATE(REC_TIME24.BREAK3_BEGIN,'HH24:MI'))*1440;
            vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS') ; 
          
          ELSIF vCAL_TIME32 >= vBREAK4_BEGIN AND vCAL_TIME32 < vBREAK4_END THEN
            /*IF vOVER_TIME < 0 THEN
              vBREAK := '180';
              vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS'); 
            ELSE*/
              vBREAK := '20';
              vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS'); 
           -- END IF;
          ELSE
            vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P)),'HH24:MI:SS'); 
            
          END IF;
          
           IF vTIME_PICK >= '08:00:00' and vTIME_PICK < '23:59:59' THEN
               vTIME_PICK := TO_CHAR(TO_DATE(pPLAN_DATE,'YYYYMMDD'),'YYYYMMDD')||vTIME_PICK;
                            
           ELSE
               vTIME_PICK := TO_CHAR(TO_DATE(pPLAN_DATE,'YYYYMMDD')+1,'YYYYMMDD')||vTIME_PICK;
           END IF;
           
        END LOOP;
      END LOOP;
    END;
  RETURN vTIME_PICK;
  
  /*EXCEPTION
    WHEN NO_DATA_FOUND THEN
      vOVER_TIME := 0;*/
      
END GET_TIME_PICKING;

/
--------------------------------------------------------
--  DDL for Function OSCOMMAND_RUN
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "LCDRA"."OSCOMMAND_RUN" (Command IN STRING)
RETURN VARCHAR2 IS
LANGUAGE JAVA
NAME 'OSCommand.Run(java.lang.String) return int';

/
--------------------------------------------------------
--  DDL for Package PG_DISTINCT_SELECT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_DISTINCT_SELECT" AS 

TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE P_PRD_PLAN_MODEL_MS(
                                   pFACTORY_CD VARCHAR2,
                                    pFUNC VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pMODEL VARCHAR2,
                                   pMODEL_ALL VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pCUERSOR OUT T_CURSOR
                                  );

END PG_DISTINCT_SELECT;

/
--------------------------------------------------------
--  DDL for Package PG_PRD_PLAN_A3_ASSY_PLAN
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_PRD_PLAN_A3_ASSY_PLAN" AS 

 TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE P_PRD_PLAN_A3_ASSY_PLAN_SEL(
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pPLAN_DATE VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pCUERSOR OUT T_CURSOR
                                  );
                                  
PROCEDURE P_PRD_PLAN_A3_ASSY_PLAN_UP(
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pPLAN_DATE VARCHAR2,
                                   pSHIFT VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pPRIORITY VARCHAR2,
                                   pMERCHANDISE_CD VARCHAR2,
                                   pPLAN_QTY NUMBER,
                                   pSLANE OUT NUMBER
                                  );                 

END PG_PRD_PLAN_A3_ASSY_PLAN;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_CYCLE_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_CYCLE_MASTER" AS 

 TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE P_SLANE_CYCLE_MASTER_INS_UPD ( 
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pTYPE VARCHAR2,
                                        pZONE VARCHAR2,
                                        pCYCLE_TIME NUMBER,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pSLANE OUT NUMBER);
PROCEDURE P_SLANE_CYCLE_MASTER_DEL (    
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pTYPE VARCHAR2,
                                        pZONE VARCHAR2,
                                        pSLANE OUT NUMBER);
PROCEDURE P_SLANE_CYCLE_MASTER_SEL (  
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pTYPE VARCHAR2,
                                        pZONE VARCHAR2,
                                        pCREATE_DATE VARCHAR2,
                                        pDATE_FROM VARCHAR2,
                                        pDATE_TO VARCHAR2,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pCUERSOR OUT T_CURSOR);

END PG_SLANE_CYCLE_MASTER;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_DAISHA_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_DAISHA_MASTER" AS 

 TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE SLANE_DAISHA_MASTER_INS_UPD ( pFACTORY_CD   VARCHAR2,
                                        pMODEL_SEQ    VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pMODEL_ALL    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pMIN          NUMBER,
                                        pMAX          NUMBER,
                                        pCREATE_BY    VARCHAR2,
                                        pUPDATE_BY    VARCHAR2,
                                        pSNP          NUMBER,
                                        pSLANE  OUT   NUMBER);
                                        
PROCEDURE SLANE_DAISHA_MASTER_DEL (     pFACTORY_CD VARCHAR2,
                                        pMODEL_SEQ VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pLINE_CD VARCHAR2,
                                        pDAISHA_TYPE VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pSLANE OUT NUMBER);
                                        
PROCEDURE SLANE_DAISHA_MASTER_SEL (     pFACTORY_CD   VARCHAR2,
                                        pMODEL_SEQ    VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pMODEL_ALL    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pCREATE_DATE  VARCHAR2,
                                        pDATE_FROM    VARCHAR2,
                                        pDATE_TO      VARCHAR2,
                                        pCREATE_BY    VARCHAR2,
                                        pUPDATE_BY    VARCHAR2,
                                        pSNP          VARCHAR2,
                                        pCUERSOR OUT T_CURSOR);      

END PG_SLANE_DAISHA_MASTER;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_DAISHA_PROGRESSIVE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_DAISHA_PROGRESSIVE" AS 

TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE P_SLANE_DAISHA_PROGRESSIVE_SEL (
                                        pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pCUERSOR      OUT T_CURSOR);
                                        
PROCEDURE P_STORE_OUT_SLANE_INQ (       pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pCURSOR      OUT T_CURSOR);                                        
                                        
PROCEDURE P_STORE_OUT_SLANE_KT (        pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        --pSHIFT        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER); 
                                        
PROCEDURE P_STORE_OUT_SLANE (           pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        --pSHIFT        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER); 
                                        
PROCEDURE P_PICKING_IN (                pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pCUERSOR      OUT T_CURSOR);    
                                        
PROCEDURE P_PICKING_IN_INQ (            pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pCURSOR      OUT T_CURSOR);                                         
                                        
PROCEDURE P_PICKING_IN_UPD (            pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                       -- pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER);   
                                        
PROCEDURE P_STORE_IN (                  pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pCUERSOR      OUT T_CURSOR);   

PROCEDURE P_STORE_IN_INQ (              pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pCURSOR      OUT T_CURSOR);                                         
                                        
PROCEDURE P_STORE_IN_UPD (              pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        --pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER);                                         
 
END PG_SLANE_DAISHA_PROGRESSIVE;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_DNM_RLTMPLANBYSHF_W
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_DNM_RLTMPLANBYSHF_W" AS 

  PROCEDURE MAIN;
 PROCEDURE P_SLANE_DNM_RLTMPLANBYSHF_W ;
 PROCEDURE P_CALCULATE_ACTUAL ;
 PROCEDURE P_GETDATA_FROM_DNM;


END PG_SLANE_DNM_RLTMPLANBYSHF_W;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_INITIAL_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_INITIAL_MASTER" AS 

TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
 PROCEDURE P_INITIAL_DATA_INQ      (pFACTORY_CD     VARCHAR2,
                                    pMODEL          VARCHAR2,
                                    pSHIFT          VARCHAR2,
                                    pLINE_CD        VARCHAR2,
                                    pDAISHA_TYPE    VARCHAR2,
                                    pDAISHA_GROUP   VARCHAR2,
                                    pLOCATION       VARCHAR2,
                                    pROUND          VARCHAR2,
                                    pCURSOR         OUT T_CURSOR); 
                                    
  PROCEDURE P_INITIAL_DATA_UPD     (pFACTORY_CD     VARCHAR2,
                                    pMODEL          VARCHAR2,
                                    pSHIFT          VARCHAR2,
                                    pLINE_CD        VARCHAR2,
                                    pCELL_NAME      VARCHAR2,
                                    pDAISHA_TYPE    VARCHAR2,
                                    pDAISHA_GROUP   VARCHAR2,
                                    pLOCATION       VARCHAR2,
                                    pROUND          VARCHAR2,
                                    pSLANE          OUT NUMBER);
                                    
END PG_SLANE_INITIAL_MASTER;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_ORDER_MATRIX_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_ORDER_MATRIX_MASTER" AS 

TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE SLANE_ORDER_MATRIX_MASTER_IU (
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pDAISHA_TYPE VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pPART_NO VARCHAR2,
                                        pDIM_NO VARCHAR2,
                                        pPART_NAME VARCHAR2,
                                        pSUPP_CD VARCHAR2,
                                        pSUPP_NAME VARCHAR2,
                                        pFLG_DIFF VARCHAR2,
                                        pCOLOR VARCHAR2,
                                        pSNP NUMBER,
                                        pQTY VARCHAR2,
                                        pORDER_01 NUMBER,
                                        pORDER_02 NUMBER,
                                        pORDER_03 NUMBER,
                                        pORDER_04 NUMBER,
                                        pORDER_05 NUMBER,
                                        pORDER_06 NUMBER,
                                        pORDER_07 NUMBER,
                                        pORDER_08 NUMBER,
                                        pORDER_09 NUMBER,
                                        pORDER_10 NUMBER,
                                        pORDER_11 NUMBER,
                                        pORDER_12 NUMBER,
                                        pORDER_13 NUMBER,
                                        pORDER_14 NUMBER,
                                        pORDER_15 NUMBER,
                                        pORDER_16 NUMBER,
                                        pORDER_17 NUMBER,
                                        pORDER_18 NUMBER,
                                        pORDER_19 NUMBER,
                                        pORDER_20 NUMBER,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pSLANE OUT NUMBER);
  
PROCEDURE SLANE_ORDER_MATRIX_MASTER_SEL (
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pDAISHA_TYPE VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pPART_NO VARCHAR2,
                                        pFLG_DIFF VARCHAR2,
                                        pSNP NUMBER,
                                        pSNP_NO VARCHAR2,
                                        pQTY VARCHAR2,
                                        --pQTY_NO VARCHAR2,
                                        pCREATE_DATE VARCHAR2,
                                        pDATE_FROM VARCHAR2,
                                        pDATE_TO VARCHAR2,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pCUERSOR2 OUT T_CURSOR);  

PROCEDURE SLANE_ORDER_MATRIX_MASTER_DEL (     
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pDAISHA_TYPE VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pPART_NO VARCHAR2,
                                        pDIM_NO VARCHAR2,
                                        pSUPP_CD VARCHAR2,
                                        pSLANE OUT NUMBER);

END PG_SLANE_ORDER_MATRIX_MASTER;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_PLAN_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_PLAN_MASTER" AS 

  TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE P_SLANE_PLAN_MASTER_SEL(
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pMODEL VARCHAR2,
                                   
                                   pCUERSOR OUT T_CURSOR
                                  );

END PG_SLANE_PLAN_MASTER;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_PRODUCTION_PLAN
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_PRODUCTION_PLAN" AS 
TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE P_SLANE_PRODUCTION_PLAN_SEL(
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pPLAN_DATE VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pCUERSOR OUT T_CURSOR
                                  );

END PG_SLANE_PRODUCTION_PLAN;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_REC_EMPTY_DAISHA
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_REC_EMPTY_DAISHA" AS 

  TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
 /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE P_SLANE_REC_EMP_DAISHA_INSUP (      pFACTORY_CD     VARCHAR2,
                                              pMODEL          VARCHAR2,
                                              pLINE_CD        VARCHAR2,
                                              pCELL_NAME      VARCHAR2,
                                              pDAISHA_TYPE    VARCHAR2,
                                              pDAISHA_GROUP   VARCHAR2,
                                              pROUND          NUMBER,
                                              pTOTAL_EMPTY    VARCHAR2,
                                              pSLANE          OUT NUMBER);
                                              
PROCEDURE P_SLANE_REC_EMP_DAISHA_SEL (        pFACTORY_CD     VARCHAR2,
                                          
                                              pMODEL          VARCHAR2,
                                              pLINE_CD        VARCHAR2,

                                              pCELL_NAME      VARCHAR2,
                                              pDAISHA_TYPE    VARCHAR2,
                                              pDAISHA_GROUP   VARCHAR2,
                                              pROUND        NUMBER,
                                              pCUERSOR        OUT T_CURSOR);
                                              
  PROCEDURE P_SLANE_REC_EMP_DAISHA_MAX_SEL (  pFACTORY_CD     VARCHAR2,
                                              pMODEL          VARCHAR2,
                                              pLINE_CD        VARCHAR2,
                                              pDAISHA_TYPE    VARCHAR2,
                                              pDAISHA_GROUP   VARCHAR2,
                                              pCUERSOR        OUT T_CURSOR);
END PG_SLANE_REC_EMPTY_DAISHA;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_SIGNAL
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_SIGNAL" AS 
/* TODO enter package declarations (types, exceptions, methods etc) here */ 
   PROCEDURE P_FIX_STORE_OUT (          pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER);
                                        
  PROCEDURE P_SIGNAL_IN_KT (            pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER);
                                        
  PROCEDURE P_SIGNAL_MIN_KT (           pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pCOLOR        VARCHAR2,
                                        pSLANE        OUT NUMBER);
 
 PROCEDURE P_SIGNAL_IN_BLANE (          pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER);                                       
                                        
 PROCEDURE P_SIGNAL_OUT_BLANE (         pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pCOLOR        VARCHAR2,
                                        pDES          VARCHAR2,
                                        pSLANE        OUT NUMBER);           

END PG_SLANE_SIGNAL;

/
--------------------------------------------------------
--  DDL for Package Body PG_DISTINCT_SELECT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_DISTINCT_SELECT" AS

  PROCEDURE P_PRD_PLAN_MODEL_MS(
                                   pFACTORY_CD VARCHAR2,
                                   pFUNC VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pMODEL VARCHAR2,
                                   pMODEL_ALL VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pCUERSOR OUT T_CURSOR
                                  ) IS
                                   
           wk_select    Varchar2(1000);         
           wk_where     Varchar2(1000);
      
    BEGIN
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
         IF pMODEL_SEQ is not null then
    	 				wk_where :=  wk_where||' AND MODEL_SEQ = '||''''||pMODEL_SEQ||'''';
   			End IF;
    		IF pMODEL is not null then
    	 				wk_where := wk_where||' AND MODEL = '||''''||pMODEL||'''';
    		End IF;
        IF pMODEL_ALL is not null then
    	 				wk_where := wk_where||' AND MODEL_ALL = '||''''||pMODEL_ALL||'''';
    		End IF;
         IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
         if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
        
   					wk_select := 'SELECT DISTINCT '||''||pFUNC||''||' FROM V_PRD_PLAN_A3_MODEL_MS ' ||wk_where||' ';
            
   OPEN pCUERSOR FOR wk_select;
  END P_PRD_PLAN_MODEL_MS;

END PG_DISTINCT_SELECT;

/
--------------------------------------------------------
--  DDL for Package Body PG_PRD_PLAN_A3_ASSY_PLAN
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_PRD_PLAN_A3_ASSY_PLAN" AS

 PROCEDURE P_PRD_PLAN_A3_ASSY_PLAN_SEL(
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pPLAN_DATE VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pCUERSOR OUT T_CURSOR) IS
                                   
           wk_select    Varchar2(1000);         
           wk_where     Varchar2(1000);
      
    BEGIN
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
         IF pMODEL_SEQ is not null then
    	 				wk_where :=  wk_where||' AND MODEL_SEQ = '||''''||pMODEL_SEQ||'''';
   			End IF;
    		IF pPLAN_DATE is not null then
    	 				wk_where := wk_where||' AND PLAN_DATE = '||''''||pPLAN_DATE||'''';
    		End IF;
         IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
        if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
        
   					wk_select := 'SELECT FACTORY_CD, MODEL_SEQ, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, PRIORITY, MERCHANDISE_CD, PLAN_QTY FROM T_PRD_PLAN_A3_ASSY_PLAN@FROM_EUCTEST_CHTINQ ' ||wk_where||' ORDER BY MODEL_SEQ,SHIFT,LINE_CD,PRIORITY';
            
   OPEN pCUERSOR FOR wk_select;
  END P_PRD_PLAN_A3_ASSY_PLAN_SEL;

PROCEDURE P_PRD_PLAN_A3_ASSY_PLAN_UP (
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pPLAN_DATE VARCHAR2,
                                   pSHIFT VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pPRIORITY VARCHAR2,
                                   pMERCHANDISE_CD VARCHAR2,
                                   pPLAN_QTY NUMBER,
                                   pSLANE OUT NUMBER)AS
  BEGIN
    -- TODO: Implementation required for PROCEDURE PG_PRD_PLAN_A3_ASSY_PLAN.P_PRD_PLAN_A3_ASSY_PLAN_UP
              INSERT
              INTO T_SLANE_PRODUCTION_PLAN
                (
                  FACTORY_CD,
                  MODEL_SEQ,
                  PLAN_DATE,
                  SHIFT,
                  LINE_CD,
                  PRIORITY,
                  MERCHANDISE_CD,
                  PLAN_QTY
                )
                VALUES
                (
                  pFACTORY_CD,
                  pMODEL_SEQ,
                  pPLAN_DATE,
                  pSHIFT,
                  pLINE_CD,
                  pPRIORITY,
                  pMERCHANDISE_CD,
                  pPLAN_QTY
                );
                 
                  pSLANE := 1;
                   EXCEPTION
                   WHEN DUP_VAL_ON_INDEX THEN
                   UPDATE T_SLANE_PRODUCTION_PLAN SET 
                   MERCHANDISE_CD = pMERCHANDISE_CD,
                   PLAN_QTY = pPLAN_QTY
                   WHERE
                   FACTORY_CD = pFACTORY_CD
                   AND MODEL_SEQ = pMODEL_SEQ 
                   AND PLAN_DATE = pPLAN_DATE 
                   AND SHIFT = pSHIFT 
                   AND LINE_CD = pLINE_CD
                   AND PRIORITY = pPRIORITY;
                   
                    pSLANE := 2; 
  END P_PRD_PLAN_A3_ASSY_PLAN_UP;

END PG_PRD_PLAN_A3_ASSY_PLAN;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_CYCLE_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_CYCLE_MASTER" AS

  PROCEDURE P_SLANE_CYCLE_MASTER_INS_UPD (
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pTYPE VARCHAR2,
                                        pZONE VARCHAR2,
                                        pCYCLE_TIME NUMBER,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pSLANE OUT NUMBER) AS
  BEGIN
    -- TODO: Implementation required for PROCEDURE PG_SLANE_CYCLE_MASTER.P_SLANE_DELIVERY_CYCLE_MASTER_INS_UPD
    INSERT INTO T_SLANE_DELIVERY_CYCLE_MASTER
                (   FACTORY_CD,
                    MODEL,
                    TYPE,
                    ZONE,
                    CYCLE_TIME,
                    CREATE_DATE,
                    CREATE_BY,
                    UPDATE_DATE,
                    UPDATE_BY
                ) 
        VALUES(    pFACTORY_CD ,
                   pMODEL,
                   pTYPE,
                   pZONE,
                   pCYCLE_TIME,
                   sysdate,
                   pCREATE_BY,
                   sysdate,
                   pUPDATE_BY
               )  ;
   
    pSLANE := 1;
   EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
   
   UPDATE T_SLANE_DELIVERY_CYCLE_MASTER SET 
   CYCLE_TIME = pCYCLE_TIME,
   UPDATE_DATE = SYSDATE,
   UPDATE_BY = pUPDATE_BY WHERE
   FACTORY_CD = pFACTORY_CD
   AND MODEL = pMODEL 
   AND TYPE = pTYPE 
  AND ZONE = pZONE ;
    pSLANE := 1;
    
  END P_SLANE_CYCLE_MASTER_INS_UPD;
PROCEDURE P_SLANE_CYCLE_MASTER_DEL (    pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pTYPE VARCHAR2,
                                        pZONE VARCHAR2,
                                        pSLANE OUT NUMBER)AS
                                
  BEGIN
     DELETE FROM T_SLANE_DELIVERY_CYCLE_MASTER WHERE 
      FACTORY_CD = pFACTORY_CD
      AND MODEL = pMODEL 
      AND TYPE = pTYPE
      AND ZONE = pZONE ;
      
      pSLANE := 1;
  END P_SLANE_CYCLE_MASTER_DEL;
PROCEDURE P_SLANE_CYCLE_MASTER_SEL (    pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pTYPE VARCHAR2,
                                        pZONE VARCHAR2,
                                        pCREATE_DATE VARCHAR2,
                                        pDATE_FROM VARCHAR2,
                                        pDATE_TO VARCHAR2,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pCUERSOR OUT T_CURSOR)IS
          wk_select    					Varchar2(1000); 
   				wk_where              Varchar2(1000);
          --*** Check condition for search
    BEGIN
        IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    
    		IF pMODEL is not null then
    	 				wk_where := wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
    
    		IF pTYPE is not null then
    	 				wk_where := wk_where||' AND TYPE = '||''''||pTYPE||'''';
    		End IF;
        IF pZONE is not null then
    	 				wk_where := wk_where||' AND ZONE = '||''''||pZONE||'''';
    		End IF;
    		IF pCREATE_DATE is not null then

    					wk_where := wk_where||' AND to_char('||pCREATE_DATE||','||''''||'YYYYMMDD'||''''||')'
              ||'BETWEEN to_char(to_date('||''''||pDATE_FROM||''''||','||''''||'dd-MON-yyyy'||''''||'),'||''''||'YYYYMMDD'||''''||')
               AND to_char(to_date('||''''||pDATE_TO||''''||','||''''||'dd-MON-yyyy'||''''||'),'||''''||'YYYYMMDD'||''''||')';
                        	
        END IF;
        IF pCREATE_BY is not null then
    	 				wk_where := wk_where||' AND CREATE_BY = '||''''||pCREATE_BY||'''';
   			End IF;
        IF pUPDATE_BY is not null then
    	 				wk_where := wk_where||' AND UPDATE_BY = '||''''||pUPDATE_BY||'''';
   			End IF;
 
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT * FROM T_SLANE_DELIVERY_CYCLE_MASTER ' ||wk_where||' ORDER BY UPDATE_DATE DESC';
   
  		--*** Execute cursor
   			OPEN pCUERSOR FOR wk_select;

END P_SLANE_CYCLE_MASTER_SEL;

END PG_SLANE_CYCLE_MASTER;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_DAISHA_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_DAISHA_MASTER" AS

 PROCEDURE SLANE_DAISHA_MASTER_INS_UPD (  pFACTORY_CD   VARCHAR2,
                                          pMODEL_SEQ    VARCHAR2,
                                          pMODEL        VARCHAR2,
                                          pMODEL_ALL    VARCHAR2,
                                          pLINE_CD      VARCHAR2,
                                          pDAISHA_TYPE  VARCHAR2,
                                          pDAISHA_GROUP VARCHAR2,
                                          pMIN          NUMBER,
                                          pMAX          NUMBER,
                                          pCREATE_BY    VARCHAR2,
                                          pUPDATE_BY    VARCHAR2,
                                          pSNP          NUMBER,
                                          pSLANE OUT NUMBER) AS
  BEGIN
    -- TODO: Implementation required for PROCEDURE PG_SLANE_DAISHA_MASTER.SLANE_DAISHA_MASTER_INS_UPD
    INSERT INTO T_SLANE_DAISHA_MASTER (  FACTORY_CD,
                                         MODEL_SEQ,
                                         MODEL,
                                         MODEL_ALL,
                                         LINE_CD,
                                         DAISHA_TYPE,
                                         DAISHA_GROUP,
                                         MIN,
                                         MAX,
                                         CREATE_DATE,
                                         CREATE_BY,
                                         UPDATE_DATE,
                                         UPDATE_BY,
                                         SNP) 
                              VALUES (   pFACTORY_CD,
                                         pMODEL_SEQ,
                                         pMODEL,
                                         pMODEL_ALL,
                                         pLINE_CD,
                                         pDAISHA_TYPE,
                                         pDAISHA_GROUP,
                                         pMIN,
                                         pMAX,
                                         sysdate,
                                         pCREATE_BY,
                                         sysdate,
                                         pUPDATE_BY,
                                         pSNP);
   
    pSLANE := 1;
    
  EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
   UPDATE T_SLANE_DAISHA_MASTER SET 
   MIN = pMIN,
   MAX = pMAX,
   UPDATE_DATE = SYSDATE,
   UPDATE_BY = pUPDATE_BY,
   SNP = pSNP
   WHERE FACTORY_CD = pFACTORY_CD 
   AND MODEL = pMODEL 
   AND LINE_CD = pLINE_CD 
   AND DAISHA_TYPE = pDAISHA_TYPE 
   AND DAISHA_GROUP = pDAISHA_GROUP;
    pSLANE := 1; 
  
  END SLANE_DAISHA_MASTER_INS_UPD;
 ----------------------------------------------------------------------------- 
  PROCEDURE SLANE_DAISHA_MASTER_DEL (   
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL_SEQ VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pLINE_CD VARCHAR2,
                                        pDAISHA_TYPE VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pSLANE OUT NUMBER) AS
   BEGIN
      DELETE FROM T_SLANE_DAISHA_MASTER WHERE 
      FACTORY_CD = pFACTORY_CD
      AND MODEL_SEQ = pMODEL_SEQ
      AND MODEL = pMODEL 
      AND LINE_CD = pLINE_CD 
      AND DAISHA_TYPE = pDAISHA_TYPE
      AND DAISHA_GROUP = pDAISHA_GROUP;
      
      pSLANE := 1;
      
   END SLANE_DAISHA_MASTER_DEL;   
 ------------------------------------------------------------------------------  
  PROCEDURE SLANE_DAISHA_MASTER_SEL (  pFACTORY_CD   VARCHAR2,
                                        pMODEL_SEQ    VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pMODEL_ALL    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pCREATE_DATE  VARCHAR2,
                                        pDATE_FROM    VARCHAR2,
                                        pDATE_TO      VARCHAR2,
                                        pCREATE_BY    VARCHAR2,
                                        pUPDATE_BY    VARCHAR2,
                                        pSNP          VARCHAR2,
                                        pCUERSOR OUT T_CURSOR) IS
                                        
          wk_select    					Varchar2(1000); 
   				wk_where              Varchar2(1000);
          --*** Check condition for search
    BEGIN
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
        IF pMODEL_SEQ is not null then
    	 				wk_where :=  wk_where||' AND MODEL_SEQ = '||''''||pMODEL_SEQ||'''';
   			End IF;
    		IF pMODEL is not null then
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF pMODEL_ALL is not null then
    	 				wk_where :=  wk_where||' AND MODEL_ALL = '||''''||pMODEL_ALL||'''';
   			End IF;
    		IF pLINE_CD is not null then
    	 				wk_where := wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
    		End IF;
   
    		IF pDAISHA_TYPE is not null then
    	 				wk_where := wk_where||' AND DAISHA_TYPE = '||''''||pDAISHA_TYPE||'''';
    		End IF;
        
        IF pDAISHA_GROUP is not null then
    	 				wk_where := wk_where||' AND DAISHA_GROUP = '||''''||pDAISHA_GROUP||'''';
   			End IF;
        
    		IF pCREATE_DATE is not null then
    					wk_where := wk_where||' AND to_char('||pCREATE_DATE||','||''''||'YYYYMMDD'||''''||')'
              ||'BETWEEN to_char(to_date('||''''||pDATE_FROM||''''||','||''''||'dd-MON-yyyy'||''''||'),'||''''||'YYYYMMDD'||''''||')
               AND to_char(to_date('||''''||pDATE_TO||''''||','||''''||'dd-MON-yyyy'||''''||'),'||''''||'YYYYMMDD'||''''||')';
        END IF;
        
        IF pCREATE_BY is not null then
    	 				wk_where := wk_where||' AND CREATE_BY = '||''''||pCREATE_BY||'''';
   			End IF;  
        
        IF pUPDATE_BY is not null then
    	 				wk_where := wk_where||' AND UPDATE_BY = '||''''||pUPDATE_BY||'''';
   			End IF;
        
        IF pSNP is not null then
    	 				wk_where := wk_where||' AND SNP = '||''''||pSNP||'''';
   			End IF;
 
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT * FROM T_SLANE_DAISHA_MASTER ' ||wk_where||' ORDER BY UPDATE_DATE DESC';
   
  		--*** Execute cursor
   			OPEN pCUERSOR FOR wk_select;
                                        
    END SLANE_DAISHA_MASTER_SEL;
-------------------------------------------------------------------------------    
END PG_SLANE_DAISHA_MASTER;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_DAISHA_PROGRESSIVE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_DAISHA_PROGRESSIVE" AS

PROCEDURE P_SLANE_DAISHA_PROGRESSIVE_SEL (  pFACTORY_CD   VARCHAR2,
                                            pMODEL        VARCHAR2,
                                            pPLAN_DATE    VARCHAR2,
                                            pLINE_CD      VARCHAR2,
                                            pDAISHA_TYPE  VARCHAR2,
                                            pDAISHA_GROUP VARCHAR2,
                                            pROUND        NUMBER,
                                            pCUERSOR      OUT T_CURSOR)IS
                                        
         wk_select    				 Varchar2(1000); 
         wk_where              Varchar2(1000);
         vSEQ  T_SLANE_DAISHA_PROGRESSIVE.SEQ%TYPE;
          --*** Check condition for search
    BEGIN
    
      SELECT MIN(SEQ) INTO vSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = pPLAN_DATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE 
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND ROUND = pROUND
      AND PLAN_OUT_SLANE_DT IS NOT NULL
      AND PLAN_OUT_SLANE_TM IS NOT NULL
      AND ACT_OUT_SLANE_DT IS NULL
      AND ACT_OUT_SLANE_TM IS NULL;
      
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    		IF pMODEL is not null then
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF pPLAN_DATE is not null then
    	 				wk_where :=  wk_where||' AND PLAN_DATE = '||''''||pPLAN_DATE||'''';
   			End IF;
    	  IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
    		IF pDAISHA_TYPE is not null then
    	 				wk_where := wk_where||' AND DAISHA_TYPE = '||''''||pDAISHA_TYPE||'''';
    		End IF;
        IF pDAISHA_GROUP is not null then
    	 				wk_where := wk_where||' AND DAISHA_GROUP = '||''''||pDAISHA_GROUP||'''';
   			End IF;
         IF vSEQ is not null then
    	 				wk_where := wk_where||' AND SEQ = '||''''||vSEQ||'''';
   			End IF;
        
         IF pROUND is not null then
    	 				wk_where := wk_where||' AND ROUND = '||''''||pROUND||'''';
   			End IF;
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT * FROM T_SLANE_DAISHA_PROGRESSIVE ' ||wk_where||' AND PLAN_OUT_SLANE_DT IS NOT NULL AND PLAN_OUT_SLANE_TM IS NOT NULL AND ACT_OUT_SLANE_DT IS NULL AND ACT_OUT_SLANE_TM IS NULL';
   
  		--*** Execute cursor
   			OPEN pCUERSOR FOR wk_select;
END P_SLANE_DAISHA_PROGRESSIVE_SEL;
 -----------------------------------------------------------------------------
PROCEDURE P_STORE_OUT_SLANE_INQ (       pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pCURSOR       OUT T_CURSOR) IS
                                        
         wk_select    VARCHAR2(2000); 
         wk_where     VARCHAR2(1000);
         vDATE        VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
         vTIME        VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS'); 
         --vTIME        VARCHAR2(8) := '00:00:00' ;
    BEGIN
    
        IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
          vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
          --vDATE := '20180705' ;
        ELSE
          vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
        END IF;
    
     	  IF pFACTORY_CD IS NOT NULL THEN
    	 				wk_where := ' AND A.FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    		IF pMODEL IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND A.MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF vDATE IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND A.PLAN_DATE = '||''''||vDATE||'''';
   			End IF;
      --*** Add WHERE and substr AND
    		IF wk_where is not null then
    		  	wk_where := ' WHERE '||substr(wk_where,5); 
    		End IF; 
        
           wk_select := 'SELECT A.MODEL, A.LINE_CD, A.CELL_NAME, D.DAISHA_TYPE_N, C.DAISHA_GROUP_N,
           A.DESTINATION, A.COLOR, B.COLOR_NAME, A.ROUND, A.PLAN_OUT_SLANE_DT, A.PLAN_OUT_SLANE_TM, A.ACT_OUT_SLANE_DT, A.ACT_OUT_SLANE_TM,
           CASE WHEN A.ACT_OUT_SLANE_TM <> '||''''||'xx:xx:xx'||''''||' THEN 
           ROUND((TO_DATE(TO_CHAR(TO_DATE(PLAN_OUT_SLANE_DT,'||''''||'YYYYMMDD'||''''||'),'||''''||'YYYYMMDD'||''''||')||SUBSTR(PLAN_OUT_SLANE_TM,0,5),'||''''||'YYYYMMDDHH24:MI'||''''||')
           - TO_DATE(TO_CHAR(TO_DATE(ACT_OUT_SLANE_DT,'||''''||'YYYYMMDD'||''''||'),'||''''||'YYYYMMDD'||''''||')||SUBSTR(ACT_OUT_SLANE_TM,0,5),'||''''||'YYYYMMDDHH24:MI'||''''||'))*1440) 
           ELSE NULL END AS DIFF
           FROM T_SLANE_DAISHA_PROGRESSIVE A LEFT JOIN COLOR_MASTER B ON A.COLOR = B.COLOR_CD
           LEFT JOIN T_SLANE_DAISHA_GROUP C ON A.DAISHA_GROUP = C.DAISHA_GROUP 
           LEFT JOIN T_SLANE_DAISHA_TYPE D ON A.DAISHA_TYPE = D.DAISHA_TYPE
           '||wk_where||' AND A.BLANE_SIGNAL_DT IS NOT NULL AND A.BLANE_SIGNAL_TM IS NOT NULL AND A.PLAN_OUT_SLANE_DT IS NOT NULL AND A.PLAN_OUT_SLANE_TM IS NOT NULL 
           AND A.LOCATION <> '''||'ASSY'||''' AND (A.LOCATION <> '''||'EMPTY'||''' OR ACT_OUT_SLANE_DT IS NULL)
           ORDER BY A.ACT_OUT_SLANE_TM ASC NULLS FIRST, A.PLAN_OUT_SLANE_TM, A.DAISHA_TYPE, A.ROUND, A.DAISHA_GROUP';
           
      --AND (ACT_OUT_SLANE_DT IS NULL AND ACT_OUT_SLANE_TM IS NULL) 
  		--*** Execute cursor
   			OPEN pCURSOR FOR wk_select;
        
END P_STORE_OUT_SLANE_INQ; 
--------------------------------------------------------------------------------  
PROCEDURE P_STORE_OUT_SLANE_KT (        pFACTORY_CD VARCHAR2,
                                        pMODEL      VARCHAR2,
                                        --pSHIFT      VARCHAR2,
                                        pLINE_CD    VARCHAR2,
                                        pTYPE       VARCHAR2,
                                        pGROUP      VARCHAR2,
                                        pROUND      NUMBER,
                                        pSLANE      OUT NUMBER) AS
                                        
    vDATE     VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');-- 
    vTIME     VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS'); --:= '20:05:00';
    --vTIME     VARCHAR2(8) := '00:00:00' ;
    vSEQ      T_SLANE_DAISHA_PROGRESSIVE.SEQ%TYPE;
    vROUND    T_SLANE_DAISHA_PROGRESSIVE.ROUND%TYPE;
    --vCYCLE    T_SLANE_DELIVERY_CYCLE_MASTER.CYCLE_TIME%TYPE;
    vSHIFT    T_SLANE_DAISHA_PROGRESSIVE.SHIFT%TYPE;
    vORDER    T_SLANE_DAISHA_PROGRESSIVE.ORDER_NO%TYPE;
    
    vMINROUND     NUMBER;
    vMINSEQ       NUMBER;
    vCHK_ROUND    NUMBER;
    vCHK_ROUND2   NUMBER;
    vCHK_SEQ      NUMBER;
    vCNTORDER     NUMBER;
    vMAXROUND     NUMBER;
    --vPLAN_OUT     VARCHAR2(8);-- := TO_CHAR(SYSDATE,'HH24:MI:SS');
    
    vZONE         VARCHAR2(1) := 'P';
    vCYCLE_TIME   VARCHAR2(16);
    vPLAN_OUT_SLANE_DT        T_SLANE_DAISHA_PROGRESSIVE.PLAN_OUT_SLANE_DT%TYPE;
    vPLAN_OUT_SLANE_TM        T_SLANE_DAISHA_PROGRESSIVE.PLAN_OUT_SLANE_TM%TYPE;
    vACT_OUT_SLANE_DT         T_SLANE_DAISHA_PROGRESSIVE.ACT_OUT_SLANE_DT%TYPE;
    vACT_OUT_SLANE_TM         T_SLANE_DAISHA_PROGRESSIVE.ACT_OUT_SLANE_TM%TYPE;
    vCNT_SUCCESS  NUMBER;
    
    BEGIN
    
      IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
        vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
        --vDATE := '20180705' ;
      ELSE
        vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
      END IF;
      
      IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
        vSHIFT := 'D';
      ELSE
        vSHIFT := 'N';
      END IF;      
      
    --GET MIN SEQ
    SELECT MIN(ROUND), MIN(SEQ) INTO vMINROUND, vMINSEQ
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    -- AND ROUND = pROUND 
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NULL
    AND ACT_OUT_SLANE_TM IS NULL;
    
    IF vMINSEQ IS NULL THEN
      vMINSEQ := 0;
    END IF;
    
    INSERT INTO T_SLANE_TEMP_PROCESS   (   MODEL,
                                             PLAN_DATE,
                                             SHIFT,
                                             LINE_CD,
                                             DAISHA_TYPE,
                                             DAISHA_GROUP,
                                             SEQ,
                                             ROUND,
                                             DESTINATION,
                                             COLOR,
                                             LOCATION,
                                             PROCESS_ID,
                                             PROCESS_NAME,
                                             STATUS,
                                             TIME)
                               VALUES    (   pMODEL,
                                             vDATE,
                                             vSHIFT,
                                             pLINE_CD,
                                             pTYPE,
                                             pGROUP,
                                             vMINSEQ,
                                             pROUND,
                                             'KITTING',
                                             NULL,
                                             'KITTING',
                                             4,
                                             'STORE_OUT_SLANE_KT',
                                             NULL,
                                             vTIME);                                 
          COMMIT;
    
    --GET SEQ OF ROUND
    SELECT MIN(SEQ) INTO vCHK_SEQ --vCHK_ROUND, 
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE MODEL = pMODEL
    AND PLAN_DATE = vDATE 
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND ROUND = pROUND
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NULL
    AND ACT_OUT_SLANE_TM IS NULL;
   -- GROUP BY ROUND;
    
    --GET MIN ROUND OF PRIORITY DAISHA FIFO
    SELECT ROUND INTO vCHK_ROUND2
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE MODEL = pMODEL
    --AND SHIFT = pSHIFT
    AND PLAN_DATE = vDATE 
    AND LINE_CD = pLINE_CD 
    AND DAISHA_TYPE = pTYPE 
    AND DAISHA_GROUP = pGROUP
    AND SEQ = vMINSEQ
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NULL
    AND ACT_OUT_SLANE_TM IS NULL;
    
    IF vCHK_ROUND2 = pROUND AND vMINSEQ = vCHK_SEQ THEN
      
    UPDATE T_SLANE_DAISHA_PROGRESSIVE
    SET LOCATION = 'KITTING',
        ACT_OUT_SLANE_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
        ACT_OUT_SLANE_TM = vTIME,
        SHIFT = vSHIFT 
    WHERE MODEL = pMODEL
    --AND SHIFT = pSHIFT --SEPARATE SHIFT FOR UPDATE ONE ROW
    AND PLAN_DATE = vDATE 
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND ROUND = pROUND 
    AND SEQ = vMINSEQ
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NULL
    AND ACT_OUT_SLANE_TM IS NULL;
    COMMIT;
    
    SELECT MAX(ORDER_NO) INTO vMAXROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE 
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND; 
      
   /*   SELECT MAX(TO_NUMBER(ROUND)) INTO vMAXROUND
      FROM T_SLANE_PROGRESS_ORDER_DAISHA 
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      --AND SHIFT = pSHIFT
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND
      AND ACTUAL_TIME IS NULL;
      
      SELECT COUNT(*) INTO vCNTORDER
      FROM T_SLANE_PROGRESS_ORDER_DAISHA
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      --AND SHIFT = pSHIFT
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND 
      AND ROUND = vMAXROUND;*/
      
    /*SELECT PLAN_TIME INTO vPLAN_OUT
      FROM T_SLANE_PROGRESS_ORDER_DAISHA
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      --AND SHIFT = pSHIFT
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND 
      AND ROUND = vMAXROUND;*/
      
    --  IF vCNTORDER != 0 THEN
      
        SELECT PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM 
        INTO vPLAN_OUT_SLANE_DT, vPLAN_OUT_SLANE_TM, vACT_OUT_SLANE_DT, vACT_OUT_SLANE_TM  
        FROM T_SLANE_DAISHA_PROGRESSIVE  
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND ROUND = pROUND 
        AND SEQ = vMINSEQ
        AND PLAN_OUT_SLANE_DT IS NOT NULL
        AND PLAN_OUT_SLANE_TM IS NOT NULL
        AND ACT_OUT_SLANE_DT IS NOT NULL
        AND ACT_OUT_SLANE_TM IS NOT NULL;
        
    /*    UPDATE T_SLANE_PROGRESS_ORDER_DAISHA 
        SET ACTUAL_TIME = vTIME,
            DIFF = (TO_DATE(TO_CHAR(TO_DATE(vPLAN_OUT_SLANE_DT,'YYYYMMDD'),'YYYYMMDD')||SUBSTR(vPLAN_OUT_SLANE_TM,0,5),'YYYYMMDDHH24:MI')
                 - TO_DATE(TO_CHAR(TO_DATE(vACT_OUT_SLANE_DT,'YYYYMMDD'),'YYYYMMDD')||SUBSTR(vACT_OUT_SLANE_TM,0,5),'YYYYMMDDHH24:MI'))*1440
      WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        --AND SHIFT = pSHIFT
        AND DAISHA_GROUP = pGROUP
        AND ORDER_NO = pROUND 
        AND ROUND = vMAXROUND;
        COMMIT;
      END IF;*/
        
      -- GET Max SEQ
      SELECT MAX(SEQ) +1 INTO vSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE 
      AND LINE_CD = pLINE_CD 
      AND DAISHA_TYPE = pTYPE 
      AND DAISHA_GROUP = pGROUP; 
      
      -- GET Max ROUND
      SELECT MAX(ROUND) +1 INTO vROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE --vDATE
      AND SEQ = vSEQ-1 
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE 
      AND DAISHA_GROUP = pGROUP; 
      
      -- GET Cycle Time PICKING Of KITTING
      /*SELECT CYCLE_TIME INTO vCYCLE
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'KITTING'
      AND ZONE = 'P';*/
      
      vCYCLE_TIME := GET_TIME_PICKING(pMODEL, pTYPE, vDATE, vSHIFT, vTIME, NULL, vZONE);
      
      IF vROUND > 20 THEN
        vROUND := 1;
      END IF;
      
        BEGIN
          INSERT INTO T_SLANE_DAISHA_PROGRESSIVE (FACTORY_CD,
                                                  MODEL,
                                                  PLAN_DATE,
                                                  SHIFT,
                                                  LINE_CD,
                                                  CELL_NAME,
                                                  DAISHA_TYPE,
                                                  DAISHA_GROUP,
                                                  SEQ,
                                                  ROUND,
                                                  MERCHANDISE_CD,
                                                  DESTINATION,
                                                  COLOR,
                                                  LOCATION,
                                                  PLAN_PICK_DT,
                                                  PLAN_PICK_TM,
                                                  ACT_PICK_DT,
                                                  ACT_PICK_TM,
                                                  SLANE_IN_DT,
                                                  SLANE_IN_TM,
                                                  BLANE_SIGNAL_DT,
                                                  BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT,
                                                  PLAN_OUT_SLANE_TM,
                                                  ACT_OUT_SLANE_DT,
                                                  ACT_OUT_SLANE_TM,
                                                  BLANE_IN_DT,
                                                  BLANE_IN_TM)
                                        VALUES    (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  vSHIFT,
                                                  pLINE_CD,
                                                  'ALL',
                                                  pTYPE,
                                                  pGROUP,
                                                  vSEQ,
                                                  vROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  NULL,
                                                  NULL,
                                                  SUBSTR(vCYCLE_TIME,0,8),--vDATE,
                                                  SUBSTR(vCYCLE_TIME,9,8),
                                                  --to_char(sysdate + (.000694 * vCYCLE), 'HH24:MI:SS'),
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL);                                 
        COMMIT;
        
        UPDATE T_SLANE_TEMP_PROCESS
        SET STATUS = 'OK',
        TIME = vTIME
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND SHIFT = vSHIFT
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND SEQ = vMINSEQ
        AND ROUND = pROUND
        AND DESTINATION = 'KITTING'
        AND LOCATION = 'KITTING'
        AND PROCESS_ID = 4;
        COMMIT;
        
        SELECT COUNT(*) INTO vCNT_SUCCESS FROM T_SLANE_DAISHA_PROGRESSIVE  
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE 
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND ORDER_NO = vMAXROUND
        AND ACT_OUT_SLANE_DT IS NULL
        AND ACT_OUT_SLANE_TM IS NULL;
        
        IF vCNT_SUCCESS != 0 THEN
          pSLANE := vCNT_SUCCESS; --REMAIN DAISHA
        ELSE 
          pSLANE := 888; --SUCCESS
        END IF;
        
        END;--BEGIN
         
      ELSE 
      pSLANE := 999||vCHK_ROUND2; --FIFO
    END IF;
    
    EXCEPTION
      WHEN NO_DATA_FOUND THEN 
        pSLANE := 999;   
       
      WHEN DUP_VAL_ON_INDEX THEN
        pSLANE := 999;  
        
      WHEN OTHERS THEN 
        pSLANE := 999;
        
  END P_STORE_OUT_SLANE_KT;
 -----------------------------------------------------------------------------
PROCEDURE P_STORE_OUT_SLANE (           pFACTORY_CD VARCHAR2,
                                        pMODEL      VARCHAR2,
                                        --pSHIFT      VARCHAR2,
                                        pLINE_CD    VARCHAR2,
                                        pTYPE       VARCHAR2,
                                        pGROUP      VARCHAR2,
                                        pROUND      NUMBER,
                                        pSLANE      OUT NUMBER) AS                                        
                                        
    vDATE         VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME         VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    vSEQ          T_SLANE_DAISHA_PROGRESSIVE.SEQ%TYPE;
    vROUND        T_SLANE_DAISHA_PROGRESSIVE.ROUND%TYPE;
    --vCYCLE        T_SLANE_DELIVERY_CYCLE_MASTER.CYCLE_TIME%TYPE;
    vSHIFT        T_SLANE_DAISHA_PROGRESSIVE.SHIFT%TYPE;
    CUR1          T_SLANE_PRODUCTION_PLAN_DAISHA%ROWTYPE;
    
    vMINROUND     NUMBER;
    vMINSEQ       NUMBER;
    vCHK_ROUND    NUMBER;
    vCHK_ROUND2   NUMBER;
    vCHK_SEQ      NUMBER;
    vCNT_ORDER    NUMBER;
    
    --vPLAN_OUT     VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    vMAXROUND     NUMBER;
    vCELL_NAME    VARCHAR2(10);
    vZONE         VARCHAR2(1) := 'P';
    vCYCLE_TIME   VARCHAR2(16);
    vPLAN_OUT_SLANE_DT        T_SLANE_DAISHA_PROGRESSIVE.PLAN_OUT_SLANE_DT%TYPE;
    vPLAN_OUT_SLANE_TM        T_SLANE_DAISHA_PROGRESSIVE.PLAN_OUT_SLANE_TM%TYPE;
    vACT_OUT_SLANE_DT         T_SLANE_DAISHA_PROGRESSIVE.ACT_OUT_SLANE_DT%TYPE;
    vACT_OUT_SLANE_TM         T_SLANE_DAISHA_PROGRESSIVE.ACT_OUT_SLANE_TM%TYPE;
    vCNT_SUCCESS  NUMBER;
    
    BEGIN
    
      IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
        vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
        --vDATE := '20180712' ;
      ELSE
        vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
        -- vDATE := '20180713' ;
      END IF;
      
      IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
        vSHIFT := 'D';
      ELSE
        vSHIFT := 'N';
      END IF;
      
     --GET MIN SEQ
    SELECT MIN(ROUND), MIN(SEQ) INTO vMINROUND, vMINSEQ
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
   -- AND ROUND = pROUND 
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NULL
    AND ACT_OUT_SLANE_TM IS NULL;
    
    IF vMINSEQ IS NULL THEN
      vMINSEQ := 0;
    END IF;
    
    INSERT INTO T_SLANE_TEMP_PROCESS   (   MODEL,
                                             PLAN_DATE,
                                             SHIFT,
                                             LINE_CD,
                                             DAISHA_TYPE,
                                             DAISHA_GROUP,
                                             SEQ,
                                             ROUND,
                                             DESTINATION,
                                             COLOR,
                                             LOCATION,
                                             PROCESS_ID,
                                             PROCESS_NAME,
                                             STATUS,
                                             TIME)
                               VALUES    (   pMODEL,
                                             vDATE,
                                             vSHIFT,
                                             pLINE_CD,
                                             pTYPE,
                                             pGROUP,
                                             vMINSEQ,
                                             pROUND,
                                             'B-LANE',
                                             NULL,
                                             'B-LANE',
                                             4,
                                             'STORE_OUT_BLANE',
                                             NULL,
                                             vTIME);                                 
          COMMIT;
          
    --GET SEQ OF ROUND
    SELECT MIN(SEQ) INTO vCHK_SEQ --vCHK_ROUND,
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE MODEL = pMODEL
    AND PLAN_DATE = vDATE 
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND ROUND = pROUND
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NULL
    AND ACT_OUT_SLANE_TM IS NULL;
    --GROUP BY ROUND;
    
    --GET MIN ROUND OF PRIORITY DAISHA FIFO
    SELECT ROUND INTO vCHK_ROUND2
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE MODEL = pMODEL
    AND PLAN_DATE = vDATE 
    AND LINE_CD = pLINE_CD 
    AND DAISHA_TYPE = pTYPE 
    AND DAISHA_GROUP = pGROUP
    AND SEQ = vMINSEQ
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NULL
    AND ACT_OUT_SLANE_TM IS NULL;
      
    IF vCHK_ROUND2 = pROUND AND vMINSEQ = vCHK_SEQ THEN
   
    UPDATE T_SLANE_DAISHA_PROGRESSIVE
    SET LOCATION = 'B-LANE',
        ACT_OUT_SLANE_DT = TO_CHAR(SYSDATE,'YYYYMMDD'), --vDATE,
        ACT_OUT_SLANE_TM = vTIME,
        SHIFT = vSHIFT
    WHERE MODEL = pMODEL
    --AND SHIFT = pSHIFT 
    AND PLAN_DATE = vDATE --vDATE
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND ROUND = pROUND -- Check ???
    AND SEQ = vMINSEQ
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NULL
    AND ACT_OUT_SLANE_TM IS NULL;
    COMMIT;
    
    SELECT MAX(ORDER_NO) INTO vMAXROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE 
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND; 
      
   /* SELECT MAX(TO_NUMBER(ROUND)) INTO vMAXROUND
      FROM T_SLANE_PROGRESS_ORDER_DAISHA 
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD --*NEW
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND
      AND ACTUAL_TIME IS NULL;
      
    SELECT COUNT(*) INTO vCNT_ORDER
      FROM T_SLANE_PROGRESS_ORDER_DAISHA
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      --AND SHIFT = pSHIFT
      AND LINE_CD = pLINE_CD --*NEW
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND   -- ORDER_NO = 1-20
      AND ROUND = vMAXROUND;*/
      
      /*SELECT PLAN_TIME INTO vPLAN_OUT
      FROM T_SLANE_PROGRESS_ORDER_DAISHA
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      --AND SHIFT = pSHIFT
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND
      AND ROUND = vMAXROUND;*/
            
    --  IF vCNT_ORDER != 0 THEN 
        SELECT PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM 
        INTO vPLAN_OUT_SLANE_DT, vPLAN_OUT_SLANE_TM, vACT_OUT_SLANE_DT, vACT_OUT_SLANE_TM  
        FROM T_SLANE_DAISHA_PROGRESSIVE  
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND ROUND = pROUND 
        AND SEQ = vMINSEQ
        AND PLAN_OUT_SLANE_DT IS NOT NULL
        AND PLAN_OUT_SLANE_TM IS NOT NULL
        AND ACT_OUT_SLANE_DT IS NOT NULL
        AND ACT_OUT_SLANE_TM IS NOT NULL;
        
     /*   UPDATE T_SLANE_PROGRESS_ORDER_DAISHA
        SET ACTUAL_TIME = vTIME,
            DIFF = (TO_DATE(TO_CHAR(TO_DATE(vPLAN_OUT_SLANE_DT,'YYYYMMDD'),'YYYYMMDD')||SUBSTR(vPLAN_OUT_SLANE_TM,0,5),'YYYYMMDDHH24:MI')
                    - TO_DATE(TO_CHAR(TO_DATE(vACT_OUT_SLANE_DT,'YYYYMMDD'),'YYYYMMDD')||SUBSTR(vACT_OUT_SLANE_TM,0,5),'YYYYMMDDHH24:MI'))*1440
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        --AND SHIFT = pSHIFT
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND ORDER_NO = pROUND 
        AND ROUND = vMAXROUND; -- ORDER_NO = 1-20
        COMMIT;
      END IF;*/
      
      -- GET Max SEQ
      SELECT MAX(SEQ) +1 INTO vSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      --AND SHIFT = pSHIFT --CHECK FOR INSERT SEQ EACH SHIFT
      AND PLAN_DATE = vDATE 
      AND LINE_CD = pLINE_CD 
      AND DAISHA_TYPE = pTYPE 
      AND DAISHA_GROUP = pGROUP; 
      
      -- GET Max ROUND
      SELECT MAX(ROUND) +1 INTO vROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      --AND SHIFT = pSHIFT --CHECK FOR INSERT ROUND EACH SHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND SEQ = vSEQ-1 
      AND DAISHA_TYPE = pTYPE 
      AND DAISHA_GROUP = pGROUP;
      
      -- GET Cycle Time PICKING Of KITTING
      /*SELECT CYCLE_TIME INTO vCYCLE
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'BLANE'
      AND ZONE = 'P';*/
      vCYCLE_TIME := GET_TIME_PICKING(pMODEL, pTYPE, vDATE, vSHIFT, vTIME, NULL, vZONE);
      
      IF vROUND > 20 THEN
        vROUND := 1;
      END IF; 
      
      /*SELECT * INTO CUR1
      FROM T_SLANE_PRODUCTION_PLAN_DAISHA
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND SEQ = vSEQ;*/
     
      SELECT CELL_NAME INTO vCELL_NAME
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE 
      AND DAISHA_GROUP = pGROUP
      AND SEQ = vSEQ-1;
      
        BEGIN
          INSERT INTO T_SLANE_DAISHA_PROGRESSIVE (FACTORY_CD,
                                                  MODEL,
                                                  PLAN_DATE,
                                                  SHIFT,
                                                  LINE_CD,
                                                  CELL_NAME,
                                                  DAISHA_TYPE,
                                                  DAISHA_GROUP,
                                                  SEQ,
                                                  ROUND,
                                                  MERCHANDISE_CD,
                                                  DESTINATION,
                                                  COLOR,
                                                  LOCATION,
                                                  PLAN_PICK_DT,
                                                  PLAN_PICK_TM,
                                                  ACT_PICK_DT,
                                                  ACT_PICK_TM,
                                                  SLANE_IN_DT,
                                                  SLANE_IN_TM,
                                                  BLANE_SIGNAL_DT,
                                                  BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT,
                                                  PLAN_OUT_SLANE_TM,
                                                  ACT_OUT_SLANE_DT,
                                                  ACT_OUT_SLANE_TM,
                                                  BLANE_IN_DT,
                                                  BLANE_IN_TM)
                                         VALUES  (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  vSHIFT,
                                                  pLINE_CD,
                                                  vCELL_NAME,
                                                  pTYPE,
                                                  pGROUP,
                                                  vSEQ,
                                                  vROUND,
                                                  'COMMON',
                                                  'COMMON',
                                                  NULL,
                                                  NULL,
                                                  SUBSTR(vCYCLE_TIME,0,8),--vDATE,
                                                  SUBSTR(vCYCLE_TIME,9,8), --to_char(sysdate + (.000694 * vCYCLE), 'HH24:MI:SS'),
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL);                                 
                           
        END;
        COMMIT;
        
        BEGIN
        UPDATE T_SLANE_TEMP_PROCESS
        SET STATUS = 'OK',
        TIME = vTIME
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND SHIFT = vSHIFT
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND SEQ = vMINSEQ
        AND ROUND = pROUND
        AND DESTINATION = 'B-LANE'
        AND LOCATION = 'B-LANE'
        AND PROCESS_ID = 4;
        COMMIT;
        
        /* UPDATE T_SLANE_PRODUCTION_PLAN_DAISHA
         SET FLAG = 'Y'
         WHERE MODEL = pMODEL
         AND PLAN_DATE = vDATE --vDATE
         AND LINE_CD = pLINE_CD
         AND SEQ = vSEQ;*/
        SELECT COUNT(*) INTO vCNT_SUCCESS FROM T_SLANE_DAISHA_PROGRESSIVE  
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE 
        AND LINE_CD = pLINE_CD
        --AND DAISHA_TYPE = pTYPE
        AND ORDER_NO = vMAXROUND
        AND ACT_OUT_SLANE_DT IS NULL
        AND ACT_OUT_SLANE_TM IS NULL;
        
        IF vCNT_SUCCESS != 0 THEN
          pSLANE := vCNT_SUCCESS; --REMAIN DAISHA
        ELSE 
          pSLANE := 888; --SUCCESS
        END IF;
        
        END;--BEGIN  --pSLANE := 0; 
        
        ELSE 
           pSLANE := 999||vCHK_ROUND2; --FIFO
      END IF; 
      
      EXCEPTION
      WHEN NO_DATA_FOUND THEN 
        pSLANE := 999;   
    
      WHEN DUP_VAL_ON_INDEX THEN
        pSLANE := 999; 
        
      WHEN OTHERS THEN 
        pSLANE := 999;
        
  END P_STORE_OUT_SLANE;
 -----------------------------------------------------------------------------
PROCEDURE P_PICKING_IN (                pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pCUERSOR      OUT T_CURSOR) IS
                                        
         wk_select    				 Varchar2(1000); 
         wk_where              Varchar2(1000);
         vSEQ  T_SLANE_DAISHA_PROGRESSIVE.SEQ%TYPE;

    BEGIN
    
      SELECT MIN(SEQ) INTO vSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = pPLAN_DATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE 
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND ROUND = pROUND
      AND PLAN_PICK_DT IS NOT NULL
      AND PLAN_PICK_TM IS NOT NULL
      AND ACT_PICK_DT IS NULL
      AND ACT_PICK_TM IS NULL;
    
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    		IF pMODEL is not null then
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF pPLAN_DATE is not null then
    	 				wk_where :=  wk_where||' AND PLAN_DATE = '||''''||pPLAN_DATE||'''';
   			End IF;
    	 IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
    		IF pDAISHA_TYPE is not null then
    	 				wk_where := wk_where||' AND DAISHA_TYPE = '||''''||pDAISHA_TYPE||'''';
    		End IF;
        IF pDAISHA_GROUP is not null then
    	 				wk_where := wk_where||' AND DAISHA_GROUP = '||''''||pDAISHA_GROUP||'''';
   			End IF;
         IF vSEQ is not null then
    	 				wk_where := wk_where||' AND SEQ = '||''''||vSEQ||'''';
   			End IF;
         IF pROUND is not null then
    	 				wk_where := wk_where||' AND ROUND = '||''''||pROUND||'''';
   			End IF;
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT MODEL, LINE_CD, CELL_NAME, CASE DAISHA_TYPE  WHEN '''||'MA'||''' THEN '''||'MAIN'||''' WHEN '''||'SU'||''' THEN '''||'SUB'||'''  
            WHEN '''||'MS'||''' THEN '''||'MAIN+SUB'||'''  WHEN '''||'KT'||''' THEN '''||'KITTING'||''' END AS DAISHA_TYPE, 
            CASE DAISHA_GROUP WHEN '''||'KR'||''' THEN '''||'KORAT'||''' WHEN '''||'O1'||''' THEN '''||'OTHER1'||''' WHEN '''||'O2'||''' THEN '''||'OTHER2'||''' 
            END AS DAISHA_GROUP, DESTINATION, COLOR, ROUND, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM, ACT_PICK_DT, ACT_PICK_TM  FROM T_SLANE_DAISHA_PROGRESSIVE 
            ' ||wk_where||' AND PLAN_PICK_DT IS NOT NULL AND PLAN_PICK_TM IS NOT NULL AND ACT_PICK_DT IS NULL AND ACT_PICK_TM IS NULL';
   
  		--*** Execute cursor
   			OPEN pCUERSOR FOR wk_select;
        
END P_PICKING_IN;
 -----------------------------------------------------------------------------
PROCEDURE P_PICKING_IN_INQ (            pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pCURSOR       OUT T_CURSOR) IS
                                        
         wk_select    VARCHAR2(3000); 
         wk_where     VARCHAR2(1000);
         vDATE        VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
         vTIME        VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS'); 
         --vTIME        VARCHAR2(8) := '00:00:00' ;
    BEGIN
    
        IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
          vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
          --vDATE := '20180705';
        ELSE
          vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
        END IF;
        
     	  IF pFACTORY_CD IS NOT NULL THEN
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    		IF pMODEL IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF vDATE IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND PLAN_DATE = '||''''||vDATE||'''';
   			End IF;
        /*IF pSHIFT IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND SHIFT = '||''''||pSHIFT||'''';
   			End IF;*/
    	--*** Add WHERE and substr AND
    		IF wk_where is not null then
    		  	wk_where := ' WHERE '||substr(wk_where,5); 
    		End IF; 
        
           wk_select := 'SELECT MODEL, LINE_CD, CELL_NAME, D.DAISHA_TYPE_N, C.DAISHA_GROUP_N,
           DESTINATION, COLOR, COLOR_NAME, ROUND, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM, ACT_PICK_DT, ACT_PICK_TM
           FROM T_SLANE_DAISHA_PROGRESSIVE A LEFT JOIN COLOR_MASTER B ON A.COLOR = B.COLOR_CD 
           LEFT JOIN T_SLANE_DAISHA_GROUP C ON A.DAISHA_GROUP = C.DAISHA_GROUP 
           LEFT JOIN T_SLANE_DAISHA_TYPE D ON A.DAISHA_TYPE = D.DAISHA_TYPE
           '||wk_where||' AND (LOCATION IS NULL OR LOCATION = '''||'PICKING'||''') AND PLAN_PICK_DT IS NOT NULL AND PLAN_PICK_TM IS NOT NULL 
           ORDER BY A.ACT_PICK_TM ASC NULLS FIRST, D.DAISHA_TYPE_N, C.DAISHA_GROUP_N, A.ROUND';
          
          --AND PLAN_DATE = (SELECT MAX(PLAN_DATE) FROM T_SLANE_DAISHA_PROGRESSIVE '||wk_where||')
          /*wk_select := ' SELECT MODEL, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP, LOCATION, ROUND, PLAN_PICK_DT, PLAN_PICK_TM, ACT_PICK_DT, ACT_PICK_TM, DESTINATION, A.COLOR, COLOR_NAME FROM 
          (SELECT A.MODEL, A.LINE_CD, A.CELL_NAME, CASE A.DAISHA_TYPE  WHEN '''||'MA'||''' THEN '''||'MAIN'||''' WHEN '''||'SU'||''' THEN '''||'SUB'||'''  WHEN '''||'MS'||''' THEN '''||'MAIN+SUB'||'''  WHEN '''||'KT'||''' THEN '''||'KITTING'||''' END AS DAISHA_TYPE,       
          CASE A.DAISHA_GROUP WHEN '''||'KR'||''' THEN '''||'KORAT'||''' WHEN '''||'O1'||''' THEN '''||'OTHER1'||''' WHEN '''||'O2'||''' THEN '''||'OTHER2'||''' END AS DAISHA_GROUP, A.LOCATION, A.ROUND, A.PLAN_PICK_DT, A.PLAN_PICK_TM, A.ACT_PICK_DT, A.ACT_PICK_TM, A.DESTINATION, A.COLOR  
          FROM (SELECT * FROM T_SLANE_DAISHA_PROGRESSIVE '||wk_where||' AND PLAN_PICK_TM IS NOT NULL AND (LOCATION IS NULL OR LOCATION = '''||'PICKING'||'''))A, (SELECT MODEL, LINE_CD,LOCATION, CELL_NAME,DAISHA_TYPE,DAISHA_GROUP   
          ,MAX (ROUND) AS ROUND FROM T_SLANE_DAISHA_PROGRESSIVE '||wk_where||' AND LOCATION IS NULL GROUP BY MODEL, LINE_CD, LOCATION, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP, ROUND)B,
          (SELECT MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION, MAX(ROUND) AS ROUND FROM T_SLANE_DAISHA_PROGRESSIVE '||wk_where||' 
          AND (LOCATION IS NULL OR LOCATION = '''||'PICKING'||''') GROUP by MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION)C WHERE A.MODEL = B.MODEL AND A.LINE_CD = B.LINE_CD AND A.CELL_NAME = B.CELL_NAME AND A.DAISHA_TYPE = B.DAISHA_TYPE
          AND A.DAISHA_GROUP = B.DAISHA_GROUP AND A.MODEL = C.MODEL AND A.LINE_CD = C.LINE_CD AND A.CELL_NAME = C.CELL_NAME AND A.DAISHA_TYPE = C.DAISHA_TYPE AND A.DAISHA_GROUP = C.DAISHA_GROUP
          AND (A.ROUND = B.ROUND OR A.ROUND = C.ROUND) GROUP by A.MODEL, A.LINE_CD, A.CELL_NAME, A.DAISHA_TYPE, A.DAISHA_GROUP, A.LOCATION, A.ROUND, A.PLAN_PICK_DT, A.PLAN_PICK_TM, A.ACT_PICK_DT, A.ACT_PICK_TM, A.DESTINATION, A.COLOR 
          ORDER BY A.ROUND DESC) A LEFT JOIN COLOR_MASTER B ON A.COLOR = B.COLOR_CD ';    */ 

  		--*** Execute cursor
   			OPEN pCURSOR FOR wk_select;
        
END P_PICKING_IN_INQ;
 -----------------------------------------------------------------------------
PROCEDURE P_PICKING_IN_UPD (            pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        --pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER) AS 
       
         vSEQ       T_SLANE_DAISHA_PROGRESSIVE.SEQ%TYPE;
         vDATE      VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
         vTIME      VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
         --vTIME      VARCHAR2(8) := '00:00:00';
         vSHIFT     T_SLANE_DAISHA_PROGRESSIVE.SHIFT%TYPE;
         vCOUNT     NUMBER;   
         vMINROUND  NUMBER; 
         
    BEGIN
    
      IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
         vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
         --vDATE := '20180705';
      ELSE
         vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
      END IF;
        
      IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
        vSHIFT := 'D';
      ELSE
        vSHIFT := 'N';
      END IF;
      
      SELECT MIN(SEQ) INTO vSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE 
      AND DAISHA_GROUP = pDAISHA_GROUP
      --AND ROUND = pROUND
      AND PLAN_PICK_DT IS NOT NULL
      AND PLAN_PICK_TM IS NOT NULL
      AND ACT_PICK_DT IS NULL
      AND ACT_PICK_TM IS NULL;
      
    -- GET Min ROUND PICKING FIFO
      SELECT MIN(ROUND) INTO vMINROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE 
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND PLAN_PICK_DT IS NOT NULL
      AND PLAN_PICK_TM IS NOT NULL
      AND ACT_PICK_DT IS NULL
      AND ACT_PICK_TM IS NULL
      AND SEQ = vSEQ;
   
      IF vMINROUND =  pROUND  THEN
        BEGIN
          SELECT COUNT(*) INTO vCOUNT
          FROM T_SLANE_REC_EMPTY_DAISHA WHERE TOTAL_EMPTY >= 1
          AND MODEL = pMODEL
          AND CAL_DATE = (SELECT MAX(CAL_DATE) FROM T_SLANE_REC_EMPTY_DAISHA 
            WHERE MODEL = pMODEL 
            AND LINE_CD = pLINE_CD
            AND DAISHA_TYPE = pDAISHA_TYPE
            AND DAISHA_GROUP = pDAISHA_GROUP)
          --AND SHIFT = vSHIFT
          AND LINE_CD = pLINE_CD
          AND DAISHA_TYPE = pDAISHA_TYPE
          AND DAISHA_GROUP = pDAISHA_GROUP;
        
        IF vCOUNT >= 1 THEN
          UPDATE T_SLANE_DAISHA_PROGRESSIVE
          SET LOCATION = 'PICKING',
              ACT_PICK_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
              ACT_PICK_TM = vTIME
          WHERE MODEL = pMODEL
          AND PLAN_DATE = vDATE 
          AND LINE_CD = pLINE_CD
          AND DAISHA_TYPE = pDAISHA_TYPE
          AND DAISHA_GROUP = pDAISHA_GROUP
          AND SEQ = vSEQ 
          AND ROUND =  pROUND
          AND PLAN_PICK_DT IS NOT NULL
          AND PLAN_PICK_TM IS NOT NULL
          AND ACT_PICK_DT IS NULL
          AND ACT_PICK_TM IS NULL;              
          COMMIT;
        
          UPDATE T_SLANE_REC_EMPTY_DAISHA
          SET TOTAL_EMPTY = TOTAL_EMPTY-1,
              UPDATE_DATE = SYSDATE
          WHERE MODEL = pMODEL
          AND CAL_DATE = (SELECT MAX(CAL_DATE) FROM T_SLANE_REC_EMPTY_DAISHA 
            WHERE MODEL = pMODEL 
            AND LINE_CD = pLINE_CD
            AND DAISHA_TYPE = pDAISHA_TYPE
            AND DAISHA_GROUP = pDAISHA_GROUP)
          --AND SHIFT = vSHIFT
          AND LINE_CD = pLINE_CD
          AND DAISHA_TYPE = pDAISHA_TYPE
          AND DAISHA_GROUP = pDAISHA_GROUP;
          COMMIT;
            pSLANE := 111;   
        ELSE 
          pSLANE := 999; 
          
        END IF;
      END;
        
      COMMIT;
        
      ELSIF vMINROUND IS NULL THEN 
        pSLANE := 222; 
      ELSE 
        pSLANE := vMINROUND; 
          
     END IF; 
 END P_PICKING_IN_UPD;
 ----------------------------------------------------------------------------- 
PROCEDURE P_STORE_IN (                  pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pCUERSOR      OUT T_CURSOR) IS
                                        
         wk_select        Varchar2(1000); 
         wk_where         Varchar2(1000);
         vSEQ  T_SLANE_DAISHA_PROGRESSIVE.SEQ%TYPE;

    BEGIN
    
      SELECT MIN(SEQ) INTO vSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = pPLAN_DATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE 
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND ROUND = pROUND
      AND ACT_PICK_DT IS NOT NULL
      AND ACT_PICK_TM IS NOT NULL
      AND SLANE_IN_DT IS NULL
      AND SLANE_IN_TM IS NULL;
    
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    		IF pMODEL is not null then
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF pPLAN_DATE is not null then
    	 				wk_where :=  wk_where||' AND PLAN_DATE = '||''''||pPLAN_DATE||'''';
   			End IF;
    	 IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
    		IF pDAISHA_TYPE is not null then
    	 				wk_where := wk_where||' AND DAISHA_TYPE = '||''''||pDAISHA_TYPE||'''';
    		End IF;
        IF pDAISHA_GROUP is not null then
    	 				wk_where := wk_where||' AND DAISHA_GROUP = '||''''||pDAISHA_GROUP||'''';
   			End IF;
         IF vSEQ is not null then
    	 				wk_where := wk_where||' AND SEQ = '||''''||vSEQ||'''';
   			End IF;
        
         IF pROUND is not null then
    	 				wk_where := wk_where||' AND ROUND = '||''''||pROUND||'''';
   			End IF;
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT * FROM T_SLANE_DAISHA_PROGRESSIVE ' ||wk_where||' AND ACT_PICK_DT IS NOT NULL AND ACT_PICK_TM IS NOT NULL AND SLANE_IN_DT IS NULL AND SLANE_IN_TM IS NULL';
   
  		--*** Execute cursor
   			OPEN pCUERSOR FOR wk_select;
        
END P_STORE_IN;
 -----------------------------------------------------------------------------
PROCEDURE P_STORE_IN_INQ (              pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pCURSOR       OUT T_CURSOR) IS
                                        
         wk_select    VARCHAR2(4000); 
         wk_where     VARCHAR2(1000);
         vDATE        VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
         vTIME        VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
         --vTIME        VARCHAR2(8) := '00:00:00';

    BEGIN
    
        IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
          vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
          --vDATE := '20180705';
        ELSE
          vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
        END IF;
        
     	  IF pFACTORY_CD IS NOT NULL THEN
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    		IF pMODEL IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF vDATE IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND PLAN_DATE = '||''''||vDATE||'''';
   			End IF;
        /*IF pSHIFT IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND SHIFT = '||''''||pSHIFT||'''';
   			End IF;*/
    	--*** Add WHERE and substr AND
    		IF wk_where is not null then
    		  	wk_where := ' WHERE '||substr(wk_where,5); 
    		End IF; 
                
           /*wk_select := 'SELECT MODEL, LINE_CD, CELL_NAME, 
           CASE DAISHA_TYPE  WHEN '''||'MA'||''' THEN '''||'MAIN'||''' WHEN '''||'SU'||''' THEN '''||'SUB'||'''  WHEN '''||'MS'||''' THEN '''||'MAIN+SUB'||'''  WHEN '''||'KT'||''' THEN '''||'KITTING'||''' END AS DAISHA_TYPE, 
           CASE DAISHA_GROUP WHEN '''||'KR'||''' THEN '''||'KORAT'||''' WHEN '''||'O1'||''' THEN '''||'OTHER1'||''' WHEN '''||'O2'||''' THEN '''||'OTHER2'||''' END AS DAISHA_GROUP,
           DESTINATION, COLOR, COLOR_NAME, ROUND,LOCATION, PLAN_PICK_DT, PLAN_PICK_TM, SLANE_IN_DT, SLANE_IN_TM,
           ROUND((TO_DATE(TO_CHAR(TO_DATE(PLAN_PICK_TM,'||''''||'HH24:MI:SS'||''''||'),'||''''||'HH24:MI'||''''||'),'||''''||'HH24:MI'||''''||') - 
           TO_DATE(TO_CHAR(TO_DATE(SLANE_IN_TM,'||''''||'HH24:MI:SS'||''''||'),'||''''||'HH24:MI'||''''||'),'||''''||'HH24:MI'||''''||'))*24*60) AS DIFF
           FROM T_SLANE_DAISHA_PROGRESSIVE A LEFT JOIN COLOR_MASTER B ON A.COLOR = B.COLOR_CD 
           '||wk_where||' 
           ORDER BY ROUND, DAISHA_TYPE DESC';*/
           --AND (ROUND = '||vMAXROUND||' OR ROUND = '||vMAXROUND||'-1)
          wk_select := ' SELECT MODEL, LINE_CD, CELL_NAME, F.DAISHA_TYPE_N, E.DAISHA_GROUP_N, LOCATION, ROUND, PLAN_PICK_DT, PLAN_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, DESTINATION, COLOR, COLOR_NAME,  
        ROUND((TO_DATE(TO_CHAR(TO_DATE(PLAN_PICK_DT,'||''''||'YYYYMMDD'||''''||'),'||''''||'YYYYMMDD'||''''||')||SUBSTR(PLAN_PICK_TM,0,5),'||''''||'YYYYMMDDHH24:MI'||''''||')
        - TO_DATE(TO_CHAR(TO_DATE(SLANE_IN_DT,'||''''||'YYYYMMDD'||''''||'),'||''''||'YYYYMMDD'||''''||')||SUBSTR(SLANE_IN_TM,0,5),'||''''||'YYYYMMDDHH24:MI'||''''||'))*1440) AS DIFF 
        FROM (SELECT A.MODEL,A.LINE_CD,A.CELL_NAME, A.DAISHA_TYPE, A.DAISHA_GROUP, A.LOCATION, A.ROUND, A.PLAN_PICK_DT, A.PLAN_PICK_TM, A.SLANE_IN_DT, A.SLANE_IN_TM, A.DESTINATION, A.COLOR 
        FROM (SELECT * FROM T_SLANE_DAISHA_PROGRESSIVE '||wk_where||' AND (LOCATION = '''||'PICKING'||''' OR LOCATION = '''||'S-LANE'||''')) A, 
        (SELECT MODEL, LINE_CD, LOCATION, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP ,MAX (SEQ) AS SEQ ,ROUND FROM T_SLANE_DAISHA_PROGRESSIVE         
        '||wk_where||' AND LOCATION = '''||'PICKING'||''' GROUP BY MODEL, LINE_CD, LOCATION, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,ROUND)B,
        (SELECT MODEL,LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP, LOCATION, MAX(SEQ) AS SEQ         
        FROM T_SLANE_DAISHA_PROGRESSIVE '||wk_where||' AND LINE_CD = '''||'CM'||''' AND LOCATION = '''||'S-LANE'||''' 
        GROUP BY MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION)C,          
        (SELECT MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION, MAX(SEQ)-1 AS SEQ FROM T_SLANE_DAISHA_PROGRESSIVE 
        '||wk_where||' AND LINE_CD = '''||'CM'||''' AND LOCATION = '''||'S-LANE'||'''           
        GROUP by MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION)D ,
        (SELECT MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION, MAX(SEQ) AS SEQB FROM T_SLANE_DAISHA_PROGRESSIVE 
        '||wk_where||' AND LINE_CD <> '''||'CM'||''' AND LOCATION = '''||'S-LANE'||'''           
        GROUP by MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION)E 
        WHERE A.MODEL = B.MODEL(+) 
        AND A.LINE_CD = B.LINE_CD(+) 
        AND A.CELL_NAME = B.CELL_NAME(+) 
        AND A.DAISHA_TYPE = B.DAISHA_TYPE(+)         
        AND A.DAISHA_GROUP = B.DAISHA_GROUP(+) 
        AND A.MODEL = C.MODEL (+) 
        AND A.LINE_CD = C.LINE_CD(+) 
        AND A.CELL_NAME = C.CELL_NAME(+) 
        AND A.DAISHA_TYPE = C.DAISHA_TYPE(+)       
        AND A.DAISHA_GROUP = C.DAISHA_GROUP(+) 
        AND A.MODEL = D.MODEL (+) 
        AND A.LINE_CD = D.LINE_CD(+) 
        AND A.CELL_NAME = D.CELL_NAME(+) 
        AND A.DAISHA_TYPE = D.DAISHA_TYPE(+)       
        AND A.DAISHA_GROUP = D.DAISHA_GROUP(+)
        AND A.MODEL = E.MODEL (+) 
        AND A.CELL_NAME = E.CELL_NAME(+) 
        AND A.DAISHA_TYPE = E.DAISHA_TYPE(+)       
        AND A.DAISHA_GROUP = E.DAISHA_GROUP(+) 
        AND (A.ROUND = B.ROUND OR A.SEQ = C.SEQ OR A.SEQ = D.SEQ OR A.SEQ = E.SEQB)     
        GROUP BY A.MODEL, A.LINE_CD, A.CELL_NAME, A.DAISHA_TYPE, A.DAISHA_GROUP, A.LOCATION, A.ROUND, A.PLAN_PICK_DT, A.PLAN_PICK_TM, A.SLANE_IN_DT, A.SLANE_IN_TM, A.DESTINATION, A.COLOR)A 
        LEFT JOIN COLOR_MASTER B ON A.COLOR = B.COLOR_CD 
        LEFT JOIN T_SLANE_DAISHA_GROUP E ON A.DAISHA_GROUP = E.DAISHA_GROUP    
        LEFT JOIN T_SLANE_DAISHA_TYPE F ON A.DAISHA_TYPE = F.DAISHA_TYPE
        ORDER BY A.SLANE_IN_TM asc nulls first,A.LINE_CD, A.ROUND';
        
        --AND LOCATION = '''||'S-LANE'||'''
  		  --*** Execute cursor
   			OPEN pCURSOR FOR wk_select;
        
END P_STORE_IN_INQ;
--------------------------------------------------------------------------------
PROCEDURE P_STORE_IN_UPD (              pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        --pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER) AS 
       
         vSEQ       T_SLANE_DAISHA_PROGRESSIVE.SEQ%TYPE;
         vDATE      VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
         vTIME      VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
         --vTIME      VARCHAR2(8) := '00:00:00';
         vSHIFT     T_SLANE_DAISHA_PROGRESSIVE.SHIFT%TYPE;
         vCOUNT     NUMBER;   
         vMINROUND  NUMBER;
         vCHK_DUP   NUMBER;
         
    BEGIN
    
      IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
         vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
         --vDATE := '20180705';
      ELSE
         vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
         --vDATE := '20180705';
      END IF;
        
      IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
        vSHIFT := 'D';
      ELSE
        vSHIFT := 'N';
      END IF;
      
      -- GET MIN SEQ
      SELECT MIN(SEQ) INTO vSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      --AND SHIFT = vSHIFT 
      AND LINE_CD = pLINE_CD 
      AND DAISHA_TYPE = pDAISHA_TYPE 
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND ACT_PICK_DT IS NOT NULL
      AND ACT_PICK_TM IS NOT NULL
      AND SLANE_IN_DT IS NULL
      AND SLANE_IN_TM IS NULL;
               
      -- GET MIN ROUND
      SELECT MIN(ROUND) INTO vMINROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE 
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND ACT_PICK_DT IS NOT NULL
      AND ACT_PICK_TM IS NOT NULL
      AND SLANE_IN_DT IS NULL
      AND SLANE_IN_TM IS NULL
      AND SEQ = vSEQ;
      
      --CHECK DUPLICATE
     /* SELECT ROUND INTO vCHK_DUP
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      --AND SHIFT = vSHIFT 
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE 
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND ROUND = pROUND
      AND SEQ = vSEQ
      AND ACT_PICK_DT IS NOT NULL
      AND ACT_PICK_TM IS NOT NULL
      AND SLANE_IN_DT IS NULL
      AND SLANE_IN_TM IS NULL;*/
      
      /*EXCEPTION
      WHEN NO_DATA_FOUND THEN
         GOTO END_PROCESS;*/
         
     IF vMINROUND = pROUND THEN  
      
      UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'S-LANE',
          SHIFT = vSHIFT,
          SLANE_IN_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
          SLANE_IN_TM = vTIME
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE 
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND SEQ = vSEQ 
      AND ROUND = pROUND
      AND PLAN_PICK_DT IS NOT NULL
      AND PLAN_PICK_TM IS NOT NULL
      AND SLANE_IN_DT IS  NULL
      AND SLANE_IN_TM IS  NULL;
      COMMIT;
        pSLANE := 0; 
      ELSIF vMINROUND IS NULL AND vSEQ IS NULL THEN
        pSLANE := 999;
      ELSE 
        pSLANE := vMINROUND; 
            
      END IF;
      
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        pSLANE := 999;
      WHEN OTHERS THEN
        pSLANE := 999;
   /*<<END_PROCESS>>
    pSLANE := 999;*/
 END P_STORE_IN_UPD;
 -----------------------------------------------------------------------------
 
END PG_SLANE_DAISHA_PROGRESSIVE;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_DNM_RLTMPLANBYSHF_W
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_DNM_RLTMPLANBYSHF_W" AS

  PROCEDURE MAIN as
    BEGIN
      P_SLANE_DNM_RLTMPLANBYSHF_W;
      P_CALCULATE_ACTUAL;
  END MAIN;
  
  PROCEDURE P_SLANE_DNM_RLTMPLANBYSHF_W AS
    vDATE VARCHAR2(8) ;
   vTIME     VARCHAR2(10) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    --vTIME     VARCHAR2(10) := '00:00:00';
    vSHIFT    VARCHAR2(1) ;
    --vCALDATE  VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vCOUNT   NUMBER(3,0);
    --vTIMEEND VARCHAR2(1) :=TO_CHAR(SYSDATE+1,'HH24:MI:SS');
    vSEQ     NUMBER(7,0);
    
    CURSOR C1 IS SELECT * FROM  T_PRD_PLAN_A3_RLTMPLANBYSHF_W@FROM_EUC_CHTINQ
                 WHERE CAL_DATE = vDATE
                 AND   SHIFT = vSHIFT
                 AND   SEQ   = vSEQ;
                 --AND   LINE_CD = 'TN'; -- FOR TEST
                 --ORDER BY LINE_CD;
    
    REC1     C1%ROWTYPE;
  
  BEGIN
  
  --vDATE
    IF   vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
    ELSE
       vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
    END IF;
    
    --vSHIFT
    IF   vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
    ELSE
      vSHIFT := 'N';
    END IF;
    --vSEQ
    SELECT MAX(SEQ) INTO vSEQ 
    FROM T_PRD_PLAN_A3_RLTMPLANBYSHF_W@FROM_EUC_CHTINQ
    WHERE CAL_DATE = vDATE;
    
   -- DELETE T_SLANE_DNM_RLTMPLANBYSHF_W
    --COMMIT;
      
    FOR REC1 IN C1 LOOP
     
     SELECT COUNT(*) INTO vCOUNT 
     FROM T_SLANE_DNM_RLTMPLANBYSHF_W
     WHERE CAL_DATE = vDATE
     AND SHIFT = vSHIFT
     AND LINE_CD = REC1.LINE_CD;
     
      IF vCOUNT = 0 THEN
      INSERT INTO T_SLANE_DNM_RLTMPLANBYSHF_W(SEQ,
                                              FACTORY_CD,
                                              CAL_DATE,
                                              CAL_TIME,
                                              SHIFT,
                                              LINE_CD,
                                              CELL_NAME,
                                              PLAN_QTY_BY_SHIFT,
                                              REALTIME_PLAN_QTY,
                                              ACTUAL_QTY,
                                              DIFF_QTY,
                                              CAP_QTY,
                                              CYCLE_TIME,
                                              CREATE_DATE,
                                              CREATE_BY,
                                              UPDATE_DATE,
                                              UPDATE_BY,
                                              HISTORY_ENTRY_DATE)
                                      VALUES (REC1.SEQ,
                                              REC1.FACTORY_CD,
                                              REC1.CAL_DATE,
                                              REC1.CAL_TIME,
                                              REC1.SHIFT,
                                              REC1.LINE_CD,
                                              REC1.CELL_NAME,
                                              REC1.PLAN_QTY_BY_SHIFT,
                                              REC1.REALTIME_PLAN_QTY,
                                              REC1.ACTUAL_QTY,
                                              REC1.DIFF_QTY,
                                              REC1.CAP_QTY,
                                              REC1.CYCLE_TIME,
                                              REC1.CREATE_DATE,
                                              REC1.CREATE_BY,
                                              REC1.UPDATE_DATE,
                                              REC1.UPDATE_BY,
                                              REC1.HISTORY_ENTRY_DATE);
                                              
     ELSE 
           UPDATE T_SLANE_DNM_RLTMPLANBYSHF_W
                    SET   SEQ = REC1.SEQ,
                    FACTORY_CD = REC1.FACTORY_CD,
                    CAL_TIME   =  REC1.CAL_TIME,
                    CELL_NAME  = REC1.CELL_NAME,
                    PLAN_QTY_BY_SHIFT =   REC1.PLAN_QTY_BY_SHIFT,
                    REALTIME_PLAN_QTY =  REC1.REALTIME_PLAN_QTY,
                    ACTUAL_QTY  = REC1.ACTUAL_QTY,
                    DIFF_QTY =  REC1.DIFF_QTY,
                    CAP_QTY  =  REC1.CAP_QTY,
                    CYCLE_TIME = REC1.CYCLE_TIME,
                    CREATE_DATE  = REC1.CREATE_DATE,
                    CREATE_BY =  REC1.CREATE_BY,
                    UPDATE_DATE =  REC1.UPDATE_DATE,
                    UPDATE_BY  =   REC1.UPDATE_BY,
                   HISTORY_ENTRY_DATE  =   REC1.HISTORY_ENTRY_DATE
           WHERE  CAL_DATE = vDATE
           AND    FACTORY_CD = REC1.FACTORY_CD
           AND   SHIFT   = vSHIFT
           AND   LINE_CD = REC1.LINE_CD;
          COMMIT;
       null;
      END IF;
      
    END LOOP;
  
    EXCEPTION 
    WHEN  OTHERS THEN
    NULL;
   --END;
      
  END P_SLANE_DNM_RLTMPLANBYSHF_W;
  
    PROCEDURE P_CALCULATE_ACTUAL 
  AS
    vTIME     VARCHAR2(10) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    vSHIFT    VARCHAR2(1) ;
    vCALDATE  VARCHAR2(8) ;
    vCALDATE2 VARCHAR2(8) ;
    vCOUNT    NUMBER(3,0);
    vCOUNTREC2 NUMBER(3,0);
    CURSOR C1 IS 
    SELECT * FROM T_SLANE_DNM_RLTMPLANBYSHF_W
                 WHERE CAL_DATE = vCALDATE
                 AND   SHIFT = vSHIFT ;
                 --AND   LINE_CD = 'TN'; -- FOR TEST
                 --ORDER BY LINE_CD;
    
    REC1     C1%ROWTYPE;
    REC2     V_SLANE_WORKING_TIME%ROWTYPE;
    vQ1     T_SLANE_CALCULATE_ACTUAL.ACTUAL_Q1%TYPE;
    vQ2     T_SLANE_CALCULATE_ACTUAL.ACTUAL_Q2%TYPE;
    vQ3     T_SLANE_CALCULATE_ACTUAL.ACTUAL_Q3%TYPE;
    vQ4     T_SLANE_CALCULATE_ACTUAL.ACTUAL_Q4%TYPE;
  
    BEGIN
        --vDATE
    IF   vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vCALDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
    ELSE
       vCALDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
    END IF;
    
    --vSHIFT
    IF   vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
    ELSE
      vSHIFT := 'N';
    END IF;
        
        
        FOR REC1 IN C1 LOOP
   
          SELECT COUNT(*) INTO vCOUNTREC2
          FROM V_SLANE_WORKING_TIME
          WHERE PLAN_DATE = vCALDATE
          AND   SHIFT   = vSHIFT
          AND   SUBSTR(LINE_CD,1,2) = REC1.LINE_CD;
          
          IF vCOUNTREC2 > 0 THEN
          
          SELECT * INTO REC2
          FROM V_SLANE_WORKING_TIME
          WHERE PLAN_DATE = vCALDATE
          AND   SHIFT   = vSHIFT
          AND   SUBSTR(LINE_CD,1,2) = REC1.LINE_CD;
       
          SELECT COUNT(*) INTO vCOUNT
          FROM T_SLANE_CALCULATE_ACTUAL
          WHERE PLAN_DATE = vCALDATE
          AND   SHIFT   = vSHIFT
          AND   LINE_CD = REC2.LINE_CD;
           
           IF vCOUNT = 0 THEN
             INSERT INTO T_SLANE_CALCULATE_ACTUAL(FACTORY_CD, 
                                                  MODEL,
                                                  PLAN_DATE,
                                                  LINE_CD,
                                                  SHIFT,
                                                  ACTUAL_Q1,
                                                  ACTUAL_Q2,
                                                  ACTUAL_Q3,
                                                  ACTUAL_Q4,
                                                  ACTUAL_Q5,
                                                  CREATE_DATE,
                                                  CREATE_BY,
                                                  UPDATE_DATE,
                                                  UPDATE_BY)
                                           VALUES(REC1.FACTORY_CD,
                                                  REC2.MODEL,
                                                  REC2.PLAN_DATE,
                                                  REC2.LINE_CD,
                                                  REC2.SHIFT,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  SYSDATE,
                                                  'SYSTEM',
                                                  SYSDATE,
                                                  'SYSTEM');
                           COMMIT;
           ELSE
                SELECT nvl(ACTUAL_Q1,0),nvl(ACTUAL_Q2,0), nvl(ACTUAL_Q3,0),nvl(ACTUAL_Q4,0) 
                INTO vQ1,vQ2,vQ3,vQ4
                FROM T_SLANE_CALCULATE_ACTUAL
                WHERE PLAN_DATE = vCALDATE
                AND   SHIFT   = vSHIFT
                AND   LINE_CD = REC2.LINE_CD;
              --IF vSHIFT = 'D' THEN
                    IF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.WORK1_BEGIN AND REC2.WORK1_END THEN
                      UPDATE T_SLANE_CALCULATE_ACTUAL
                      SET   ACTUAL_Q1 = REC1.ACTUAL_QTY
                      WHERE PLAN_DATE = vCALDATE
                      AND   SHIFT   = vSHIFT
                      AND   LINE_CD = REC2.LINE_CD;
                    
                    ELSIF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.WORK2_BEGIN AND REC2.WORK2_END THEN
                     -- Result = ACTUAL_Q1 + REC1.ACTUAL_QTY
                      UPDATE T_SLANE_CALCULATE_ACTUAL
                      SET   ACTUAL_Q2 =  REC1.ACTUAL_QTY - vQ1
                      WHERE PLAN_DATE = vCALDATE
                      AND   SHIFT   = vSHIFT
                      AND   LINE_CD = REC2.LINE_CD;
                      
                    ELSIF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.WORK3_BEGIN AND REC2.WORK3_END THEN
                      UPDATE T_SLANE_CALCULATE_ACTUAL
                      SET   ACTUAL_Q3 = REC1.ACTUAL_QTY - (vQ2 + vQ1)
                      WHERE PLAN_DATE = vCALDATE
                      AND   SHIFT   = vSHIFT
                      AND   LINE_CD = REC2.LINE_CD;
                    
                    ELSIF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.WORK4_BEGIN AND REC2.WORK4_END THEN
                      UPDATE T_SLANE_CALCULATE_ACTUAL
                      SET   ACTUAL_Q4 = REC1.ACTUAL_QTY -(vQ3 + vQ2 + vQ1)
                      WHERE PLAN_DATE = vCALDATE
                      AND   SHIFT   = vSHIFT
                      AND   LINE_CD = REC2.LINE_CD;
                    
                     ELSIF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.OVERTIME_BEGIN AND REC2.OVERTIME_END THEN 
                      UPDATE T_SLANE_CALCULATE_ACTUAL
                      SET   ACTUAL_Q5 = REC1.ACTUAL_QTY -(vQ4 + vQ3 + vQ2 + vQ1)
                      WHERE PLAN_DATE = vCALDATE
                      AND   SHIFT   = vSHIFT
                      AND   LINE_CD = REC2.LINE_CD;
               /* ELSE  
                        IF SUBSTR(REC2.WORK2_END,0,2) = '00' THEN
                         vCALDATE2 := TO_CHAR(SYSDATE+1,'YYYYMMDD');
                         ELSE
                         vCALDATE2 := TO_CHAR(SYSDATE,'YYYYMMDD');
                         END IF;
                
                        IF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.WORK1_BEGIN AND REC2.WORK1_END THEN
                          UPDATE T_SLANE_CALCULATE_ACTUAL
                          SET   ACTUAL_Q1 = REC1.ACTUAL_QTY
                          WHERE PLAN_DATE = vCALDATE
                          AND   SHIFT   = vSHIFT
                          AND   LINE_CD = REC2.LINE_CD;
                        
                        ELSIF TO_CHAR(TO_DATE(vCALDATE,'YYYYMMDD')||TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI')) BETWEEN TO_CHAR(TO_DATE(vCALDATE,'YYYYMMDD')||TO_CHAR(TO_DATE(REC2.WORK2_BEGIN,'HH24:MI'),'HH24:MI')) AND TO_CHAR(TO_DATE(vCALDATE2,'YYYYMMDD')||TO_CHAR(TO_DATE(REC2.WORK2_END,'HH24:MI'),'HH24:MI')) THEN
                         -- Result = ACTUAL_Q1 + REC1.ACTUAL_QTY
                          UPDATE T_SLANE_CALCULATE_ACTUAL
                          SET   ACTUAL_Q2 =  REC1.ACTUAL_QTY - vQ1
                          WHERE PLAN_DATE = vCALDATE
                          AND   SHIFT   = vSHIFT
                          AND   LINE_CD = REC2.LINE_CD;
                          
                        ELSIF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.WORK3_BEGIN AND REC2.WORK3_END THEN
                          UPDATE T_SLANE_CALCULATE_ACTUAL
                          SET   ACTUAL_Q3 = REC1.ACTUAL_QTY - (vQ2 + vQ1)
                          WHERE PLAN_DATE = vCALDATE
                          AND   SHIFT   = vSHIFT
                          AND   LINE_CD = REC2.LINE_CD;
                        
                        ELSIF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.WORK4_BEGIN AND REC2.WORK4_END THEN
                          UPDATE T_SLANE_CALCULATE_ACTUAL
                          SET   ACTUAL_Q4 = REC1.ACTUAL_QTY -(vQ3 + vQ2 + vQ1)
                          WHERE PLAN_DATE = vCALDATE
                          AND   SHIFT   = vSHIFT
                          AND   LINE_CD = REC2.LINE_CD;
                        
                         ELSIF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.OVERTIME_BEGIN AND REC2.OVERTIME_END THEN 
                          UPDATE T_SLANE_CALCULATE_ACTUAL
                          SET   ACTUAL_Q5 = REC1.ACTUAL_QTY -(vQ4 + vQ3 + vQ2 + vQ1)
                          WHERE PLAN_DATE = vCALDATE
                          AND   SHIFT   = vSHIFT
                          AND   LINE_CD = REC2.LINE_CD;
                  END IF;*/
                -- END IF;
                
                END IF; 
               --NULL;
                COMMIT;
              END IF; 
            END IF; 
        END LOOP;
     
    END P_CALCULATE_ACTUAL;
  PROCEDURE P_GETDATA_FROM_DNM AS 
    
    vTIME     VARCHAR2(10) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    vCALDATE  VARCHAR2(8) ;
    
      BEGIN
        
             --vDATE
        IF   vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
          vCALDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
        ELSE
          vCALDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
        END IF;
        
        DELETE FROM T_SLANE_DNM_WORKSHIFT_CD;
      
        INSERT INTO T_SLANE_DNM_WORKSHIFT_CD
        SELECT * FROM T_PRD_PLAN_A3_WORKSHIFT_CD@FROM_EUC_CHTINQ;
        COMMIT;
        
        DELETE T_SLANE_DNM_OVERTIME_CD;
        
        INSERT INTO T_SLANE_DNM_OVERTIME_CD
        SELECT * FROM T_PRD_PLAN_A3_OVERTIME_CD@FROM_EUC_CHTINQ;
        COMMIT;

        DELETE T_SLANE_DNM_WORKSHIFT_N_CAP
        WHERE PLAN_DATE = vCALDATE;
        
        INSERT INTO T_SLANE_DNM_WORKSHIFT_N_CAP
        SELECT * FROM T_PRD_PLAN_A3_WORKSHIFT_N_CAP@FROM_EUC_CHTINQ
        WHERE PLAN_DATE = vCALDATE;
        COMMIT;
        
        
        
    END P_GETDATA_FROM_DNM;
    
  
  

END PG_SLANE_DNM_RLTMPLANBYSHF_W;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_INITIAL_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_INITIAL_MASTER" AS

   PROCEDURE P_INITIAL_DATA_INQ     (pFACTORY_CD     VARCHAR2,
                                    pMODEL          VARCHAR2,
                                    pSHIFT          VARCHAR2,
                                    --pPLAN_DATE      VARCHAR2,
                                    pLINE_CD        VARCHAR2,
                                    pDAISHA_TYPE    VARCHAR2,
                                    pDAISHA_GROUP   VARCHAR2,
                                    pLOCATION       VARCHAR2,
                                    pROUND          VARCHAR2,
                                    pCURSOR         OUT T_CURSOR) IS
                                    
        wk_select   VARCHAR2(1000); 
        wk_where    VARCHAR2(1000);   
        
  BEGIN
        
        IF pFACTORY_CD IS NOT NULL THEN
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    		IF pMODEL IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF pSHIFT IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND SHIFT = '||''''||pSHIFT||''''; 
   			End IF;
        
        IF pLINE_CD IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
        IF pDAISHA_TYPE IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND DAISHA_TYPE = '||''''||pDAISHA_TYPE||'''';
   			End IF;
        IF pDAISHA_GROUP IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND DAISHA_GROUP = '||''''||pDAISHA_GROUP||'''';
   			End IF;
        IF pLOCATION IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND LOCATION = '||''''||pLOCATION||'''';
   			End IF;
        IF pROUND is not null then
    	 				wk_where := wk_where||' AND ROUND = '||''''||pROUND||'''';
   			End IF;
        
    	--*** Add WHERE and substr AND
    		IF wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		End IF;
    	
           wk_select := 'SELECT * FROM T_SLANE_DAISHA_PROGRESSIVE ' ||wk_where||' AND PLAN_DATE = TO_CHAR(SYSDATE,'||''''||'YYYYMMDD'||''''||') AND LOCATION <> '''||'EMPTY'||''' ORDER BY MODEL, LINE_CD, SEQ';
           
  		--*** Execute cursor
   			OPEN pCURSOR FOR wk_select;
    
  END P_INITIAL_DATA_INQ;
-------------------------------------------------------------------------------
  PROCEDURE P_INITIAL_DATA_UPD       (pFACTORY_CD     VARCHAR2,
                                      pMODEL          VARCHAR2,
                                      pSHIFT          VARCHAR2,
                                      pLINE_CD        VARCHAR2,
                                      pCELL_NAME      VARCHAR2,
                                      pDAISHA_TYPE    VARCHAR2,
                                      pDAISHA_GROUP   VARCHAR2,
                                      pLOCATION       VARCHAR2,
                                      pROUND          VARCHAR2,
                                      pSLANE          OUT NUMBER) AS 
    
    vDATE      VARCHAR2(8):= TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME      VARCHAR2(8):= TO_CHAR(SYSDATE,'HH24:MI:SS');
    vMAXSEQ    NUMBER(9,0);
    vMAXROUND  NUMBER(2,0);
    vCNT_SEQ   NUMBER(9,0);
    vCNT_ROUND NUMBER(9,0);
    vSEQ       NUMBER(9,0);
    vORDER     NUMBER(2,0);
    vNEWORDER  NUMBER(2,0);
    vCOUNT     NUMBER(9,0);
    vROUND     NUMBER(2,0);
    vDES       VARCHAR2(8);
    
    BEGIN
      
        SELECT COUNT(SEQ) INTO vCNT_SEQ
        FROM T_SLANE_DAISHA_PROGRESSIVE
        WHERE FACTORY_CD = pFACTORY_CD
        AND MODEL = pMODEL
        AND SHIFT = pSHIFT
        AND PLAN_DATE = vDATE
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pDAISHA_TYPE
        AND DAISHA_GROUP = pDAISHA_GROUP
        AND ROUND = pROUND;    
        
        IF vCNT_SEQ = 1 THEN 
          SELECT NVL(SEQ,0) INTO vSEQ
          FROM T_SLANE_DAISHA_PROGRESSIVE
          WHERE FACTORY_CD = pFACTORY_CD
          AND MODEL = pMODEL
          AND SHIFT = pSHIFT
          AND PLAN_DATE = vDATE
          AND LINE_CD = pLINE_CD
          AND DAISHA_TYPE = pDAISHA_TYPE
          AND DAISHA_GROUP = pDAISHA_GROUP
          AND ROUND = pROUND;  
          
          DELETE T_SLANE_DAISHA_PROGRESSIVE
          WHERE FACTORY_CD = pFACTORY_CD
          AND   MODEL      = pMODEL
          AND   PLAN_DATE  = vDATE
          AND   SHIFT      = pSHIFT
          AND   LINE_CD    = pLINE_CD
          AND   DAISHA_TYPE = pDAISHA_TYPE
          AND   DAISHA_GROUP = pDAISHA_GROUP
          AND   SEQ >= vSEQ;  --???????????????
          COMMIT;
        END IF;
        pSLANE := 1; 
      
      SELECT NVL(MAX(ROUND),0)+1 INTO vMAXROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE FACTORY_CD = pFACTORY_CD
      AND MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND SHIFT = pSHIFT
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE
      AND DAISHA_GROUP = pDAISHA_GROUP;
      
      SELECT NVL(MAX(SEQ),0)+1 INTO vMAXSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE FACTORY_CD = pFACTORY_CD
      AND MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE
      AND DAISHA_GROUP = pDAISHA_GROUP;   
          
      SELECT NVL(MAX(ORDER_NO),1) INTO vNEWORDER
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE FACTORY_CD = pFACTORY_CD
      AND MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND SHIFT = pSHIFT
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE
      AND DAISHA_GROUP = pDAISHA_GROUP;          

      SELECT  NVL(COUNT(*),0) INTO vCOUNT
      FROM T_SLANE_DAISHA_PROGRESSIVE 
      WHERE FACTORY_CD = pFACTORY_CD
      AND MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND SHIFT = pSHIFT
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND ORDER_NO = vNEWORDER;          
      
      --------------------------------------IMPROVEMENT------------------
      IF pDAISHA_TYPE = 'KT' THEN  
        IF vCOUNT = 0 OR vCOUNT = 1 THEN
           vNEWORDER := vNEWORDER;
        ELSE
           vNEWORDER := vNEWORDER+1;
        END IF;    
      ELSE 
        IF vCOUNT = 0 THEN
           vNEWORDER := vNEWORDER;
        ELSE
           vNEWORDER := vNEWORDER+1;
        END IF;    
      END IF;
      --------------------------------------IMPROVEMENT------------------
      
      IF pDAISHA_TYPE = 'KT' THEN
        vDES := 'KITTING';
      ELSE
        vDES := 'COMMON';
      END IF;
      
      IF vMAXROUND = pROUND THEN
        vROUND := TO_NUMBER(pROUND); 
      
      
          IF pLOCATION = 'ASSY' THEN
              
         /* SELECT COUNT(ORDER_NO) INTO vCNT_ROUND
          FROM T_SLANE_PROGRESS_ORDER_DAISHA
          WHERE FACTORY_CD = pFACTORY_CD
          AND MODEL = pMODEL
          AND SHIFT = pSHIFT
          AND PLAN_DATE = vDATE
          AND LINE_CD = pLINE_CD
          AND DAISHA_TYPE = pDAISHA_TYPE
          AND DAISHA_GROUP = pDAISHA_GROUP
          AND ORDER_NO = TO_NUMBER(pROUND);    
              
            IF vCNT_ROUND = 1 THEN 
              SELECT NVL(ROUND,0) INTO vORDER
              FROM T_SLANE_PROGRESS_ORDER_DAISHA
              WHERE FACTORY_CD = pFACTORY_CD
              AND MODEL = pMODEL
              AND SHIFT = pSHIFT
              AND PLAN_DATE = vDATE
              AND LINE_CD = pLINE_CD
              AND DAISHA_TYPE = pDAISHA_TYPE
              AND DAISHA_GROUP = pDAISHA_GROUP
              AND ORDER_NO = TO_NUMBER(pROUND);
            
              DELETE T_SLANE_PROGRESS_ORDER_DAISHA
              WHERE FACTORY_CD = pFACTORY_CD
              AND   MODEL      = pMODEL
              AND   PLAN_DATE  = vDATE
              AND   SHIFT      = pSHIFT
              AND   LINE_CD    = pLINE_CD
              AND   DAISHA_TYPE = pDAISHA_TYPE
              AND   DAISHA_GROUP = pDAISHA_GROUP
              AND   ORDER_NO   >= TO_NUMBER(pROUND);
              COMMIT;
              pSLANE := 2; 
            END IF; 
          */
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vMAXSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  pLOCATION,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  vNEWORDER);
            COMMIT;    
            pSLANE := 3; 
               
            /*INSERT INTO T_SLANE_PROGRESS_ORDER_DAISHA(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, DAISHA_TYPE, DAISHA_GROUP,
                                                      ROUND, ORDER_NO, PLAN_TIME, ACTUAL_TIME, DIFF, MIN_BLANE)
                                              VALUES (pFACTORY_CD,
                                                      pMODEL,
                                                      vDATE,
                                                      pSHIFT,
                                                      pLINE_CD,
                                                      pDAISHA_TYPE,
                                                      pDAISHA_GROUP,
                                                      vNEWORDER,
                                                      vROUND,
                                                      vTIME,
                                                      'xx:xx:xx',
                                                      NULL,
                                                      vTIME); 
            COMMIT;
            pSLANE := 4; */
                       
          ELSIF pLOCATION = 'KITTING' OR pLOCATION = 'B-LANE' THEN
          
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vMAXSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  pLOCATION,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  vNEWORDER);
                                                  
            /*INSERT INTO T_SLANE_PROGRESS_ORDER_DAISHA(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, DAISHA_TYPE, DAISHA_GROUP,
                                                      ROUND, ORDER_NO, PLAN_TIME, ACTUAL_TIME, DIFF, MIN_BLANE)
                                              VALUES (pFACTORY_CD,
                                                      pMODEL,
                                                      vDATE,
                                                      pSHIFT,
                                                      pLINE_CD,
                                                      pDAISHA_TYPE,
                                                      pDAISHA_GROUP,
                                                      vNEWORDER,
                                                      vROUND,
                                                      vTIME,
                                                      NULL,
                                                      NULL,
                                                      NULL);                                         
            COMMIT;
            pSLANE := 4;     */         
            
          ELSIF pLOCATION = 'IN KITTING' OR pLOCATION = 'IN B-LANE' THEN
          
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vMAXSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  pLOCATION,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  NULL,
                                                  NULL,
                                                  vNEWORDER);
                                                  
          /*  INSERT INTO T_SLANE_PROGRESS_ORDER_DAISHA(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, DAISHA_TYPE, DAISHA_GROUP,
                                                      ROUND, ORDER_NO, PLAN_TIME, ACTUAL_TIME, DIFF, MIN_BLANE)
                                              VALUES (pFACTORY_CD,
                                                      pMODEL,
                                                      vDATE,
                                                      pSHIFT,
                                                      pLINE_CD,
                                                      pDAISHA_TYPE,
                                                      pDAISHA_GROUP,
                                                      vNEWORDER,
                                                      vROUND,
                                                      vTIME,
                                                      'xx:xx:xx',
                                                      NULL,
                                                      NULL);                                         
            COMMIT;
            pSLANE := 4; */
          ELSIF pLOCATION = 'S-LANE' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vMAXSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  pLOCATION,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  --vORDER ????????????? NULL
                                                  NULL);
            pSLANE := 4;                                       
          ELSIF pLOCATION = 'PICKING' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vMAXSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  pLOCATION,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  --*/vORDER
                                                  NULL);
            pSLANE := 4;                                       
          ELSE 
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vMAXSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  NULL,
                                                  vDATE,
                                                  vTIME,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL);
            pSLANE := 4; 
         END IF;
         -- pSLANE := 1; 
         ELSE
         pSLANE := 888||vMAXROUND; --ROUND ????????????????????
       END IF;
        
   /* EXCEPTION 
    WHEN NO_DATA_FOUND THEN 
      pSLANE := 999;*/
      
    END P_INITIAL_DATA_UPD;
    
END PG_SLANE_INITIAL_MASTER;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_ORDER_MATRIX_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_ORDER_MATRIX_MASTER" AS

 
  PROCEDURE SLANE_ORDER_MATRIX_MASTER_IU (
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pDAISHA_TYPE VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pPART_NO VARCHAR2,
                                        pDIM_NO VARCHAR2,
                                        pPART_NAME VARCHAR2,
                                        pSUPP_CD VARCHAR2,
                                        pSUPP_NAME VARCHAR2,
                                        pFLG_DIFF VARCHAR2,
                                        pCOLOR VARCHAR2,
                                        pSNP NUMBER,
                                        pQTY VARCHAR2,
                                        pORDER_01 NUMBER,
                                        pORDER_02 NUMBER,
                                        pORDER_03 NUMBER,
                                        pORDER_04 NUMBER,
                                        pORDER_05 NUMBER,
                                        pORDER_06 NUMBER,
                                        pORDER_07 NUMBER,
                                        pORDER_08 NUMBER,
                                        pORDER_09 NUMBER,
                                        pORDER_10 NUMBER,
                                        pORDER_11 NUMBER,
                                        pORDER_12 NUMBER,
                                        pORDER_13 NUMBER,
                                        pORDER_14 NUMBER,
                                        pORDER_15 NUMBER,
                                        pORDER_16 NUMBER,
                                        pORDER_17 NUMBER,
                                        pORDER_18 NUMBER,
                                        pORDER_19 NUMBER,
                                        pORDER_20 NUMBER,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pSLANE OUT NUMBER) AS
                                        
  BEGIN
    -- TODO: Implementation required for PROCEDURE PG_SLANE_DAISHA_MASTER.SLANE_DAISHA_MASTER_INS_UPD
    INSERT INTO T_SLANE_METRIX_PART_MASTER
                (  FACTORY_CD,
                   MODEL,
                   DAISHA_TYPE,
                   DAISHA_GROUP,
                   PART_NO,
                   DIM_NO,
                   PART_NAME,
                   SUPP_CD,
                   SUPP_NAME,
                   FLG_DIFF,
                   COLOR,
                   SNP,
                   QTY,
                   ORDER_01,
                   ORDER_02,
                   ORDER_03,
                   ORDER_04,
                   ORDER_05,
                   ORDER_06,
                   ORDER_07,
                   ORDER_08,
                   ORDER_09,
                   ORDER_10,
                   ORDER_11,
                   ORDER_12,
                   ORDER_13,
                   ORDER_14,
                   ORDER_15,
                   ORDER_16,
                   ORDER_17,
                   ORDER_18,
                   ORDER_19,
                   ORDER_20,
                   CREATE_DATE,
                   CREATE_BY,
                   UPDATE_DATE,
                   UPDATE_BY
                ) 
        VALUES(    pFACTORY_CD,
                   pMODEL,
                   pDAISHA_TYPE,
                   pDAISHA_GROUP,
                   pPART_NO,
                   pDIM_NO,
                   pPART_NAME,
                   pSUPP_CD,
                   pSUPP_NAME,
                   pFLG_DIFF,
                   pCOLOR,
                   pSNP,
                   pQTY,
                   pORDER_01,
                   pORDER_02,
                   pORDER_03,
                   pORDER_04,
                   pORDER_05,
                   pORDER_06,
                   pORDER_07,
                   pORDER_08,
                   pORDER_09,
                   pORDER_10,
                   pORDER_11,
                   pORDER_12,
                   pORDER_13,
                   pORDER_14,
                   pORDER_15,
                   pORDER_16,
                   pORDER_17,
                   pORDER_18,
                   pORDER_19,
                   pORDER_20,
                   sysdate,
                   pCREATE_BY,
                   sysdate,
                   pUPDATE_BY
               )  ;
   
    pSLANE := 1;
    
 EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
   
   UPDATE T_SLANE_METRIX_PART_MASTER SET 
                   SNP = pSNP,
                   QTY = pQTY,
                   ORDER_01 = pORDER_01,
                   ORDER_02 = pORDER_02,
                   ORDER_03 = pORDER_03,
                   ORDER_04 = pORDER_04,
                   ORDER_05 = pORDER_05,
                   ORDER_06 = pORDER_06,
                   ORDER_07 = pORDER_07,
                   ORDER_08 = pORDER_08,
                   ORDER_09 = pORDER_09,
                   ORDER_10 = pORDER_10,
                   ORDER_11 = pORDER_11,
                   ORDER_12 = pORDER_12,
                   ORDER_13 = pORDER_13,
                   ORDER_14 = pORDER_14,
                   ORDER_15 = pORDER_15,
                   ORDER_16 = pORDER_16,
                   ORDER_17 = pORDER_17,
                   ORDER_18 = pORDER_18,
                   ORDER_19 = pORDER_19,
                   ORDER_20 = pORDER_20,
                   UPDATE_DATE = SYSDATE,
                   UPDATE_BY = pUPDATE_BY
   WHERE
   FACTORY_CD = pFACTORY_CD
   AND MODEL = pMODEL 
   AND DAISHA_TYPE = pDAISHA_TYPE 
   AND DAISHA_GROUP = pDAISHA_GROUP
   AND PART_NO = pPART_NO 
   AND DIM_NO = pDIM_NO
   AND SUPP_CD = pSUPP_CD;
   
    pSLANE := 1; 
  
  END SLANE_ORDER_MATRIX_MASTER_IU;

-----------------------------------------------------------------------------

  PROCEDURE SLANE_ORDER_MATRIX_MASTER_SEL (
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pDAISHA_TYPE VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pPART_NO VARCHAR2,
                                        pFLG_DIFF VARCHAR2,
                                        pSNP NUMBER,
                                        pSNP_NO VARCHAR2,
                                        pQTY VARCHAR2,
                                       -- pQTY_NO VARCHAR2,
                                        pCREATE_DATE VARCHAR2,
                                        pDATE_FROM VARCHAR2,
                                        pDATE_TO VARCHAR2,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pCUERSOR2 OUT T_CURSOR) IS
          wk_select    					Varchar2(2000) := NULL; 
   				wk_where              Varchar2(2000) := NULL;
          --*** Check condition for search
    BEGIN
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    		IF pMODEL is not null then
    	 				wk_where := wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
    		IF pDAISHA_TYPE is not null then
    	 				wk_where := wk_where||' AND DAISHA_TYPE = '||''''||pDAISHA_TYPE||'''';
    		End IF;
        IF pDAISHA_GROUP is not null then
    	 				wk_where := wk_where||' AND DAISHA_GROUP = '||''''||pDAISHA_GROUP||'''';
   			End IF;
        
        IF pPART_NO is not null then
    	 				wk_where := wk_where||' AND PART_NO = '||''''||pPART_NO||'''';
   			End IF;
    	
    		IF pFLG_DIFF is not null then
    	 				wk_where := wk_where||' AND FLG_DIFF = '||''''||pFLG_DIFF||'''';
    		End IF;
      
        IF pSNP is not null then
    	 				wk_where := wk_where||' AND SNP '||pSNP_NO||''||pSNP||'';
   			End IF;
    		IF pQTY is not null then
    	 				wk_where := wk_where||' AND QTY = '||''''||pQTY||'''';
    		End IF;
        
    		IF pCREATE_DATE is not null then

    					wk_where := wk_where||' AND to_char('||pCREATE_DATE||','||''''||'YYYYMMDD'||''''||')'
              ||'BETWEEN to_char(to_date('||''''||pDATE_FROM||''''||','||''''||'dd-MON-yyyy'||''''||'),'||''''||'YYYYMMDD'||''''||')
               AND to_char(to_date('||''''||pDATE_TO||''''||','||''''||'dd-MON-yyyy'||''''||'),'||''''||'YYYYMMDD'||''''||')';
                        	
        END IF;
         IF pCREATE_BY is not null then
    	 				wk_where := wk_where||' AND CREATE_BY = '||''''||pCREATE_BY||'''';
   			End IF;
        IF pUPDATE_BY is not null then
    	 				wk_where := wk_where||' AND UPDATE_BY = '||''''||pUPDATE_BY||'''';
   			End IF;
 
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT * FROM T_SLANE_METRIX_PART_MASTER ' ||wk_where||' ORDER BY UPDATE_DATE DESC';
   
  		--*** Execute cursor
   			OPEN pCUERSOR2 FOR wk_select;

  END SLANE_ORDER_MATRIX_MASTER_SEL;
    
   ----------------------------------------------------------------------------- 
  PROCEDURE SLANE_ORDER_MATRIX_MASTER_DEL (   pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pDAISHA_TYPE VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pPART_NO VARCHAR2,
                                        pDIM_NO VARCHAR2,
                                        pSUPP_CD VARCHAR2,
                                        pSLANE OUT NUMBER)AS
   BEGIN
      DELETE FROM T_SLANE_METRIX_PART_MASTER WHERE 
      FACTORY_CD = pFACTORY_CD
      AND MODEL = pMODEL 
      AND DAISHA_TYPE = pDAISHA_TYPE
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND PART_NO = pPART_NO
      AND DIM_NO = pDIM_NO
      AND SUPP_CD = pSUPP_CD;
      
      pSLANE := 1;
      
   END SLANE_ORDER_MATRIX_MASTER_DEL; 
  

END PG_SLANE_ORDER_MATRIX_MASTER;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_PLAN_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_PLAN_MASTER" AS

   PROCEDURE P_SLANE_PLAN_MASTER_SEL(
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pMODEL VARCHAR2,
                               
                                   
                                   pCUERSOR OUT T_CURSOR
                                  ) IS
           wk_select VARCHAR(1000);         
           wk_where  Varchar2(1000);
          --*** Check condition for search
    BEGIN
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
         IF pMODEL_SEQ is not null then
    	 				wk_where :=  wk_where||' AND MODEL_SEQ = '||''''||pMODEL_SEQ||'''';
   			End IF;
    		IF pMODEL is not null then
    	 				wk_where := wk_where||' AND MODEL = '||''''||pMODEL||'''';
    		End IF;
        
       /* IF pMODEL_ALL is not null then
    	 				wk_where := wk_where||' AND MODEL_ALL = '||''''||pMODEL_ALL||'''';
    		End IF;*/
        
        if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
        
   					wk_select := 'SELECT * FROM V_PRD_PLAN_A3_MODEL_MS ' ||wk_where||' ORDER BY MODEL_SEQ DESC';
            
   OPEN pCUERSOR FOR wk_select;
  END P_SLANE_PLAN_MASTER_SEL;

END PG_SLANE_PLAN_MASTER;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_PRODUCTION_PLAN
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_PRODUCTION_PLAN" AS

 PROCEDURE P_SLANE_PRODUCTION_PLAN_SEL(
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pPLAN_DATE VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pCUERSOR OUT T_CURSOR
                                  )  IS
                                   
           wk_select    Varchar2(1000);         
           wk_where     Varchar2(1000);
      
    BEGIN
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
         IF pMODEL_SEQ is not null then
    	 				wk_where :=  wk_where||' AND MODEL_SEQ = '||''''||pMODEL_SEQ||'''';
   			End IF;
    		IF pPLAN_DATE is not null then
    	 				wk_where := wk_where||' AND PLAN_DATE = '||''''||pPLAN_DATE||'''';
    		End IF;
         IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
        if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
        
   					wk_select := 'SELECT * FROM T_SLANE_PRODUCTION_PLAN ' ||wk_where||' ORDER BY MODEL_SEQ,SHIFT,LINE_CD,PRIORITY';
            
   OPEN pCUERSOR FOR wk_select;
  END P_SLANE_PRODUCTION_PLAN_SEL;

END PG_SLANE_PRODUCTION_PLAN;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_REC_EMPTY_DAISHA
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_REC_EMPTY_DAISHA" AS

  PROCEDURE P_SLANE_REC_EMP_DAISHA_INSUP (
                                              pFACTORY_CD   VARCHAR2,
                                              pMODEL        VARCHAR2,
                                              pLINE_CD      VARCHAR2,
                                              pCELL_NAME    VARCHAR2,
                                              pDAISHA_TYPE  VARCHAR2,
                                              pDAISHA_GROUP VARCHAR2,
                                              pROUND        NUMBER,
                                              pTOTAL_EMPTY  VARCHAR2,
                                              pSLANE        OUT NUMBER)AS
      vCOUNT    NUMBER;    
      vDATE     VARCHAR2(8) ;
      vTIME     VARCHAR2(10) := TO_CHAR(SYSDATE,'HH24:MI:SS');
      --vTIME     VARCHAR2(10) := '23:23:00' ;
      vSHIFT    VARCHAR2(1) ;
      vSEQ      NUMBER; 
      
  BEGIN
  
    IF   vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
       vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
       --vDATE := '20180707' ;
    ELSE
       vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
    END IF;
    
    --vSHIFT
    IF   vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
    ELSE
      vSHIFT := 'N';
    END IF;
                   
      SELECT COUNT(*) INTO vCOUNT 
                   FROM T_SLANE_REC_EMPTY_DAISHA
                   WHERE CAL_DATE = vDATE
                   AND MODEL = pMODEL 
                   AND LINE_CD = pLINE_CD
                   AND SHIFT = vSHIFT
                   AND DAISHA_TYPE = pDAISHA_TYPE 
                   AND DAISHA_GROUP = pDAISHA_GROUP;
      
    /*  SELECT SEQ INTO vSEQ 
                   FROM T_SLANE_DAISHA_PROGRESSIVE
                   WHERE PLAN_DATE = vDATE
                   AND MODEL = pMODEL 
                   AND LINE_CD = pLINE_CD
                   AND SHIFT = vSHIFT
                   AND DAISHA_TYPE = pDAISHA_TYPE 
                   AND DAISHA_GROUP = pDAISHA_GROUP
                   AND ROUND = pROUND
                   AND LOCATION = 'EMPTY';
                   
       INSERT INTO T_SLANE_TEMP_PROCESS   (   MODEL,
                                             PLAN_DATE,
                                             SHIFT,
                                             LINE_CD,
                                             DAISHA_TYPE,
                                             DAISHA_GROUP,
                                             SEQ,
                                             ROUND,
                                             DESTINATION,
                                             COLOR,
                                             LOCATION,
                                             PROCESS_ID,
                                             PROCESS_NAME,
                                             STATUS)
                               VALUES    (   pMODEL,
                                             vDATE,
                                             vSHIFT,
                                             pLINE_CD,
                                             pDAISHA_TYPE,
                                             pDAISHA_GROUP,
                                             vSEQ,
                                             pROUND,
                                             'KITTING',
                                             NULL,
                                             'EMPTY',
                                             1,
                                             'REC_EMPTY',
                                             NULL);                                 
          COMMIT;             */
                   
      IF  vCOUNT = 0  THEN
         DELETE FROM T_SLANE_REC_EMPTY_DAISHA
                   WHERE CAL_DATE = vDATE
                   AND MODEL = pMODEL 
                   AND LINE_CD = pLINE_CD
                   AND SHIFT = 'D'
                   AND DAISHA_TYPE = pDAISHA_TYPE 
                   AND DAISHA_GROUP = pDAISHA_GROUP;
                   -- TODO: Implementation required for PROCEDURE PG_SLANE_REC_EMPTY_DAISHA.P_SLANE_REC_EMP_DAISHA_INSUP
       END IF; 
    INSERT INTO T_SLANE_REC_EMPTY_DAISHA
                (
                  FACTORY_CD,
                  MODEL,
                  CAL_DATE,
                  SHIFT,
                  LINE_CD,
                  CELL_NAME,
                  DAISHA_TYPE,
                  DAISHA_GROUP,
                  TOTAL_EMPTY,
                  CREATE_DATE,
                  UPDATE_DATE,
                  ROUND
                )
                VALUES
                (
                  pFACTORY_CD,
                  pMODEL,
                  vDATE,
                  vSHIFT,
                  pLINE_CD,
                  pCELL_NAME,
                  pDAISHA_TYPE,
                  pDAISHA_GROUP,
                  pTOTAL_EMPTY,
                  sysdate,
                  sysdate,
                  pROUND
                );
                 
                  pSLANE := 1;
        
            EXCEPTION
                  WHEN DUP_VAL_ON_INDEX THEN
                   UPDATE T_SLANE_REC_EMPTY_DAISHA SET 
                   TOTAL_EMPTY = TOTAL_EMPTY + 1,
                   UPDATE_DATE = SYSDATE,
                   ROUND = pROUND
                   WHERE
                   FACTORY_CD = pFACTORY_CD
                   AND CAL_DATE = vDATE
                   AND MODEL = pMODEL 
                   AND LINE_CD = pLINE_CD
                   AND SHIFT = vSHIFT
                   AND DAISHA_TYPE = pDAISHA_TYPE 
                   AND DAISHA_GROUP = pDAISHA_GROUP;
                   COMMIT;                  
                   pSLANE := 2; 
                 
                   
  END P_SLANE_REC_EMP_DAISHA_INSUP;
  -----------------------------------------------------------------------------
PROCEDURE P_SLANE_REC_EMP_DAISHA_SEL (
                                              pFACTORY_CD    VARCHAR2,
                                              pMODEL         VARCHAR2,
                                              pLINE_CD       VARCHAR2,
                                              pCELL_NAME     VARCHAR2,
                                              pDAISHA_TYPE   VARCHAR2,
                                              pDAISHA_GROUP  VARCHAR2,
                                              pROUND        NUMBER,
                                              pCUERSOR       OUT T_CURSOR)IS
          wk_select   VARCHAR2(1000); 
   				wk_where    VARCHAR2(1000);
          vDATE       VARCHAR2(8) ;
          vTIME       VARCHAR2(10) := TO_CHAR(SYSDATE,'HH24:MI:SS');
          --vTIME       VARCHAR2(10) := '23:23:00';
          --*** Check condition for search
    BEGIN
      --vDATE
    IF   vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
        --vDATE := '20180707' ;
    ELSE
       vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
    END IF;
    
    
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
         IF vDATE is not null then
    	 				wk_where :=  wk_where||' AND CAL_DATE = '||''''||vDATE||'''';
   			End IF; 
    		IF pMODEL is not null then
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
    		IF pCELL_NAME is not null then
    	 				wk_where := wk_where||' AND CELL_NAME = '||''''||pCELL_NAME||'''';
    		End IF;
   
    		IF pDAISHA_TYPE is not null then
    	 				wk_where := wk_where||' AND DAISHA_TYPE = '||''''||pDAISHA_TYPE||'''';
    		End IF;
        
        IF pDAISHA_GROUP is not null then
    	 				wk_where := wk_where||' AND DAISHA_GROUP = '||''''||pDAISHA_GROUP||'''';
   			End IF;
        
        IF pROUND is not null then
    	 				wk_where := wk_where||' AND ROUND = '||''''||pROUND||'''';
   			End IF;
        
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT CAL_DATE, CASE LINE_CD WHEN '''||'CM'||''' THEN '''||'ALL'||''' ELSE CELL_NAME END AS CELL_NAME, CASE DAISHA_TYPE  WHEN '''||'MA'||''' THEN '''||'MAIN'||''' WHEN '''||'SU'||''' THEN '''||'SUB'||'''  WHEN '''||'MS'||''' THEN '''||'MAIN+SUB'||'''  WHEN '''||'KT'||''' THEN '''||'KITTING'||''' END AS DAISHA_TYPE  , CASE DAISHA_GROUP WHEN '''||'KR'||''' THEN '''||'KORAT'||''' WHEN '''||'O1'||''' THEN '''||'OTHER1'||''' WHEN '''||'O2'||''' THEN '''||'OTHER2'||''' END AS DAISHA_GROUP, TOTAL_EMPTY FROM T_SLANE_REC_EMPTY_DAISHA ' ||wk_where||' group by CAL_DATE,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,TOTAL_EMPTY ORDER BY DAISHA_TYPE';
   	--wk_select := 'SELECT CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,TOTAL_EMPTY FROM V_SLANE_DETAIL_EMPTY ' ||wk_where||'';
  		--*** Execute cursor
   			OPEN pCUERSOR FOR wk_select;
END P_SLANE_REC_EMP_DAISHA_SEL;
-------------------------------------------------------------------------------
PROCEDURE P_SLANE_REC_EMP_DAISHA_MAX_SEL (
                                              pFACTORY_CD     VARCHAR2,
                                              pMODEL          VARCHAR2,
                                              pLINE_CD        VARCHAR2,
                                              pDAISHA_TYPE    VARCHAR2,
                                              pDAISHA_GROUP   VARCHAR2,
                                              pCUERSOR        OUT T_CURSOR)IS
          wk_select    					Varchar2(1000); 
   				wk_where              Varchar2(1000);
          --*** Check condition for search
    BEGIN
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
        
    		IF pMODEL is not null then
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        
        IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
        
    		IF pDAISHA_TYPE is not null then
    	 				wk_where := wk_where||' AND DAISHA_TYPE = '||''''||pDAISHA_TYPE||'''';
    		End IF;
        
        IF pDAISHA_GROUP is not null then
    	 				wk_where := wk_where||' AND DAISHA_GROUP = '||''''||pDAISHA_GROUP||'''';
   			End IF;
        
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					--wk_select := 'SELECT FACTORY_CD, MODEL, LINE_CD, DAISHA_TYPE, DAISHA_GROUP, Max(CAL_DATE)as CAL_DATE ,MAX(TOTAL_EMPTY)as TOTAL_EMPTY FROM T_SLANE_REC_EMPTY_DAISHA ' ||wk_where||' GROUP BY FACTORY_CD, MODEL, LINE_CD, DAISHA_TYPE, DAISHA_GROUP';
              wk_select := 'SELECT FACTORY_CD, MODEL, LINE_CD, DAISHA_TYPE, DAISHA_GROUP, CAL_DATE , TOTAL_EMPTY FROM T_SLANE_REC_EMPTY_DAISHA ' ||wk_where||' and CAL_DATE = (select max(cal_date) from T_SLANE_REC_EMPTY_DAISHA '||wk_where||')';
  		--*** Execute cursor
   			OPEN pCUERSOR FOR wk_select;
 END P_SLANE_REC_EMP_DAISHA_MAX_SEL;
END PG_SLANE_REC_EMPTY_DAISHA;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_SIGNAL
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_SIGNAL" AS
  PROCEDURE P_FIX_STORE_OUT  (          pFACTORY_CD VARCHAR2,
                                        pMODEL      VARCHAR2,
                                        pLINE_CD    VARCHAR2,
                                        pTYPE       VARCHAR2,
                                        pGROUP      VARCHAR2,
                                        pROUND      NUMBER,
                                        pSLANE      OUT NUMBER) AS 
                                        
    vDATE    VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME    VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    --vTIME    VARCHAR2(8) := '00:00:00';
    vSHIFT   VARCHAR2(1);
    vMAXSEQ  NUMBER; 
    vSEQ     NUMBER; 
    vROUND   NUMBER;
    vZONE         VARCHAR2(1) := 'P';
    vCYCLE_TIME   VARCHAR2(16);
    vMAXROUND     NUMBER;
    vTYPE         VARCHAR2(10);
    vLOCATION     VARCHAR2(10);
    vCELL_NAME    VARCHAR2(10);
    vDES          VARCHAR2(10);
    vCHK_SEQ      NUMBER;
    
 BEGIN
 
   IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
      --vDATE := '20180709';
   ELSE
      vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
      --vDATE := '20180807';
   END IF;
      
   IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
   ELSE
      vSHIFT := 'N';
   END IF;
   
   IF pTYPE = 'KT' THEN
      vLOCATION := 'IN KITTING';
      vDES := 'KITTING';
   ELSE
      vLOCATION := 'IN B-LANE';
      vDES := 'COMMON';
   END IF;
     
   -- GET Max SEQ
      SELECT MAX(SEQ) +1 INTO vMAXSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE 
      AND LINE_CD = pLINE_CD 
      AND DAISHA_TYPE = pTYPE 
      AND DAISHA_GROUP = pGROUP; 
       
      -- GET Max ROUND
      SELECT MAX(ROUND) +1 INTO vROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE 
      AND SEQ = vMAXSEQ-1 
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE 
      AND DAISHA_GROUP = pGROUP; 
      
      SELECT CELL_NAME INTO vCELL_NAME
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE 
      AND DAISHA_GROUP = pGROUP
      AND SEQ = vMAXSEQ-1;
      
      vCYCLE_TIME := GET_TIME_PICKING(pMODEL, pTYPE, vDATE, vSHIFT, vTIME, NULL, vZONE);
       
      IF vROUND > 20 THEN
        vROUND := 1;
      END IF;
     
     SELECT MAX(SEQ) INTO vSEQ 
     FROM T_SLANE_DAISHA_PROGRESSIVE 
     WHERE FACTORY_CD = pFACTORY_CD
     AND MODEL = pMODEL
     AND PLAN_DATE = vDATE
     AND LINE_CD = pLINE_CD
     AND DAISHA_TYPE = pTYPE
     AND DAISHA_GROUP = pGROUP
     AND BLANE_IN_DT IS NULL
     AND BLANE_IN_TM IS NULL
     AND ROUND = pROUND;
     
     SELECT NVL(MAX(SEQ),0) INTO vCHK_SEQ 
     FROM T_SLANE_DAISHA_PROGRESSIVE 
     WHERE FACTORY_CD = pFACTORY_CD
     AND MODEL = pMODEL
     AND PLAN_DATE = vDATE
     AND LINE_CD = pLINE_CD
     AND DAISHA_TYPE = pTYPE
     AND DAISHA_GROUP = pGROUP
     AND BLANE_SIGNAL_DT IS NOT NULL
     AND BLANE_SIGNAL_TM IS NOT NULL
     AND PLAN_OUT_SLANE_DT IS NOT NULL
     AND PLAN_OUT_SLANE_TM IS NOT NULL
     AND ROUND = pROUND;
     
     IF vSEQ = vCHK_SEQ THEN
      INSERT INTO T_SLANE_DAISHA_PROGRESSIVE (FACTORY_CD,
                                                  MODEL,
                                                  PLAN_DATE,
                                                  SHIFT,
                                                  LINE_CD,
                                                  CELL_NAME,
                                                  DAISHA_TYPE,
                                                  DAISHA_GROUP,
                                                  SEQ,
                                                  ROUND,
                                                  MERCHANDISE_CD,
                                                  DESTINATION,
                                                  COLOR,
                                                  LOCATION,
                                                  PLAN_PICK_DT,
                                                  PLAN_PICK_TM,
                                                  ACT_PICK_DT,
                                                  ACT_PICK_TM,
                                                  SLANE_IN_DT,
                                                  SLANE_IN_TM,
                                                  BLANE_SIGNAL_DT,
                                                  BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT,
                                                  PLAN_OUT_SLANE_TM,
                                                  ACT_OUT_SLANE_DT,
                                                  ACT_OUT_SLANE_TM,
                                                  BLANE_IN_DT,
                                                  BLANE_IN_TM)
                                        VALUES    (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  vSHIFT,
                                                  pLINE_CD,
                                                  vCELL_NAME,
                                                  pTYPE,
                                                  pGROUP,
                                                  vMAXSEQ,
                                                  vROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  NULL,
                                                  SUBSTR(vCYCLE_TIME,0,8),--vDATE,
                                                  SUBSTR(vCYCLE_TIME,9,8),
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL);                                 
        COMMIT;
     
     UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = vLOCATION,
          BLANE_IN_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
          BLANE_IN_TM = vTIME,
          SHIFT = vSHIFT,
          ACT_OUT_SLANE_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
          ACT_OUT_SLANE_TM = 'xx:xx:xx'
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND
      AND SEQ = vSEQ 
      AND BLANE_IN_DT IS NULL
      AND BLANE_IN_TM IS NULL;
      COMMIT;
    
   /*   SELECT MAX(TO_NUMBER(ROUND)) INTO vMAXROUND
      FROM T_SLANE_PROGRESS_ORDER_DAISHA 
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND
      AND ACTUAL_TIME IS NULL;
      
      UPDATE T_SLANE_PROGRESS_ORDER_DAISHA 
      SET ACTUAL_TIME = 'xx:xx:xx'
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND 
      AND ROUND = vMAXROUND
      AND DIFF IS NULL;          
      COMMIT;
   */     
      INSERT INTO T_SLANE_TEMP_PROCESS   (   MODEL,
                                               PLAN_DATE,
                                               SHIFT,
                                               LINE_CD,
                                               DAISHA_TYPE,
                                               DAISHA_GROUP,
                                               SEQ,
                                               ROUND,
                                               DESTINATION,
                                               COLOR,
                                               LOCATION,
                                               PROCESS_ID,
                                               PROCESS_NAME,
                                               STATUS,
                                               TIME)
                                 VALUES    (   pMODEL,
                                               vDATE,
                                               vSHIFT,
                                               pLINE_CD,
                                               pTYPE,
                                               pGROUP,
                                               vSEQ,
                                               pROUND,
                                               vDES,
                                               NULL,
                                               vLOCATION,
                                               5,
                                               'SIGNAL_IN_EXTRA',
                                               'OK',
                                               vTIME);                                 
            COMMIT;  
      pSLANE := 3;
    ELSE
      pSLANE := 0;
    END IF;
  END P_FIX_STORE_OUT;
 ------------------------------------------------------------------------------
  PROCEDURE P_SIGNAL_IN_KT (            pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER) AS  
                                        
    vDATE        VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME        VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS'); 
    --vTIME    VARCHAR2(8) := '00:32:00';
    vSHIFT       VARCHAR2(1);
    vCOUNT       NUMBER; 
    vSEQ         NUMBER;
    
    vCOUNT_OUT   NUMBER;
    vSEQ_OUT     NUMBER;
    vZONE        VARCHAR2(1) := 'P';
    vCYCLE_TIME  VARCHAR2(16);
    vMAXSEQ      NUMBER;
    vROUND       NUMBER;
    v_OUT        NUMBER;
    
 BEGIN
 
    IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
      --vDATE := '20180709';
    ELSE
      vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
      --vDATE := '20180801';
    END IF;
      
   IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
    ELSE
      vSHIFT := 'N';
    END IF;
   
   SELECT MAX(SEQ) INTO vSEQ_OUT 
   FROM T_SLANE_DAISHA_PROGRESSIVE 
   WHERE FACTORY_CD = pFACTORY_CD
   AND MODEL = pMODEL
   AND PLAN_DATE = vDATE
   AND LINE_CD = pLINE_CD
   AND DAISHA_TYPE = pTYPE
   AND DAISHA_GROUP = pGROUP
   AND ROUND = pROUND
   AND ACT_OUT_SLANE_DT IS NULL
   AND ACT_OUT_SLANE_TM IS NULL
   AND BLANE_IN_DT IS NULL
   AND BLANE_IN_TM IS NULL;
   
   SELECT COUNT(*) INTO vCOUNT_OUT 
   FROM T_SLANE_DAISHA_PROGRESSIVE 
   WHERE FACTORY_CD = pFACTORY_CD
   AND MODEL = pMODEL
   AND PLAN_DATE = vDATE
   AND LINE_CD = pLINE_CD
   AND DAISHA_TYPE = pTYPE
   AND DAISHA_GROUP = pGROUP
   AND ROUND = pROUND
   AND SEQ = vSEQ_OUT
   AND ACT_OUT_SLANE_DT IS NULL
   AND ACT_OUT_SLANE_TM IS NULL
   AND BLANE_IN_DT IS NULL
   AND BLANE_IN_TM IS NULL;
   
   IF vCOUNT_OUT = 1 THEN
   
     P_FIX_STORE_OUT(pFACTORY_CD, pMODEL, pLINE_CD, pTYPE, pGROUP, pROUND,v_OUT);
     pSLANE := v_OUT;
     
   ELSE
   
     SELECT MAX(SEQ) INTO vSEQ 
     FROM T_SLANE_DAISHA_PROGRESSIVE 
     WHERE FACTORY_CD = pFACTORY_CD
     AND MODEL = pMODEL
     AND PLAN_DATE = vDATE
     AND LINE_CD = pLINE_CD
     AND DAISHA_TYPE = pTYPE
     AND DAISHA_GROUP = pGROUP
     AND ACT_OUT_SLANE_DT IS NOT NULL
     AND ACT_OUT_SLANE_TM IS NOT NULL
     AND BLANE_IN_DT IS NULL
     AND BLANE_IN_TM IS NULL
     AND ROUND = pROUND;
     
     SELECT COUNT(*) INTO vCOUNT 
     FROM T_SLANE_DAISHA_PROGRESSIVE 
     WHERE FACTORY_CD = pFACTORY_CD
     AND PLAN_DATE = vDATE
     AND MODEL = pMODEL
     AND LINE_CD = pLINE_CD
     AND DAISHA_TYPE = pTYPE
     AND DAISHA_GROUP = pGROUP
     AND ACT_OUT_SLANE_DT IS NOT NULL
     AND ACT_OUT_SLANE_TM IS NOT NULL
     AND BLANE_IN_DT IS NULL
     AND BLANE_IN_TM IS NULL
     --AND LOCATION = 'S-LANE'
     AND SEQ = vSEQ
     AND ROUND = pROUND;
   
      IF vCOUNT = 1 THEN
      UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'IN KITTING',
          BLANE_IN_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),
          BLANE_IN_TM = vTIME,
          SHIFT = vSHIFT
      WHERE MODEL = pMODEL
      --AND SHIFT = vSHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND
      AND SEQ = vSEQ 
      AND BLANE_IN_DT IS NULL
      AND BLANE_IN_TM IS NULL
      AND ACT_OUT_SLANE_DT IS NOT NULL
      AND ACT_OUT_SLANE_TM IS NOT NULL;
      COMMIT;
        pSLANE := 1;
        
        INSERT INTO T_SLANE_TEMP_PROCESS   (   MODEL,
                                               PLAN_DATE,
                                               SHIFT,
                                               LINE_CD,
                                               DAISHA_TYPE,
                                               DAISHA_GROUP,
                                               SEQ,
                                               ROUND,
                                               DESTINATION,
                                               COLOR,
                                               LOCATION,
                                               PROCESS_ID,
                                               PROCESS_NAME,
                                               STATUS,
                                               TIME)
                                 VALUES    (   pMODEL,
                                               vDATE,
                                               vSHIFT,
                                               pLINE_CD,
                                               pTYPE,
                                               pGROUP,
                                               vSEQ,
                                               pROUND,
                                               'KITTING',
                                               NULL,
                                               'IN KITTING',
                                               5,
                                               'SIGNAL_IN_KT',
                                               'OK',
                                               vTIME);                                 
       
            COMMIT;
              pSLANE := 2;
      ELSE                                     
        pSLANE := 0; 
      END IF;
    
    END IF;
    
 END P_SIGNAL_IN_KT;
 ------------------------------------------------------------------------------
 -- START PICKING --
 PROCEDURE P_SIGNAL_MIN_KT (            pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pCOLOR        VARCHAR2,
                                        pSLANE        OUT NUMBER) AS  
                                        
    vDATE       VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME       VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    vSHIFT      VARCHAR2(1);
    
    vMINSEQ     NUMBER;
    vCOUNT      NUMBER;
    vCOUNT2     NUMBER;
    vCNT_ORDER  NUMBER;
    vORDER      NUMBER;
    vCYCLE      T_SLANE_DELIVERY_CYCLE_MASTER.CYCLE_TIME%TYPE;
    CUR1        T_SLANE_DAISHA_PROGRESSIVE%ROWTYPE;
    --vCHKTIME    NUMBER; 
    --vPLAN_OUT   VARCHAR2(8) ;
    vCNT_ASSY   NUMBER;
    vZONE       VARCHAR2(1) := 'S';
    vCYCLE_TIME VARCHAR2(16);
    
 BEGIN
 
    IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
    ELSE
       vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
    END IF;
      
   IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
    ELSE
      vSHIFT := 'N';
    END IF;
    
   SELECT MIN(SEQ) INTO vMINSEQ
    FROM T_SLANE_DAISHA_PROGRESSIVE
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND ACT_OUT_SLANE_DT IS NULL
        AND ACT_OUT_SLANE_TM IS NULL
        AND BLANE_SIGNAL_DT IS NULL
        AND BLANE_SIGNAL_TM IS NULL
        AND LOCATION = 'S-LANE';
    
    IF vMINSEQ IS NULL THEN
      vMINSEQ := 0;
    END IF;
    
    INSERT INTO T_SLANE_TEMP_PROCESS   (   MODEL,
                                             PLAN_DATE,
                                             SHIFT,
                                             LINE_CD,
                                             DAISHA_TYPE,
                                             DAISHA_GROUP,
                                             SEQ,
                                             ROUND,
                                             DESTINATION,
                                             COLOR,
                                             LOCATION,
                                             PROCESS_ID,
                                             PROCESS_NAME,
                                             STATUS,
                                             TIME)
                               VALUES    (   pMODEL,
                                             vDATE,
                                             vSHIFT,
                                             pLINE_CD,
                                             pTYPE,
                                             pGROUP,
                                             vMINSEQ,
                                             pROUND,
                                             'KITTING',
                                             pCOLOR,
                                             'ASSY',
                                             6,
                                             'SIGNAL_MIN_KT',
                                             'OK',
                                             vTIME);                                 
          COMMIT;
          
     SELECT COUNT(*) INTO vCOUNT -- 1
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ACT_OUT_SLANE_DT IS NULL
      AND ACT_OUT_SLANE_TM IS NULL
      AND BLANE_SIGNAL_DT IS NULL
      AND BLANE_SIGNAL_TM IS NULL
      AND LOCATION = 'S-LANE'
      AND SEQ = vMINSEQ;
      
      /*SELECT CYCLE_TIME INTO vCYCLE
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'KITTING'
      AND ZONE = 'S'; */
      
    vCYCLE_TIME := GET_TIME_PICKING(pMODEL, pTYPE, vDATE, vSHIFT, vTIME, NULL, vZONE);
      
    --GET MAX ORDER NO
    SELECT NVL(MAX(ORDER_NO),0) INTO vORDER
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE FACTORY_CD = pFACTORY_CD
    AND LINE_CD = pLINE_CD 
    AND MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND SHIFT = vSHIFT
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP;
    
    IF vORDER = 0 THEN
      vORDER := 1;
    END IF;
        
    SELECT COUNT(*) INTO vCNT_ORDER
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE FACTORY_CD = pFACTORY_CD
    AND LINE_CD = pLINE_CD 
    AND MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND SHIFT = vSHIFT
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND ORDER_NO = vORDER;
    
    IF vCNT_ORDER = 2 THEN
      vORDER := vORDER + 1;
    ELSIF vCNT_ORDER = 0 THEN
      vORDER := 1;
    END IF;
    
    SELECT COUNT(*) INTO vCNT_ASSY
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE FACTORY_CD = pFACTORY_CD
    AND LINE_CD = pLINE_CD
    AND MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND LOCATION = 'ASSY'
    AND SEQ = (SELECT MIN(SEQ)
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE FACTORY_CD = pFACTORY_CD
    AND LINE_CD = pLINE_CD 
    AND MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND LOCATION = 'ASSY');
    
    IF vCNT_ASSY = 1 THEN
      UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'EMPTY'
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND LOCATION = 'ASSY'
      AND SEQ = (SELECT MIN(SEQ)
        FROM T_SLANE_DAISHA_PROGRESSIVE
        WHERE FACTORY_CD = pFACTORY_CD
        AND LINE_CD = pLINE_CD 
        AND MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND LOCATION = 'ASSY');
      COMMIT;
 
    END IF;
 
   IF vCOUNT = 1 THEN  --UPDATE ?????????
      UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'ASSY',
      BLANE_OUT_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
      BLANE_OUT_TM = vTIME
      WHERE MODEL = pMODEL
      --AND SHIFT = vSHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND
      AND BLANE_OUT_DT IS NULL
      AND BLANE_OUT_TM IS NULL
      AND LOCATION <> 'EMPTY';
      COMMIT;
      pSLANE := 1; 
      
  /*    SELECT COUNT(*) INTO vCOUNT2
      FROM T_SLANE_PROGRESS_ORDER_DAISHA
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND SHIFT = vSHIFT
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND
      AND ROUND = vORDER-1
      AND MIN_BLANE IS NULL;
      
      IF vCOUNT2 = 1 THEN
        UPDATE T_SLANE_PROGRESS_ORDER_DAISHA
        SET MIN_BLANE = vTIME
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        --AND SHIFT = vSHIFT
        AND DAISHA_GROUP = pGROUP
        AND ORDER_NO = pROUND
        AND ROUND = vORDER-1
        AND MIN_BLANE IS NULL;
        COMMIT;
          pSLANE := 2;
      ELSE
        UPDATE T_SLANE_PROGRESS_ORDER_DAISHA
        SET MIN_BLANE = vTIME,
        ROUND = 0,
        SHIFT = vSHIFT
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        --AND SHIFT = vSHIFT
        AND DAISHA_GROUP = pGROUP
        AND ORDER_NO = pROUND 
        AND MIN_BLANE IS NULL;
        COMMIT;
          pSLANE := 2;
      END IF;
   */   
      UPDATE T_SLANE_DAISHA_PROGRESSIVE -- UPDATE ???????????? + 1
      SET COLOR = pCOLOR,
          BLANE_SIGNAL_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
          BLANE_SIGNAL_TM = vTIME,
          PLAN_OUT_SLANE_DT = SUBSTR(vCYCLE_TIME,0,8),--vDATE,
          PLAN_OUT_SLANE_TM = SUBSTR(vCYCLE_TIME,9,8),
          --PLAN_OUT_SLANE_TM = to_char(sysdate + (.000694 * vCYCLE), 'HH24:MI:SS'),
          ORDER_NO = vORDER,
          SHIFT = vSHIFT
      WHERE MODEL = pMODEL
      --AND SHIFT = vSHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND SEQ = vMINSEQ;
      COMMIT;
        pSLANE := 3;
      
   /*     --GET DATA TO INSERT T_SLANE_PROGRESS_ORDER_DAISHA
      SELECT * INTO CUR1
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND SEQ = vMINSEQ;        
    
      INSERT INTO T_SLANE_PROGRESS_ORDER_DAISHA   (   FACTORY_CD,
                                                      PLAN_DATE,
                                                      MODEL,
                                                      SHIFT,
                                                      LINE_CD,
                                                      DAISHA_TYPE,
                                                      DAISHA_GROUP,
                                                      ROUND,
                                                      ORDER_NO,
                                                      PLAN_TIME,
                                                      ACTUAL_TIME,
                                                      DIFF,
                                                      MIN_BLANE)
                                            VALUES   (CUR1.FACTORY_CD,
                                                      vDATE,
                                                      CUR1.MODEL,
                                                      vSHIFT,
                                                      CUR1.LINE_CD,
                                                      CUR1.DAISHA_TYPE,
                                                      CUR1.DAISHA_GROUP,
                                                      vORDER ,
                                                      CUR1.ROUND ,
                                                      SUBSTR(vCYCLE_TIME,9,8),
                                                      --TO_CHAR(SYSDATE + (.000694 * vCYCLE), 'HH24:MI:SS'),
                                                      NULL,
                                                      NULL,
                                                      NULL);                                 
     
          COMMIT;
          */
            pSLANE := 4; 
                
    ELSE                                     
      pSLANE := 0; 
    END IF;
    
 END P_SIGNAL_MIN_KT;        
 ------------------------------------------------------------------------------ 
 PROCEDURE P_SIGNAL_IN_BLANE  (         pFACTORY_CD VARCHAR2,
                                        pMODEL      VARCHAR2,
                                        pLINE_CD    VARCHAR2,
                                        pTYPE       VARCHAR2,
                                        pGROUP      VARCHAR2,
                                        pROUND      NUMBER,
                                        pSLANE      OUT NUMBER) AS 
                                        
    vDATE    VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME    VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    --vTIME    VARCHAR2(8) := '00:00:00';
    vSHIFT   VARCHAR2(1);
    vCOUNT   NUMBER; 
    vSEQ     NUMBER;
    
    vCOUNT_OUT   NUMBER;
    vSEQ_OUT     NUMBER;
    --vZONE        VARCHAR2(1) := 'P';
    --vCYCLE_TIME  VARCHAR2(16);
    vMAXSEQ      NUMBER;
    vROUND       NUMBER;
    v_OUT        NUMBER;
    
 BEGIN
 
   IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
      --vDATE := '20180709';
   ELSE
      vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
      --vDATE := '20180807';
   END IF;
      
   IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
   ELSE
      vSHIFT := 'N';
   END IF;
   
   SELECT MAX(SEQ) INTO vSEQ_OUT 
   FROM T_SLANE_DAISHA_PROGRESSIVE 
   WHERE FACTORY_CD = pFACTORY_CD
   AND MODEL = pMODEL
   AND PLAN_DATE = vDATE
   AND LINE_CD = pLINE_CD
   AND DAISHA_TYPE = pTYPE
   AND DAISHA_GROUP = pGROUP
   AND ROUND = pROUND
   AND ACT_OUT_SLANE_DT IS NULL
   AND ACT_OUT_SLANE_TM IS NULL
   AND BLANE_IN_DT IS NULL
   AND BLANE_IN_TM IS NULL;
   
   SELECT COUNT(*) INTO vCOUNT_OUT 
   FROM T_SLANE_DAISHA_PROGRESSIVE 
   WHERE FACTORY_CD = pFACTORY_CD
   AND MODEL = pMODEL
   AND PLAN_DATE = vDATE
   AND LINE_CD = pLINE_CD
   AND DAISHA_TYPE = pTYPE
   AND DAISHA_GROUP = pGROUP
   AND ROUND = pROUND
   AND SEQ = vSEQ_OUT
   AND ACT_OUT_SLANE_DT IS NULL
   AND ACT_OUT_SLANE_TM IS NULL
   AND BLANE_IN_DT IS NULL
   AND BLANE_IN_TM IS NULL;
   
   IF vCOUNT_OUT = 1 THEN
     P_FIX_STORE_OUT(pFACTORY_CD, pMODEL, pLINE_CD, pTYPE, pGROUP, pROUND,v_OUT);
     pSLANE := v_OUT;
     
   ELSE
     SELECT MAX(SEQ) INTO vSEQ 
     FROM T_SLANE_DAISHA_PROGRESSIVE 
     WHERE FACTORY_CD = pFACTORY_CD
     AND MODEL = pMODEL
     AND PLAN_DATE = vDATE
     AND LINE_CD = pLINE_CD
     AND DAISHA_TYPE = pTYPE
     AND DAISHA_GROUP = pGROUP
     AND ACT_OUT_SLANE_DT IS NOT NULL
     AND ACT_OUT_SLANE_TM IS NOT NULL
     AND BLANE_IN_DT IS NULL
     AND BLANE_IN_TM IS NULL
     AND ROUND = pROUND;
     
     SELECT COUNT(*) INTO vCOUNT 
     FROM T_SLANE_DAISHA_PROGRESSIVE 
     WHERE FACTORY_CD = pFACTORY_CD
     AND PLAN_DATE = vDATE
     AND MODEL = pMODEL
     AND LINE_CD = pLINE_CD
     AND DAISHA_TYPE = pTYPE
     AND DAISHA_GROUP = pGROUP
     AND ACT_OUT_SLANE_DT IS NOT NULL
     AND ACT_OUT_SLANE_TM IS NOT NULL
     AND BLANE_IN_DT IS NULL
     AND BLANE_IN_TM IS NULL
     --AND LOCATION = 'S-LANE'
     AND SEQ = vSEQ
     AND ROUND = pROUND;
          
      IF vCOUNT = 1 THEN
      UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'IN B-LANE',
          BLANE_IN_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
          BLANE_IN_TM = vTIME,
          SHIFT = vSHIFT
      WHERE MODEL = pMODEL
      --AND SHIFT = vSHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND
      AND SEQ = vSEQ 
      AND BLANE_IN_DT IS NULL
      AND BLANE_IN_TM IS NULL
      AND ACT_OUT_SLANE_DT IS NOT NULL
      AND ACT_OUT_SLANE_TM IS NOT NULL;
      COMMIT;
        pSLANE := 1;
        
        INSERT INTO T_SLANE_TEMP_PROCESS   (   MODEL,
                                                 PLAN_DATE,
                                                 SHIFT,
                                                 LINE_CD,
                                                 DAISHA_TYPE,
                                                 DAISHA_GROUP,
                                                 SEQ,
                                                 ROUND,
                                                 DESTINATION,
                                                 COLOR,
                                                 LOCATION,
                                                 PROCESS_ID,
                                                 PROCESS_NAME,
                                                 STATUS,
                                                 TIME)
                                   VALUES    (   pMODEL,
                                                 vDATE,
                                                 vSHIFT,
                                                 pLINE_CD,
                                                 pTYPE,
                                                 pGROUP,
                                                 vSEQ,
                                                 pROUND,
                                                 'KITTING',
                                                 NULL,
                                                 'IN B-LANE',
                                                 5,
                                                 'SIGNAL_IN_BLANE',
                                                 'OK',
                                                 vTIME);                                 
         
              COMMIT;
                pSLANE := 2;
        ELSE                                     
          pSLANE := 0; 
        END IF;
        
    END IF;
    
 END P_SIGNAL_IN_BLANE;
 ------------------------------------------------------------------------------
 PROCEDURE P_SIGNAL_OUT_BLANE (         pFACTORY_CD VARCHAR2,
                                        pMODEL      VARCHAR2,
                                        pLINE_CD    VARCHAR2,
                                        pTYPE       VARCHAR2,
                                        pGROUP      VARCHAR2,
                                        pROUND      NUMBER,
                                        pCOLOR      VARCHAR2,
                                        pDES        VARCHAR2,
                                        pSLANE      OUT NUMBER) AS 
                                        
    vDATE       VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME       VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    --vTIME       VARCHAR2(8) := '00:00:00' ;
    vSHIFT      VARCHAR2(1);
    
    vMINSEQ     NUMBER;
    vCOUNT      NUMBER; 
    vCOUNT2     NUMBER;
    vCNT_ORDER  NUMBER;
    vORDER      NUMBER;
    vCYCLE      T_SLANE_DELIVERY_CYCLE_MASTER.CYCLE_TIME%TYPE;
    CUR1        T_SLANE_DAISHA_PROGRESSIVE%ROWTYPE;
   
    vCNT_ASSY   NUMBER;
    vZONE       VARCHAR2(1) := 'S';
    vCYCLE_TIME VARCHAR2(16);
    vROUND      NUMBER;
    
 BEGIN
 
    IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
      --vDATE := '20180709';
    ELSE
      vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
      --vDATE := '20180807';
    END IF;
      
    IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
    ELSE
      vSHIFT := 'N';
    END IF;
    
    --GET MIN SEQ  
      SELECT MIN(SEQ) INTO vMINSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      --AND ROUND = pROUND 
      AND ACT_OUT_SLANE_DT IS NULL
      AND ACT_OUT_SLANE_TM IS NULL
      AND BLANE_SIGNAL_DT IS NULL
      AND BLANE_SIGNAL_TM IS NULL
      AND LOCATION = 'S-LANE';
 
    IF vMINSEQ IS NULL THEN
      vMINSEQ := 0;
    END IF;
    
    INSERT INTO T_SLANE_TEMP_PROCESS   (   MODEL,
                                             PLAN_DATE,
                                             SHIFT,
                                             LINE_CD,
                                             DAISHA_TYPE,
                                             DAISHA_GROUP,
                                             SEQ,
                                             ROUND,
                                             DESTINATION,
                                             COLOR,
                                             LOCATION,
                                             PROCESS_ID,
                                             PROCESS_NAME,
                                             STATUS,
                                             TIME)
                               VALUES    (   pMODEL,
                                             vDATE,
                                             vSHIFT,
                                             pLINE_CD,
                                             pTYPE,
                                             pGROUP,
                                             vMINSEQ,
                                             pROUND,
                                             'KITTING',
                                             NULL,
                                             'ASSY',
                                             6,
                                             'SIGNAL_OUT_BLANE',
                                             'OK',
                                             vTIME);                                 
          COMMIT;
    -- GET Cycle Time OUT KITTING
    /*  SELECT CYCLE_TIME INTO vCYCLE
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'KITTING'
      AND ZONE = 'S';*/
           
   SELECT COUNT(*) INTO vCOUNT 
   FROM T_SLANE_DAISHA_PROGRESSIVE 
   WHERE FACTORY_CD = pFACTORY_CD
   AND MODEL = pMODEL
   AND PLAN_DATE = vDATE
   AND LINE_CD = pLINE_CD
   AND DAISHA_TYPE = pTYPE
   AND DAISHA_GROUP = pGROUP
   AND ACT_OUT_SLANE_DT IS NULL
   AND ACT_OUT_SLANE_TM IS NULL
   AND BLANE_IN_DT IS NULL
   AND BLANE_IN_TM IS NULL
   AND LOCATION = 'S-LANE'
   AND SEQ = vMINSEQ;
   --AND ROUND = pROUND;
     vCYCLE_TIME := GET_TIME_PICKING(pMODEL, pTYPE, vDATE, vSHIFT, vTIME, NULL, vZONE);

   --GET MAX ROUND FOR INSERT NEXT ROUND
     /* SELECT NVL(MAX(ORDER_NO),0)+1 INTO vORDER -- +1
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND SHIFT = vSHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP;*/
      
      SELECT NVL(MAX(ORDER_NO),0)+1 INTO vORDER
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND SHIFT = vSHIFT
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND SEQ = (SELECT MAX(SEQ)
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND SHIFT = vSHIFT
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND LOCATION = 'IN B-LANE');
      
      /*IF vORDER IS NULL THEN -- SNP 20 = 1 DAISHA = 1 ROUND
        vORDER := 1;
      ELSE 
        vORDER := vORDER + 1;
      END IF;  */
      
    SELECT COUNT(*) INTO vCNT_ASSY
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE FACTORY_CD = pFACTORY_CD
    AND LINE_CD = pLINE_CD
    AND MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND LOCATION = 'ASSY'
    AND SEQ = (SELECT MIN(SEQ)
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE FACTORY_CD = pFACTORY_CD
    AND LINE_CD = pLINE_CD 
    AND MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND LOCATION = 'ASSY');
    
    IF vCNT_ASSY = 1 THEN
      UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'EMPTY'
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND LOCATION = 'ASSY'
      AND SEQ = (SELECT MIN(SEQ)
        FROM T_SLANE_DAISHA_PROGRESSIVE
        WHERE FACTORY_CD = pFACTORY_CD
        AND LINE_CD = pLINE_CD 
        AND MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND LOCATION = 'ASSY');
      COMMIT;
 
    END IF;
            
   IF vCOUNT = 1 THEN
      UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'ASSY',
      BLANE_OUT_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
      BLANE_OUT_TM = vTIME
      WHERE MODEL = pMODEL
      --AND SHIFT = vSHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND
      AND BLANE_OUT_DT IS NULL
      AND BLANE_OUT_TM IS NULL;
      --AND LOCATION <> 'EMPTY';
    COMMIT;
      pSLANE := 1; 
        
   /*     SELECT COUNT(*) INTO vCOUNT2
        FROM T_SLANE_PROGRESS_ORDER_DAISHA
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND SHIFT = vSHIFT
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND ORDER_NO = pROUND
        AND ROUND = vORDER-1
        AND MIN_BLANE IS NULL;
      
        IF vCOUNT2 = 1 THEN
          UPDATE T_SLANE_PROGRESS_ORDER_DAISHA  --UPDATE ?????????
          SET MIN_BLANE = vTIME
          WHERE MODEL = pMODEL
          AND PLAN_DATE = vDATE
          --AND SHIFT = vSHIFT
          AND LINE_CD = pLINE_CD
          AND DAISHA_TYPE = pTYPE
          AND DAISHA_GROUP = pGROUP
          AND ORDER_NO = pROUND 
          AND ROUND = vORDER-1
          AND MIN_BLANE IS NULL;
          COMMIT;
            pSLANE := 2; 
        ELSE
          UPDATE T_SLANE_PROGRESS_ORDER_DAISHA  --INITIAL STOCK NIGHT SHIFT
          SET MIN_BLANE = vTIME,
          ROUND = 0,
          SHIFT = vSHIFT
          WHERE MODEL = pMODEL
          AND PLAN_DATE = vDATE
          --AND SHIFT = vSHIFT
          AND LINE_CD = pLINE_CD
          AND DAISHA_TYPE = pTYPE
          AND DAISHA_GROUP = pGROUP
          AND ORDER_NO = pROUND 
          AND MIN_BLANE IS NULL;
          COMMIT;
            pSLANE := 2;
      END IF;
  */    
        UPDATE T_SLANE_DAISHA_PROGRESSIVE
        SET COLOR = pCOLOR,
            DESTINATION = pDES,
            BLANE_SIGNAL_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
            BLANE_SIGNAL_TM = vTIME,
            PLAN_OUT_SLANE_DT = SUBSTR(vCYCLE_TIME,0,8),--vDATE,
            PLAN_OUT_SLANE_TM = SUBSTR(vCYCLE_TIME,9,8), --to_char(sysdate + (.000694 * vCYCLE), 'HH24:MI:SS'),
            ORDER_NO = vORDER,
            SHIFT = vSHIFT
        WHERE MODEL = pMODEL
        --AND SHIFT = vSHIFT
        AND PLAN_DATE = vDATE
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND SEQ = vMINSEQ;
        COMMIT;
          pSLANE := 3; 
                       
    /*        SELECT ROUND INTO vROUND--ORDER_NO
            FROM T_SLANE_DAISHA_PROGRESSIVE
            WHERE MODEL = pMODEL
            AND SHIFT = vSHIFT
            AND PLAN_DATE = vDATE
            AND LINE_CD = pLINE_CD
            AND DAISHA_TYPE = pTYPE
            AND DAISHA_GROUP = pGROUP
            AND SEQ = vMINSEQ;
      
          INSERT INTO T_SLANE_PROGRESS_ORDER_DAISHA  (FACTORY_CD,
                                                      PLAN_DATE,
                                                      MODEL,
                                                      SHIFT,
                                                      LINE_CD,
                                                      DAISHA_TYPE,
                                                      DAISHA_GROUP,
                                                      ROUND,
                                                      ORDER_NO,
                                                      PLAN_TIME,
                                                      ACTUAL_TIME,
                                                      DIFF,
                                                      MIN_BLANE)
                                            VALUES   (pFACTORY_CD,
                                                      vDATE,
                                                      pMODEL,
                                                      vSHIFT,
                                                      pLINE_CD,
                                                      pTYPE,
                                                      pGROUP,
                                                      vORDER,
                                                      vROUND,
                                                      SUBSTR(vCYCLE_TIME,9,8),
                                                      --to_char(sysdate + (.000694 * vCYCLE), 'HH24:MI:SS'),
                                                      NULL,
                                                      NULL,
                                                      NULL);                                 
         
          COMMIT;
          */
            pSLANE := 4; 
        
    ELSE                                     
      pSLANE := 0; 
    END IF;
    
      EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
        pSLANE := 9;
        
 END P_SIGNAL_OUT_BLANE;               
 ------------------------------------------------------------------------------

END PG_SLANE_SIGNAL;

/
--------------------------------------------------------
--  DDL for Procedure MAIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "LCDRA"."MAIN" as
    BEGIN
      P_SLANE_DNM_RLTMPLANBYSHF_W;
      P_CALCULATE_ACTUAL;
  END MAIN;
  
  PROCEDURE P_SLANE_DNM_RLTMPLANBYSHF_W AS
    vDATE VARCHAR2(8) ;
    vTIME     VARCHAR2(10) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    vSHIFT    VARCHAR2(1) ;
    --vCALDATE  VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vCOUNT   NUMBER(3,0);
    --vTIMEEND VARCHAR2(1) :=TO_CHAR(SYSDATE+1,'HH24:MI:SS');
    vSEQ     NUMBER(7,0);
    
    CURSOR C1 IS SELECT * FROM  T_PRD_PLAN_A3_RLTMPLANBYSHF_W@FROM_EUC_NPIS
                 WHERE CAL_DATE = vDATE
                 AND   SHIFT = vSHIFT
                 AND   SEQ   = vSEQ;
                 --AND   LINE_CD = 'TN'; -- FOR TEST
                 --ORDER BY LINE_CD;
    
    REC1     C1%ROWTYPE;
  
  BEGIN
  
  --vDATE
    IF   vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
    ELSE
       vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
    END IF;
    
    --vSHIFT
    IF   vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
    ELSE
      vSHIFT := 'N';
    END IF;
    --vSEQ
    SELECT MAX(SEQ) INTO vSEQ 
    FROM T_PRD_PLAN_A3_RLTMPLANBYSHF_W@FROM_EUC_NPIS
    WHERE CAL_DATE = vDATE;
    
   -- DELETE T_SLANE_DNM_RLTMPLANBYSHF_W
    --COMMIT;
      
    FOR REC1 IN C1 LOOP
     
     SELECT COUNT(*) INTO vCOUNT 
     FROM T_SLANE_DNM_RLTMPLANBYSHF_W
     WHERE CAL_DATE = vDATE
     AND SHIFT = vSHIFT
     AND LINE_CD = REC1.LINE_CD;
     
      IF vCOUNT = 0 THEN
      INSERT INTO T_SLANE_DNM_RLTMPLANBYSHF_W(SEQ,
                                              FACTORY_CD,
                                              CAL_DATE,
                                              CAL_TIME,
                                              SHIFT,
                                              LINE_CD,
                                              CELL_NAME,
                                              PLAN_QTY_BY_SHIFT,
                                              REALTIME_PLAN_QTY,
                                              ACTUAL_QTY,
                                              DIFF_QTY,
                                              CAP_QTY,
                                              CYCLE_TIME,
                                              CREATE_DATE,
                                              CREATE_BY,
                                              UPDATE_DATE,
                                              UPDATE_BY,
                                              HISTORY_ENTRY_DATE)
                                      VALUES (REC1.SEQ,
                                              REC1.FACTORY_CD,
                                              REC1.CAL_DATE,
                                              REC1.CAL_TIME,
                                              REC1.SHIFT,
                                              REC1.LINE_CD,
                                              REC1.CELL_NAME,
                                              REC1.PLAN_QTY_BY_SHIFT,
                                              REC1.REALTIME_PLAN_QTY,
                                              REC1.ACTUAL_QTY,
                                              REC1.DIFF_QTY,
                                              REC1.CAP_QTY,
                                              REC1.CYCLE_TIME,
                                              REC1.CREATE_DATE,
                                              REC1.CREATE_BY,
                                              REC1.UPDATE_DATE,
                                              REC1.UPDATE_BY,
                                              REC1.HISTORY_ENTRY_DATE);
                                              
     ELSE 
           UPDATE T_SLANE_DNM_RLTMPLANBYSHF_W
                    SET   SEQ = REC1.SEQ,
                    FACTORY_CD = REC1.FACTORY_CD,
                    CAL_TIME   =  REC1.CAL_TIME,
                    CELL_NAME  = REC1.CELL_NAME,
                    PLAN_QTY_BY_SHIFT =   REC1.PLAN_QTY_BY_SHIFT,
                    REALTIME_PLAN_QTY =  REC1.REALTIME_PLAN_QTY,
                    ACTUAL_QTY  = REC1.ACTUAL_QTY,
                    DIFF_QTY =  REC1.DIFF_QTY,
                    CAP_QTY  =  REC1.CAP_QTY,
                    CYCLE_TIME = REC1.CYCLE_TIME,
                    CREATE_DATE  = REC1.CREATE_DATE,
                    CREATE_BY =  REC1.CREATE_BY,
                    UPDATE_DATE =          REC1.UPDATE_DATE,
                    UPDATE_BY  =            REC1.UPDATE_BY,
                   HISTORY_ENTRY_DATE  =   REC1.HISTORY_ENTRY_DATE
           WHERE  CAL_DATE = vDATE
           AND    FACTORY_CD = REC1.FACTORY_CD
           AND   SHIFT   = vSHIFT
           AND   LINE_CD = REC1.LINE_CD;
           
       null;
      END IF;
      
    END LOOP;
  
    EXCEPTION 
    WHEN  OTHERS THEN
    NULL;
   --END;
      
  END P_SLANE_DNM_RLTMPLANBYSHF_W;
  
    PROCEDURE P_CALCULATE_ACTUAL 
  AS
    vTIME     VARCHAR2(10) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    vSHIFT    VARCHAR2(1) ;
    vCALDATE  VARCHAR2(8) ;
    vCOUNT    NUMBER(3,0);

    CURSOR C1 IS 
    SELECT * FROM T_SLANE_DNM_RLTMPLANBYSHF_W
                 WHERE CAL_DATE = vCALDATE
                 AND   SHIFT = vSHIFT ;
                 --AND   LINE_CD = 'TN'; -- FOR TEST
                 --ORDER BY LINE_CD;
    
    REC1     C1%ROWTYPE;
    REC2     V_SLANE_WORKING_TIME%ROWTYPE;
    vQ1     T_SLANE_CALCULATE_ACTUAL.ACTUAL_Q1%TYPE;
    vQ2     T_SLANE_CALCULATE_ACTUAL.ACTUAL_Q2%TYPE;
    vQ3     T_SLANE_CALCULATE_ACTUAL.ACTUAL_Q3%TYPE;
    vQ4     T_SLANE_CALCULATE_ACTUAL.ACTUAL_Q4%TYPE;
  
    BEGIN
        --vDATE
    IF   vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vCALDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
    ELSE
       vCALDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
    END IF;
    
    --vSHIFT
    IF   vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
    ELSE
      vSHIFT := 'N';
    END IF;
        
        
        FOR REC1 IN C1 LOOP

          SELECT * INTO REC2
          FROM V_SLANE_WORKING_TIME
          WHERE PLAN_DATE = vCALDATE
          AND   SHIFT   = vSHIFT
          AND   SUBSTR(LINE_CD,1,2) = REC1.LINE_CD;
          
          SELECT COUNT(*) INTO vCOUNT
          FROM T_SLANE_CALCULATE_ACTUAL
          WHERE PLAN_DATE = vCALDATE
          AND   SHIFT   = vSHIFT
          AND   LINE_CD = REC2.LINE_CD;
           
           IF vCOUNT = 0 THEN
             INSERT INTO T_SLANE_CALCULATE_ACTUAL(FACTORY_CD, 
                                                  MODEL,
                                                  PLAN_DATE,
                                                  LINE_CD,
                                                  SHIFT,
                                                  ACTUAL_Q1,
                                                  ACTUAL_Q2,
                                                  ACTUAL_Q3,
                                                  ACTUAL_Q4,
                                                  ACTUAL_Q5,
                                                  CREATE_DATE,
                                                  CREATE_BY,
                                                  UPDATE_DATE,
                                                  UPDATE_BY)
                                           VALUES(REC1.FACTORY_CD,
                                                  REC2.MODEL,
                                                  REC2.PLAN_DATE,
                                                  REC2.LINE_CD,
                                                  REC2.SHIFT,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  SYSDATE,
                                                  'SYSTEM',
                                                  SYSDATE,
                                                  'SYSTEM');
                           COMMIT;
           ELSE
                SELECT nvl(ACTUAL_Q1,0),nvl(ACTUAL_Q2,0), nvl(ACTUAL_Q3,0),nvl(ACTUAL_Q4,0) 
                INTO vQ1,vQ2,vQ3,vQ4
                FROM T_SLANE_CALCULATE_ACTUAL
                WHERE PLAN_DATE = vCALDATE
                AND   SHIFT   = vSHIFT
                AND   LINE_CD = REC2.LINE_CD;
               IF to_number(REC1.CAL_TIME) BETWEEN to_number(TO_CHAR(TO_DATE(REC2.WORK1_BEGIN,'HH24:MI:SS'),'HH24MI')) AND to_number(TO_CHAR(TO_DATE(REC2.WORK1_END,'HH24:MI:SS'),'HH24MI')) THEN
                  UPDATE T_SLANE_CALCULATE_ACTUAL
                  SET   ACTUAL_Q1 = REC1.ACTUAL_QTY
                  WHERE PLAN_DATE = vCALDATE
                  AND   SHIFT   = vSHIFT
                  AND   LINE_CD = REC2.LINE_CD;
                
                ELSIF to_number(REC1.CAL_TIME) BETWEEN to_number(TO_CHAR(TO_DATE(REC2.WORK2_BEGIN,'HH24:MI:SS'),'HH24MI')) AND to_number(TO_CHAR(TO_DATE(REC2.WORK2_END,'HH24:MI:SS'),'HH24MI')) THEN
                 -- Result = ACTUAL_Q1 + REC1.ACTUAL_QTY
                  UPDATE T_SLANE_CALCULATE_ACTUAL
                  SET   ACTUAL_Q2 =  REC1.ACTUAL_QTY - vQ1
                  WHERE PLAN_DATE = vCALDATE
                  AND   SHIFT   = vSHIFT
                  AND   LINE_CD = REC2.LINE_CD;
                  
                ELSIF to_number(REC1.CAL_TIME) BETWEEN to_number(TO_CHAR(TO_DATE(REC2.WORK3_BEGIN,'HH24:MI:SS'),'HH24MI')) AND to_number(TO_CHAR(TO_DATE(REC2.WORK3_END,'HH24:MI:SS'),'HH24MI')) THEN
                  UPDATE T_SLANE_CALCULATE_ACTUAL
                  SET   ACTUAL_Q3 = REC1.ACTUAL_QTY - (vQ2 + vQ1)
                  WHERE PLAN_DATE = vCALDATE
                  AND   SHIFT   = vSHIFT
                  AND   LINE_CD = REC2.LINE_CD;
                
                ELSIF to_number(REC1.CAL_TIME) BETWEEN to_number(TO_CHAR(TO_DATE(REC2.WORK4_BEGIN,'HH24:MI:SS'),'HH24MI')) AND to_number(TO_CHAR(TO_DATE(REC2.WORK4_END,'HH24:MI:SS'),'HH24MI')) THEN
                  UPDATE T_SLANE_CALCULATE_ACTUAL
                  SET   ACTUAL_Q4 = REC1.ACTUAL_QTY -(vQ3 + vQ2 + vQ1)
                  WHERE PLAN_DATE = vCALDATE
                  AND   SHIFT   = vSHIFT
                  AND   LINE_CD = REC2.LINE_CD;
                
                 ELSIF to_number(REC1.CAL_TIME) BETWEEN to_number(TO_CHAR(TO_DATE(REC2.OVERTIME_BEGIN,'HH24:MI:SS'),'HH24MI')) AND to_number(TO_CHAR(TO_DATE(REC2.OVERTIME_END,'HH24:MI:SS'),'HH24MI')) THEN 
                  UPDATE T_SLANE_CALCULATE_ACTUAL
                  SET   ACTUAL_Q5 = REC1.ACTUAL_QTY -(vQ4 + vQ3 + vQ2 + vQ1)
                  WHERE PLAN_DATE = vCALDATE
                  AND   SHIFT   = vSHIFT
                  AND   LINE_CD = REC2.LINE_CD;
                
                END IF; 
               --NULL;
                COMMIT;
              END IF;     
        END LOOP;
     
    END P_CALCULATE_ACTUAL;
  PROCEDURE P_GETDATA_FROM_DNM AS 
    
    vTIME     VARCHAR2(10) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    vCALDATE  VARCHAR2(8) ;
    
      BEGIN
        
             --vDATE
        IF   vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
          vCALDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
        ELSE
          vCALDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
        END IF;
        
        DELETE FROM T_SLANE_DNM_WORKSHIFT_CD;
      
        INSERT INTO T_SLANE_DNM_WORKSHIFT_CD
        SELECT * FROM T_PRD_PLAN_A3_WORKSHIFT_CD@FROM_EUC_NPIS;
        COMMIT;
        
        DELETE T_SLANE_DNM_OVERTIME_CD;
        
        INSERT INTO T_SLANE_DNM_OVERTIME_CD
        SELECT * FROM T_PRD_PLAN_A3_OVERTIME_CD@FROM_EUC_NPIS;
        COMMIT;

        DELETE T_SLANE_DNM_WORKSHIFT_N_CAP
        WHERE PLAN_DATE = vCALDATE;
        
        INSERT INTO T_SLANE_DNM_WORKSHIFT_N_CAP
        SELECT * FROM T_PRD_PLAN_A3_WORKSHIFT_N_CAP@FROM_EUC_NPIS
        WHERE PLAN_DATE = vCALDATE;
        COMMIT;
        
        
        
    END P_GETDATA_FROM_DNM;
    
  

END PG_SLANE_DNM_RLTMPLANBYSHF_W;

/
