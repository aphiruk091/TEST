--------------------------------------------------------
--  File created - Monday-December-17-2018   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for DB Link FROM_EUCTEST_CHTINQ
--------------------------------------------------------

  CREATE DATABASE LINK "FROM_EUCTEST_CHTINQ"
   CONNECT TO "CHTINQ" IDENTIFIED BY VALUES ':1'
   USING 'euctest';
--------------------------------------------------------
--  DDL for DB Link FROM_EUC_NPIS
--------------------------------------------------------

  CREATE DATABASE LINK "FROM_EUC_NPIS"
   CONNECT TO "NPIS" IDENTIFIED BY VALUES ':1'
   USING 'euc';
--------------------------------------------------------
--  DDL for DB Link FROM_HRMSTEST_HRMSINQ
--------------------------------------------------------

  CREATE DATABASE LINK "FROM_HRMSTEST_HRMSINQ"
   CONNECT TO "HRMSINQ" IDENTIFIED BY VALUES ':1'
   USING 'hrmstest';
--------------------------------------------------------
--  DDL for Sequence ID_CSV
--------------------------------------------------------

   CREATE SEQUENCE  "LCDRA"."ID_CSV"  MINVALUE 1 MAXVALUE 99999999999 INCREMENT BY 1 START WITH 761 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ID_ISO
--------------------------------------------------------

   CREATE SEQUENCE  "LCDRA"."ID_ISO"  MINVALUE 1 MAXVALUE 99999999 INCREMENT BY 1 START WITH 261 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "LCDRA"."ID_SEQ"  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 321 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ID_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "LCDRA"."ID_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 641 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ID_SEQ_PART
--------------------------------------------------------

   CREATE SEQUENCE  "LCDRA"."ID_SEQ_PART"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 24093956 CACHE 20 NOORDER  CYCLE ;
--------------------------------------------------------
--  DDL for Sequence ID_SEQ_PARTS_LIST
--------------------------------------------------------

   CREATE SEQUENCE  "LCDRA"."ID_SEQ_PARTS_LIST"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 11730 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ID_SEQ_SUP
--------------------------------------------------------

   CREATE SEQUENCE  "LCDRA"."ID_SEQ_SUP"  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 295919 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ID_SEQ_T_INV_PCB_SISO
--------------------------------------------------------

   CREATE SEQUENCE  "LCDRA"."ID_SEQ_T_INV_PCB_SISO"  MINVALUE 1 MAXVALUE 9999999999999 INCREMENT BY 1 START WITH 621 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ID_SEQ_T_INV_SISO
--------------------------------------------------------

   CREATE SEQUENCE  "LCDRA"."ID_SEQ_T_INV_SISO"  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 641 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ID_SEQ_UPIMG
--------------------------------------------------------

   CREATE SEQUENCE  "LCDRA"."ID_SEQ_UPIMG"  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 241 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ID_SMT_T001
--------------------------------------------------------

   CREATE SEQUENCE  "LCDRA"."ID_SMT_T001"  MINVALUE 1 MAXVALUE 9999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ID_TESTUS
--------------------------------------------------------

   CREATE SEQUENCE  "LCDRA"."ID_TESTUS"  MINVALUE 1 MAXVALUE 99999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ID_USER
--------------------------------------------------------

   CREATE SEQUENCE  "LCDRA"."ID_USER"  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence MINSTOCK_T002
--------------------------------------------------------

   CREATE SEQUENCE  "LCDRA"."MINSTOCK_T002"  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 9986 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence S_MTMODEL
--------------------------------------------------------

   CREATE SEQUENCE  "LCDRA"."S_MTMODEL"  MINVALUE 1 MAXVALUE 9999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Table COLOR_MASTER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."COLOR_MASTER" 
   (	"COLOR_CD" VARCHAR2(5 BYTE), 
	"COLOR_NAME" VARCHAR2(20 BYTE), 
	"COLOR_FONT" VARCHAR2(20 BYTE), 
	"SHELF" VARCHAR2(2 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table D000_PULLINGSUMMARY
--------------------------------------------------------

  CREATE TABLE "LCDRA"."D000_PULLINGSUMMARY" 
   (	"CD_COST_TYPE" VARCHAR2(20 BYTE), 
	"CD_FACT" VARCHAR2(20 BYTE), 
	"NO_PART" VARCHAR2(20 BYTE), 
	"NO_ADJ_DIM" VARCHAR2(20 BYTE), 
	"CNTL_POI" NUMBER, 
	"DT_START_YM" VARCHAR2(20 BYTE), 
	"CT_ALL" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table DEL_ECN
--------------------------------------------------------

  CREATE TABLE "LCDRA"."DEL_ECN" 
   (	"NM_ARGMET_STAT" VARCHAR2(20 BYTE), 
	"CD_SPLY" VARCHAR2(20 BYTE), 
	"CD_ORD_CLASS" VARCHAR2(20 BYTE), 
	"MK_SUM_FLG" VARCHAR2(20 BYTE), 
	"NO_PARTS" VARCHAR2(20 BYTE), 
	"NO_ADJ_DIM" VARCHAR2(20 BYTE), 
	"NO_DRAW" VARCHAR2(20 BYTE), 
	"CD_CHG_HIST_ALL" VARCHAR2(20 BYTE), 
	"DT_PO" VARCHAR2(20 BYTE), 
	"DT_DELV" VARCHAR2(20 BYTE), 
	"NO_PO" VARCHAR2(20 BYTE), 
	"MK_PO_CHK_DIGIT" VARCHAR2(20 BYTE), 
	"QT_ORD" VARCHAR2(20 BYTE), 
	"DT_REC" VARCHAR2(20 BYTE), 
	"QT_REC" VARCHAR2(20 BYTE), 
	"CD_DELV_PLACE" VARCHAR2(20 BYTE), 
	"CD_USE_BLOCK" VARCHAR2(20 BYTE), 
	"NO_ORD_CLASS" VARCHAR2(20 BYTE), 
	"CD_ORD_RESN" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table EX_SLANE_APLAN_PLAN
--------------------------------------------------------

  CREATE TABLE "LCDRA"."EX_SLANE_APLAN_PLAN" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL_SEQ" VARCHAR2(10 BYTE), 
	"PLAN_DATE" VARCHAR2(10 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"CELL_NAME" VARCHAR2(5 BYTE), 
	"PRIORITY" VARCHAR2(2 BYTE), 
	"MERCHANDISE_CD" VARCHAR2(10 BYTE), 
	"PLAN_QTY" NUMBER(8,0), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table EX_SLANE_PRODUCTION_DAISHA
--------------------------------------------------------

  CREATE TABLE "LCDRA"."EX_SLANE_PRODUCTION_DAISHA" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"PLAN_DATE" VARCHAR2(8 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"CELL_NAME" VARCHAR2(10 BYTE), 
	"SEQ" NUMBER(8,0), 
	"MERCHANDISE_CD" VARCHAR2(12 BYTE), 
	"DESTINATION" VARCHAR2(10 BYTE), 
	"COLOR" VARCHAR2(10 BYTE), 
	"ROUND" NUMBER(2,0), 
	"FLAG" VARCHAR2(1 BYTE), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table EX_SLANE_PRODUCTION_PLAN
--------------------------------------------------------

  CREATE TABLE "LCDRA"."EX_SLANE_PRODUCTION_PLAN" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL_SEQ" VARCHAR2(10 BYTE), 
	"PLAN_DATE" VARCHAR2(10 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"CELL_NAME" VARCHAR2(5 BYTE), 
	"PRIORITY" VARCHAR2(2 BYTE), 
	"MERCHANDISE_CD" VARCHAR2(10 BYTE), 
	"PLAN_QTY" NUMBER(8,0), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table J002_POC
--------------------------------------------------------

  CREATE TABLE "LCDRA"."J002_POC" 
   (	"NO_PART" VARCHAR2(20 BYTE), 
	"NO_ADJ_DIM" VARCHAR2(20 BYTE), 
	"QT_SNP" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table J300_RECSTATUS
--------------------------------------------------------

  CREATE TABLE "LCDRA"."J300_RECSTATUS" 
   (	"NO_PO" NUMBER, 
	"NO_PART" VARCHAR2(20 BYTE), 
	"QT_ORD" NUMBER, 
	"DT_DELV" VARCHAR2(20 BYTE), 
	"TM_DELV" VARCHAR2(20 BYTE), 
	"VENDER_ID" VARCHAR2(20 BYTE), 
	"PALLETZE" VARCHAR2(20 BYTE), 
	"RACK_ADD" VARCHAR2(20 BYTE), 
	"USE_BLOCK" VARCHAR2(20 BYTE), 
	"DEL_PLACE" VARCHAR2(20 BYTE), 
	"INS_TYPE" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table LCDINFO_F1_T001_PART_LIST
--------------------------------------------------------

  CREATE TABLE "LCDRA"."LCDINFO_F1_T001_PART_LIST" 
   (	"ID_PARTS_LIST" NUMBER, 
	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"PART_NO" VARCHAR2(12 BYTE), 
	"DIM_NO" VARCHAR2(3 BYTE), 
	"CTRL_POINT" VARCHAR2(4 BYTE), 
	"BLOCK_CODE" VARCHAR2(4 BYTE), 
	"PART_NAME" VARCHAR2(150 BYTE), 
	"AREA" VARCHAR2(20 BYTE), 
	"SUPP_CODE" VARCHAR2(4 BYTE), 
	"RESP_NAME_OP" VARCHAR2(150 BYTE), 
	"RESP_NAME_ST" VARCHAR2(150 BYTE), 
	"CTRL_BY" VARCHAR2(20 BYTE), 
	"RESP_TEL" VARCHAR2(4 BYTE), 
	"PART_TYPE" VARCHAR2(20 BYTE), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(20 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table LCDINFO_F1_T002_SUPP_NAME
--------------------------------------------------------

  CREATE TABLE "LCDRA"."LCDINFO_F1_T002_SUPP_NAME" 
   (	"ID" NUMBER, 
	"SUPPTYPE" VARCHAR2(5 BYTE), 
	"NO_ARRANGE" VARCHAR2(20 BYTE), 
	"NM_SPLY_ENG" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table LCDINFO_F1_T003_PARTS_NAME
--------------------------------------------------------

  CREATE TABLE "LCDRA"."LCDINFO_F1_T003_PARTS_NAME" 
   (	"ID" NUMBER, 
	"CD_FACT" VARCHAR2(5 BYTE), 
	"NO_PARTS" VARCHAR2(20 BYTE), 
	"NO_ADJ_DIM" VARCHAR2(10 BYTE), 
	"NM_PARTS_ENG" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table LCDINFO_F1_T004_PART_PRO
--------------------------------------------------------

  CREATE TABLE "LCDRA"."LCDINFO_F1_T004_PART_PRO" 
   (	"PART_NO" VARCHAR2(12 BYTE), 
	"DIM_NO" VARCHAR2(3 BYTE), 
	"CTRL_POINT" VARCHAR2(4 BYTE), 
	"BLOCK_CODE" VARCHAR2(4 BYTE), 
	"SUPP_CODE" VARCHAR2(4 BYTE), 
	"ADJUST_LT" NUMBER(5,2), 
	"CD_DELV_PLACE" VARCHAR2(12 BYTE), 
	"CF_PALLETIZE" VARCHAR2(9 BYTE), 
	"CD_SHELF_ADDRESS" VARCHAR2(12 BYTE), 
	"QT_SAFETY" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table LCDINFO_F1_T005_PART_SUPP
--------------------------------------------------------

  CREATE TABLE "LCDRA"."LCDINFO_F1_T005_PART_SUPP" 
   (	"PART_NO" VARCHAR2(12 BYTE), 
	"DIM_NO" VARCHAR2(3 BYTE), 
	"CTRL_POINT" VARCHAR2(4 BYTE), 
	"BLOCK_CODE" VARCHAR2(4 BYTE), 
	"SUPP_CODE" VARCHAR2(4 BYTE), 
	"NM_PARTS_ENG" VARCHAR2(200 BYTE), 
	"DAY" VARCHAR2(20 BYTE), 
	"TM_STORE_LEAD" NUMBER(3,0), 
	"NO_ARRANGE" VARCHAR2(18 BYTE), 
	"NM_SPLY_ENG" VARCHAR2(200 BYTE), 
	"CT_ALL" NUMBER(18,5), 
	"QT_SNP" NUMBER(10,3), 
	"QT_DELV_LOT" NUMBER(10,3), 
	"PD_DELV_DIRCT" NUMBER(3,0), 
	"PD_FIX_PERIOD_REQUI" NUMBER(3,0), 
	"PD_PO_ISSUE" NUMBER(3,0), 
	"PD_PRDC_GUART" NUMBER(3,0), 
	"PD_MTRL_GUART" NUMBER(3,0), 
	"PD_PRDC_INFO" NUMBER(3,0), 
	"PD_DELV_QTY_ROUND" VARCHAR2(3 BYTE), 
	"CD_PROCESS" VARCHAR2(6 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table LCDINFO_F1_T006_UPLOAD_IMAGE
--------------------------------------------------------

  CREATE TABLE "LCDRA"."LCDINFO_F1_T006_UPLOAD_IMAGE" 
   (	"ID_UPIMG" NUMBER, 
	"PART_NO" VARCHAR2(20 BYTE), 
	"DIM_NO" VARCHAR2(5 BYTE), 
	"CTRL_POINT" VARCHAR2(10 BYTE), 
	"BLOCK_CODE" VARCHAR2(10 BYTE), 
	"SUPP_CODE" VARCHAR2(10 BYTE), 
	"STATUS" VARCHAR2(2 BYTE), 
	"NP_BOX" VARCHAR2(200 BYTE), 
	"DT_BOX" BLOB, 
	"TYPE_BOX" VARCHAR2(100 BYTE), 
	"NP_INBOX" VARCHAR2(200 BYTE), 
	"DT_INBOX" BLOB, 
	"TYPE_INBOX" VARCHAR2(100 BYTE), 
	"NP_PART" VARCHAR2(200 BYTE), 
	"DT_PART" BLOB, 
	"TYPE_PART" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" 
 LOB ("DT_BOX") STORE AS BASICFILE (
  TABLESPACE "DATA" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("DT_INBOX") STORE AS BASICFILE (
  TABLESPACE "DATA" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("DT_PART") STORE AS BASICFILE (
  TABLESPACE "DATA" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table LCDINFO_F1_V001_PART_PRO2
--------------------------------------------------------

  CREATE TABLE "LCDRA"."LCDINFO_F1_V001_PART_PRO2" 
   (	"PART_NO" VARCHAR2(12 BYTE), 
	"DIM_NO" VARCHAR2(3 BYTE), 
	"CTRL_POINT" VARCHAR2(4 BYTE), 
	"BLOCK_CODE" VARCHAR2(4 BYTE), 
	"SUPP_CODE" VARCHAR2(4 BYTE), 
	"ADJUST_LT" NUMBER(5,2), 
	"CD_DELV_PLACE" VARCHAR2(12 BYTE), 
	"CF_PALLETIZE" VARCHAR2(9 BYTE), 
	"CD_SHELF_ADDRESS" VARCHAR2(12 BYTE), 
	"QT_SAFETY" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table MINSTOCK_T000_USER_CONTROL
--------------------------------------------------------

  CREATE TABLE "LCDRA"."MINSTOCK_T000_USER_CONTROL" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"USER_NAME" VARCHAR2(20 BYTE), 
	"PASSWORD" VARCHAR2(20 BYTE), 
	"NAME" VARCHAR2(20 BYTE), 
	"ROLE" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table MINSTOCK_T001_LCD_RESP_PART
--------------------------------------------------------

  CREATE TABLE "LCDRA"."MINSTOCK_T001_LCD_RESP_PART" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"PART_NO" VARCHAR2(12 BYTE), 
	"DIM_NO" VARCHAR2(3 BYTE), 
	"CTRL_POINT" VARCHAR2(4 BYTE), 
	"BLOCK_CODE" VARCHAR2(4 BYTE), 
	"PART_NAME" VARCHAR2(150 BYTE), 
	"AREA" VARCHAR2(20 BYTE), 
	"SUPP_CODE" VARCHAR2(4 BYTE), 
	"RESP_NAME" VARCHAR2(150 BYTE), 
	"RESP_TEL" VARCHAR2(4 BYTE), 
	"PART_TYPE" VARCHAR2(20 BYTE), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(20 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table MINSTOCK_T002_HISTORY_CONTROL
--------------------------------------------------------

  CREATE TABLE "LCDRA"."MINSTOCK_T002_HISTORY_CONTROL" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"PART_NO" VARCHAR2(12 BYTE), 
	"DIM_NO" VARCHAR2(3 BYTE), 
	"CTRL_POINT" VARCHAR2(4 BYTE), 
	"BLOCK_CODE" VARCHAR2(4 BYTE), 
	"PART_NAME" VARCHAR2(150 BYTE), 
	"AREA" VARCHAR2(20 BYTE), 
	"SUPP_CODE" VARCHAR2(4 BYTE), 
	"RESP_NAME" VARCHAR2(30 BYTE), 
	"RESP_TEL" VARCHAR2(4 BYTE), 
	"PART_TYPE" VARCHAR2(20 BYTE), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(20 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(20 BYTE), 
	"SUPP_NAME" VARCHAR2(150 BYTE), 
	"MANAGEMENT_INPUT" VARCHAR2(500 BYTE), 
	"CHECK_MANAGEMENT_STATUS" VARCHAR2(10 BYTE), 
	"DEL_PLACE" VARCHAR2(4 BYTE), 
	"ZONE" VARCHAR2(3 BYTE), 
	"AREA_CODE" VARCHAR2(4 BYTE), 
	"ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table PLAN_SEQ
--------------------------------------------------------

  CREATE TABLE "LCDRA"."PLAN_SEQ" 
   (	"SEQ_NO" NUMBER, 
	"QTY" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table PODETAILFROMSIAM
--------------------------------------------------------

  CREATE TABLE "LCDRA"."PODETAILFROMSIAM" 
   (	"ID" NUMBER, 
	"CD_SPLY_CLASS" NUMBER, 
	"NM_ARGMENT" VARCHAR2(2 CHAR), 
	"CD_ORD_CLASS" NUMBER, 
	"ORD_RES" NUMBER, 
	"MK_SUM_FLG" NUMBER, 
	"CD_INSP_TYPE" VARCHAR2(3 CHAR), 
	"NO_PO" NUMBER, 
	"NO_PART" VARCHAR2(12 CHAR), 
	"NM_PART_ENG" VARCHAR2(50 CHAR), 
	"NO_ADJ_DIM" VARCHAR2(3 CHAR), 
	"NO_INVENT_CTRL" VARCHAR2(4 CHAR), 
	"NO_DRAW" NUMBER, 
	"QT_ORDER" NUMBER, 
	"SYSTEM_DT_DELV" VARCHAR2(8 CHAR), 
	"SYSTEM_TM_DELV" VARCHAR2(6 CHAR), 
	"SUPP_CODE" VARCHAR2(4 CHAR), 
	"CD_DELV_PLACE" VARCHAR2(4 CHAR), 
	"CF_PALLETIZE" VARCHAR2(3 CHAR), 
	"CD_RACK_ADD" VARCHAR2(4 CHAR), 
	"CD_USE_BLOCK" VARCHAR2(4 CHAR), 
	"STATUS" VARCHAR2(20 CHAR), 
	"STATUS_DELIVERY" VARCHAR2(20 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table SMT_T001_TDID
--------------------------------------------------------

  CREATE TABLE "LCDRA"."SMT_T001_TDID" 
   (	"ID" NUMBER, 
	"PART_NO" VARCHAR2(12 BYTE), 
	"SERIAL_NO" VARCHAR2(20 BYTE), 
	"QTY_PACK" NUMBER, 
	"QTY_CURRENT" NUMBER, 
	"PART_REJECT" NUMBER, 
	"EMPTY_PICKUP" NUMBER, 
	"FAILED_PICKUP" NUMBER, 
	"REJECT_BY_VISION" NUMBER, 
	"RESCAN" NUMBER, 
	"FIRST_TIME_USE" DATE, 
	"LAST_TIME_USE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table SUPPORT_SUPP_TYPE
--------------------------------------------------------

  CREATE TABLE "LCDRA"."SUPPORT_SUPP_TYPE" 
   (	"CODE" NUMBER, 
	"SUPPTYPE" VARCHAR2(3 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table SUPPPORT_WEEK_BUNDLE_CODE
--------------------------------------------------------

  CREATE TABLE "LCDRA"."SUPPPORT_WEEK_BUNDLE_CODE" 
   (	"BUNDLE_CODE" VARCHAR2(20 BYTE), 
	"DAY" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table TEST_MTDB
--------------------------------------------------------

  CREATE TABLE "LCDRA"."TEST_MTDB" 
   (	"MODEL" VARCHAR2(20 BYTE), 
	"PART_NO" VARCHAR2(20 BYTE), 
	"DIM" VARCHAR2(20 BYTE), 
	"GROUP_CD" VARCHAR2(20 BYTE), 
	"USAGE" VARCHAR2(10 BYTE), 
	"USAGE_TYPE" VARCHAR2(20 BYTE), 
	"MT_MODEL" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table TEST_REGIS
--------------------------------------------------------

  CREATE TABLE "LCDRA"."TEST_REGIS" 
   (	"EMP_NO" VARCHAR2(20 BYTE), 
	"PASSWORD" VARCHAR2(20 BYTE), 
	"E_MAIL" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table TEST_USER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."TEST_USER" 
   (	"EMP_NO" VARCHAR2(20 BYTE), 
	"GNAME_THA" VARCHAR2(100 BYTE), 
	"FNAME_THA" VARCHAR2(100 BYTE), 
	"GNAME_ENG" VARCHAR2(100 BYTE), 
	"FNAME_ENG" VARCHAR2(100 BYTE), 
	"ENTR_ADATE" DATE, 
	"LEVEL_USER" VARCHAR2(5 BYTE), 
	"FACTORY_CD" VARCHAR2(4 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table TR
--------------------------------------------------------

  CREATE TABLE "LCDRA"."TR" 
   (	"PART_NO" VARCHAR2(20 BYTE), 
	"DIM" VARCHAR2(20 BYTE), 
	"FLAGE" VARCHAR2(20 BYTE), 
	"STATUS" VARCHAR2(20 BYTE), 
	"PO_NO" VARCHAR2(20 BYTE), 
	"PARTIAL" VARCHAR2(20 BYTE), 
	"PROCESS" VARCHAR2(20 BYTE), 
	"DWG" VARCHAR2(20 BYTE), 
	"ECN_HIST" VARCHAR2(20 BYTE), 
	"HISTORY" VARCHAR2(20 BYTE), 
	"PO_INPUT" VARCHAR2(20 BYTE), 
	"DEL_DATE" VARCHAR2(20 BYTE), 
	"ORDER_QT" VARCHAR2(20 BYTE), 
	"ART_NM" VARCHAR2(50 BYTE), 
	"PLACE" VARCHAR2(20 BYTE), 
	"REASON" VARCHAR2(20 BYTE), 
	"COMENT" VARCHAR2(20 BYTE), 
	"DT_REC" VARCHAR2(20 BYTE), 
	"QT_REC" VARCHAR2(20 BYTE), 
	"DT_ACC" VARCHAR2(20 BYTE), 
	"QT_ACC" VARCHAR2(20 BYTE), 
	"SUPP" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_LCD_WARNNINGLIST
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_LCD_WARNNINGLIST" 
   (	"NO_PARTS" VARCHAR2(36 BYTE), 
	"NO_ADJ_DIM" VARCHAR2(9 BYTE), 
	"CD_USE_BLOCK" VARCHAR2(18 BYTE), 
	"DT_DATE" VARCHAR2(24 BYTE), 
	"QT_ORDER" NUMBER(12,3), 
	"SUM_QT_DEMAND" NUMBER(12,3), 
	"QT_NET_DEMAND" NUMBER(12,3), 
	"QT_EFFCTV_INVNTRY" NUMBER(12,3), 
	"QT_NET_EFFCTV_INVNTRY" NUMBER(12,3), 
	"PD_PO_ISSUE" NUMBER(3,0), 
	"PD_PO_ISSUE_POC" NUMBER(3,0), 
	"CD_SPLY" VARCHAR2(12 BYTE), 
	"SUPPLIER1" VARCHAR2(18 BYTE), 
	"SUPPLIER2" VARCHAR2(10 BYTE), 
	"TM_STORE_LEAD" NUMBER(3,0), 
	"CF_CHILD_BASE" VARCHAR2(9 BYTE), 
	"ORA" NUMBER(12,3), 
	"SLT" NUMBER(12,3), 
	"BRA" NUMBER(12,3), 
	"BBB" NUMBER(12,3), 
	"DRA" NUMBER(12,3), 
	"ZZZ" NUMBER(12,3), 
	"ARA" NUMBER(12,3), 
	"DT_DELV" VARCHAR2(24 BYTE), 
	"NO_PO" VARCHAR2(27 BYTE), 
	"MK_PO_CHK_DIGIT" NUMBER(1,0), 
	"QT_ORD" NUMBER(12,3), 
	"RESP_NAME_OP" VARCHAR2(150 BYTE), 
	"RESP_NAME_ST" VARCHAR2(150 BYTE), 
	"CTRL_BY" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_MTDB_CTRLDIE_TRANSFER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER" 
   (	"MT_MODEL" VARCHAR2(20 BYTE), 
	"PART_NO" VARCHAR2(13 BYTE), 
	"DIE_MAKER" VARCHAR2(20 BYTE), 
	"INJ_PLACE_DS" VARCHAR2(20 BYTE), 
	"MOLD_NO" VARCHAR2(6 BYTE), 
	"DS_FINAL_RESULT" VARCHAR2(20 BYTE), 
	"ETA_TIMES" NUMBER(2,0), 
	"ACTUAL_DWG" VARCHAR2(20 BYTE), 
	"PLAN_TRY_DT" DATE, 
	"PLAN_DS_DT" DATE, 
	"PTQA_REC_DT" DATE, 
	"PE_REC_DT" DATE, 
	"JUD_FN_DT" DATE, 
	"SCAN_DT" DATE, 
	"RESULT_DS" VARCHAR2(20 BYTE), 
	"DWG_NO_DS" VARCHAR2(20 BYTE), 
	"JUD_FN_DT_DS" DATE, 
	"SCAN_DATE_DS" DATE, 
	"DIE_NEED_TRANSFER" VARCHAR2(20 BYTE), 
	"PLAN_ETD" DATE, 
	"PLAN_ETA" DATE, 
	"ACT_ETA" DATE, 
	"TRANSFER_BY" VARCHAR2(20 BYTE), 
	"CREATE_DT" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DT" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE), 
	"STATUS_ID" VARCHAR2(10 BYTE), 
	"DEPT_UPLOAD" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;

   COMMENT ON COLUMN "LCDRA"."T_MTDB_CTRLDIE_TRANSFER"."ACTUAL_DWG" IS 'HISTORY';
--------------------------------------------------------
--  DDL for Table T_MTDB_CTRLDIE_TRANSFER2
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER2" 
   (	"MT_MODEL" VARCHAR2(20 BYTE), 
	"PART_NO" VARCHAR2(13 BYTE), 
	"DIE_MAKER" VARCHAR2(20 BYTE), 
	"INJ_PLACE_DS" VARCHAR2(20 BYTE), 
	"MOLD_NO" VARCHAR2(6 BYTE), 
	"DS_FINAL_RESULT" VARCHAR2(20 BYTE), 
	"ETA_TIMES" NUMBER(2,0), 
	"ACTUAL_DWG" VARCHAR2(20 BYTE), 
	"PLAN_TRY_DT" DATE, 
	"PLAN_DS_DT" DATE, 
	"PTQA_REC_DT" DATE, 
	"PTQA_REC_DT_DS" DATE, 
	"PE_REC_DT" DATE, 
	"PE_REC_DATE_DS" DATE, 
	"JUD_FN_DT" DATE, 
	"JUD_FN_DT_D" DATE, 
	"SCAN_DT" DATE, 
	"SCAN_DT_DS" DATE, 
	"RESULT_DS" VARCHAR2(20 BYTE), 
	"RESULT_DS_N1" VARCHAR2(20 BYTE), 
	"DWG_NO_DS" VARCHAR2(20 BYTE), 
	"DWG_NO_DS_N1" VARCHAR2(20 BYTE), 
	"JUD_FN_DT_DS" DATE, 
	"JUD_FN_DT_DS_N1" DATE, 
	"SCAN_DATE_DS" DATE, 
	"SCAN_DATE_DS_N1" DATE, 
	"DIE_NEED_TRANSFER" VARCHAR2(20 BYTE), 
	"PLAN_ETD" DATE, 
	"PLAN_ETA" DATE, 
	"ACT_ETA" DATE, 
	"TRANSFER_BY" VARCHAR2(20 BYTE), 
	"CREATE_DT" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DT" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE), 
	"STATUS_ID" VARCHAR2(10 BYTE), 
	"DEPT_UPLOAD" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_MTDB_CTRLDIE_TRANSFER_PART
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER_PART" 
   (	"MT_MODEL" VARCHAR2(20 BYTE), 
	"PART_NO" VARCHAR2(13 BYTE), 
	"DIM" VARCHAR2(5 BYTE), 
	"DWG_NO" VARCHAR2(10 BYTE), 
	"MOLD_NO" VARCHAR2(5 BYTE), 
	"SUP_CD" VARCHAR2(10 BYTE), 
	"PO_STATUS" VARCHAR2(20 BYTE), 
	"PLAN_ETD" DATE, 
	"PLAN_ETA" DATE, 
	"ACT_ETA" DATE, 
	"ACT_JUD" DATE, 
	"PO_NO" VARCHAR2(20 BYTE), 
	"QTY_REC" NUMBER, 
	"QTY_APV" NUMBER, 
	"CURRENCY" VARCHAR2(20 BYTE), 
	"UNIT_PRICE" VARCHAR2(20 BYTE), 
	"GROUP_CD" VARCHAR2(20 BYTE), 
	"CREATE_DT" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DT" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE), 
	"STATUS_ID" VARCHAR2(10 BYTE) DEFAULT NULL, 
	"DEPT_UPLOAD" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_MTDB_DS_JUDGE_LT_MASTER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_DS_JUDGE_LT_MASTER" 
   (	"DEPT" VARCHAR2(10 BYTE), 
	"CHECK_DAY" NUMBER(2,0), 
	"CREATE_DT" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DT" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_MTDB_DS_LEADTIME_MASTER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_DS_LEADTIME_MASTER" 
   (	"DS_CTGY" VARCHAR2(10 BYTE), 
	"DS_TIMES" NUMBER(2,0), 
	"WORKING_DAY" NUMBER(3,0), 
	"CREATE_DT" DATE, 
	"CREATE_BY" VARCHAR2(20 BYTE), 
	"UPDATE_DT" DATE, 
	"UPDATE_BY" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_MTDB_EXTRA_ORDER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_EXTRA_ORDER" 
   (	"MT_MODEL" VARCHAR2(20 BYTE), 
	"CATEGORY" VARCHAR2(20 BYTE), 
	"MODEL" VARCHAR2(20 BYTE), 
	"MTM_NO" VARCHAR2(20 BYTE), 
	"SUB" VARCHAR2(3 BYTE), 
	"PART_NO" VARCHAR2(20 BYTE), 
	"PART_NAME" VARCHAR2(100 BYTE), 
	"USAGE" VARCHAR2(10 BYTE), 
	"PROCESS" VARCHAR2(10 BYTE), 
	"SUP_CD" VARCHAR2(20 BYTE), 
	"DETAILS" VARCHAR2(200 BYTE), 
	"PERSON_INCHARGE" VARCHAR2(20 BYTE), 
	"RESULT" VARCHAR2(20 BYTE), 
	"ISSUE_PR_DT" DATE, 
	"PLAN_DEL_DT" DATE, 
	"ACT_REC_DT" DATE, 
	"ACT_JUD_DT" DATE, 
	"PO_NO" VARCHAR2(25 BYTE), 
	"ORDER_QTY" NUMBER, 
	"REC_QTY" NUMBER, 
	"REMARK" VARCHAR2(100 BYTE), 
	"CREATE_DT" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DT" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE), 
	"STATUS_ID" VARCHAR2(20 BYTE), 
	"COUNT_ITEMS" VARCHAR2(2 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_MTDB_LEADTIME_DRW_MASTER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_LEADTIME_DRW_MASTER" 
   (	"MT_MODEL" VARCHAR2(20 BYTE), 
	"TARGET_DS" VARCHAR2(20 BYTE), 
	"LEADTIME_WK" NUMBER(4,1), 
	"CREATE_DT" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DT" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_MTDB_MASTER_MT_ORDER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_MASTER_MT_ORDER" 
   (	"MT_MODEL" VARCHAR2(20 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"PART_NO" VARCHAR2(13 BYTE), 
	"DIM" VARCHAR2(10 BYTE), 
	"DWG_NO" VARCHAR2(10 BYTE), 
	"IN_HOUSE_OD_NO" VARCHAR2(20 BYTE), 
	"QTY_ORDER" NUMBER(20,0), 
	"GROUP_CD" VARCHAR2(20 BYTE), 
	"CREATE_DT" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DT" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE), 
	"STATUS_ID" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_MTDB_MASTER_PARTLIST
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_MASTER_PARTLIST" 
   (	"MT_MODEL" VARCHAR2(20 BYTE), 
	"STATUS" VARCHAR2(20 BYTE), 
	"COLOR" VARCHAR2(10 BYTE), 
	"CATEGORY" VARCHAR2(20 BYTE), 
	"ORDER_BY" VARCHAR2(25 BYTE), 
	"ASSY_PLACE" VARCHAR2(20 BYTE), 
	"MAIN_SUB" VARCHAR2(10 BYTE), 
	"INPUT_PHASE" VARCHAR2(20 BYTE), 
	"LV_INP_DE" VARCHAR2(20 BYTE), 
	"LV_INP_MT" VARCHAR2(20 BYTE), 
	"UNIT_NO" VARCHAR2(20 BYTE), 
	"UNIT_NAME" VARCHAR2(20 BYTE), 
	"PART_NO" VARCHAR2(13 BYTE), 
	"DIM" VARCHAR2(5 BYTE), 
	"PART_NAME" VARCHAR2(200 BYTE), 
	"DWG_NO" VARCHAR2(5 BYTE), 
	"ECN_NO" VARCHAR2(20 BYTE), 
	"ECN_REC_DT" DATE, 
	"ECN_PHASE" VARCHAR2(20 BYTE), 
	"ECN_DETAIL" VARCHAR2(300 BYTE), 
	"PROCESS" VARCHAR2(5 BYTE), 
	"TEXTURE" VARCHAR2(10 BYTE), 
	"MIRROR" VARCHAR2(10 BYTE), 
	"SCREEN" VARCHAR2(10 BYTE), 
	"SPRAY" VARCHAR2(10 BYTE), 
	"CAVITY" VARCHAR2(5 BYTE), 
	"SUP_CODE" VARCHAR2(20 BYTE), 
	"INJ_SUPPLIER" VARCHAR2(50 BYTE), 
	"DIE_SUPPLIER" VARCHAR2(50 BYTE), 
	"DIE_CONTROL" VARCHAR2(50 BYTE), 
	"DIE_JUDGE_RESP" VARCHAR2(20 BYTE), 
	"MOLD_NO" VARCHAR2(10 BYTE), 
	"PART_CM_MO_FM" VARCHAR2(100 BYTE), 
	"COUNTRY" VARCHAR2(10 BYTE), 
	"CONTROL" VARCHAR2(10 BYTE), 
	"MP_DWG_ISU_JP" DATE, 
	"DS_PLAN_DT" DATE, 
	"ETM_DS_OK_TM" NUMBER(3,0), 
	"INJ_PLACE" VARCHAR2(5 BYTE), 
	"REC_DT" DATE, 
	"REMARK_DS" VARCHAR2(150 BYTE), 
	"ACT_ETD" DATE, 
	"ISU_PR_DT" DATE, 
	"ISU_PR_DWG" VARCHAR2(10 BYTE), 
	"REMARK" VARCHAR2(200 BYTE), 
	"CREATE_DT" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DT" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE), 
	"STATUS_ID" VARCHAR2(10 BYTE) DEFAULT NULL, 
	"COMMON_LIST" VARCHAR2(3 BYTE), 
	"COUNT_DS" VARCHAR2(3 BYTE), 
	"COUNT_PART_NO" VARCHAR2(2 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_MTDB_MASTER_SERIES
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_MASTER_SERIES" 
   (	"MT_MODEL" VARCHAR2(20 BYTE), 
	"MODEL" VARCHAR2(20 BYTE), 
	"CREATE_DT" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_MTDB_MASTER_STATUS
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_MASTER_STATUS" 
   (	"STATUS_ID" NUMBER(1,0), 
	"STATUS_NAME" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_MTDB_MASTER_USAGE
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_MASTER_USAGE" 
   (	"MT_MODEL" VARCHAR2(20 BYTE), 
	"PART_NO" VARCHAR2(13 BYTE), 
	"DIM" VARCHAR2(5 BYTE), 
	"SUP_CD" VARCHAR2(10 BYTE), 
	"USAGE" VARCHAR2(10 BYTE), 
	"USAGE_TYPE" VARCHAR2(20 BYTE), 
	"CREATE_DT" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DT" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE), 
	"STATUS" NUMBER(1,0) DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_MTDB_ROLE
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_ROLE" 
   (	"ROLE_ID" NUMBER, 
	"ROLE_NAME" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_MTDB_SIAM
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_SIAM" 
   (	"MT_MODEL" VARCHAR2(20 BYTE), 
	"PART_NO" VARCHAR2(13 BYTE), 
	"DIM" VARCHAR2(5 BYTE), 
	"DWG_NO" VARCHAR2(20 BYTE), 
	"SUP_CD" VARCHAR2(20 BYTE), 
	"STATUS" VARCHAR2(20 BYTE), 
	"ORDER_QTY" VARCHAR2(20 BYTE), 
	"PO" VARCHAR2(20 BYTE), 
	"PARTIAL" VARCHAR2(20 BYTE), 
	"DEL_PART" DATE, 
	"ACC_DT" DATE, 
	"ACP_DT" DATE, 
	"ACC_QT" VARCHAR2(20 BYTE), 
	"ACP_QT" VARCHAR2(20 BYTE), 
	"CURRENCY" VARCHAR2(20 BYTE), 
	"PUR_PRICE" VARCHAR2(20 BYTE), 
	"GROUP_CD" VARCHAR2(20 BYTE), 
	"CREATE_DT" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DT" DATE, 
	"UPADTE_BY" VARCHAR2(10 BYTE), 
	"STATUS_ID" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_MTDB_STATUS
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_STATUS" 
   (	"STATUS_ID" NUMBER, 
	"STATUS_NAME" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_MTDB_USER_LOGIN
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_USER_LOGIN" 
   (	"USER_ID" VARCHAR2(10 BYTE), 
	"NAME" VARCHAR2(100 BYTE), 
	"SURNAME" VARCHAR2(100 BYTE), 
	"PASSWORD" VARCHAR2(13 BYTE), 
	"DEPT" VARCHAR2(10 BYTE), 
	"ROLE" VARCHAR2(10 BYTE), 
	"EMAIL" VARCHAR2(100 BYTE), 
	"CREATE_DT" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DT" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_MTDB_WORKING_DAY_MASTER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_MTDB_WORKING_DAY_MASTER" 
   (	"DT_WORK" VARCHAR2(10 BYTE), 
	"MK_WORK" VARCHAR2(1 BYTE), 
	"DAY" VARCHAR2(5 BYTE), 
	"CREATE_DT" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DT" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE), 
	"YEAR" NUMBER, 
	"VALUE" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SHIP_ORD_ADDRESS_MASTER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SHIP_ORD_ADDRESS_MASTER" 
   (	"COMPANY_CD" VARCHAR2(5 BYTE), 
	"COMPANY_NM" VARCHAR2(50 BYTE), 
	"CONTACT_NM" VARCHAR2(50 BYTE), 
	"ADDRESS_1" VARCHAR2(50 BYTE), 
	"ADDRESS_2" VARCHAR2(50 BYTE), 
	"ADDRESS_3" VARCHAR2(50 BYTE), 
	"ADDRESS_4" VARCHAR2(50 BYTE), 
	"ADDRESS_5" VARCHAR2(50 BYTE), 
	"TEL" VARCHAR2(30 BYTE), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SHIP_ORD_COMMODITY_MASTER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SHIP_ORD_COMMODITY_MASTER" 
   (	"PART_NO" VARCHAR2(30 BYTE), 
	"DIM_NO" VARCHAR2(10 BYTE), 
	"PART_NAME" VARCHAR2(100 BYTE), 
	"UNIT" VARCHAR2(10 BYTE), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SHIP_ORD_IT_CTRL_ORDER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SHIP_ORD_IT_CTRL_ORDER" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"SHIPPING_ORDER_NO" VARCHAR2(10 BYTE), 
	"USER_REQ" VARCHAR2(7 BYTE), 
	"WC_REQ" VARCHAR2(5 BYTE), 
	"SHIPPING_TYPE" VARCHAR2(20 BYTE), 
	"SHIPPING_METHOD" VARCHAR2(20 BYTE), 
	"SHIPPER_CD" VARCHAR2(5 BYTE), 
	"SHIPPER_NM" VARCHAR2(50 BYTE), 
	"SHIP_ATTN" VARCHAR2(30 BYTE), 
	"SHIP_TEL" VARCHAR2(30 BYTE), 
	"CONSIGNEE_CD" VARCHAR2(5 BYTE), 
	"CONSIGNEE_NM" VARCHAR2(50 BYTE), 
	"CONSIGN_ATTN" VARCHAR2(30 BYTE), 
	"CONSIGN_TEL" VARCHAR2(30 BYTE), 
	"ACCOUNTEE_CD" VARCHAR2(5 BYTE), 
	"ACCOUNTTEE_NM" VARCHAR2(50 BYTE), 
	"ACC_ATTN" VARCHAR2(30 BYTE), 
	"ACC_TEL" VARCHAR2(30 BYTE), 
	"COMMODITY_SPECIAL" VARCHAR2(25 BYTE), 
	"TOTAL_PG" NUMBER(10,0), 
	"UNIT_PG" VARCHAR2(5 BYTE), 
	"TOTAL_DIMENSION" NUMBER(10,2), 
	"UNIT_DIMENSION" VARCHAR2(5 BYTE), 
	"TOTAL_QTY" NUMBER(10,0), 
	"QTY_UNIT" VARCHAR2(10 BYTE), 
	"UNIT_PRICE" NUMBER(10,2), 
	"CURRENCY" VARCHAR2(10 BYTE), 
	"TOTAL_NW" NUMBER(10,2), 
	"NW_UNIT" VARCHAR2(5 BYTE), 
	"NW_UNIT_AMT" VARCHAR2(5 BYTE), 
	"TOTAL_GW" NUMBER(10,2), 
	"GW_UNIT" VARCHAR2(5 BYTE), 
	"GW_UNIT_AMT" VARCHAR2(5 BYTE), 
	"PAYMENT_TM" VARCHAR2(20 BYTE), 
	"REMIT_PAY" VARCHAR2(60 BYTE), 
	"OTHER_PAY" VARCHAR2(60 BYTE), 
	"FREIGHT_CHARGE" VARCHAR2(10 BYTE), 
	"TRANSPORT_CHARGE" VARCHAR2(10 BYTE), 
	"FORMALITY_CHARGE" VARCHAR2(10 BYTE), 
	"CONDITION_PRICE" VARCHAR2(3 BYTE), 
	"REASON_NON_ISSUE" VARCHAR2(50 BYTE), 
	"PLAN_ETD" VARCHAR2(8 BYTE), 
	"RETURN_DT" VARCHAR2(8 BYTE), 
	"ACTUAL_ETD" VARCHAR2(8 BYTE), 
	"DUTY" VARCHAR2(10 BYTE), 
	"DUTY_PAY" VARCHAR2(20 BYTE), 
	"CREATE_DATE" VARCHAR2(8 BYTE), 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" VARCHAR2(8 BYTE), 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SHIP_ORD_ORIGIN_MASTER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SHIP_ORD_ORIGIN_MASTER" 
   (	"ORIGIN" VARCHAR2(20 BYTE), 
	"SUB_ORIGIN" VARCHAR2(100 BYTE), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_CALCULATE_ACTUAL
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_CALCULATE_ACTUAL" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"PLAN_DATE" VARCHAR2(8 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"ACTUAL_Q1" NUMBER(8,0), 
	"ACTUAL_Q2" NUMBER(8,0), 
	"ACTUAL_Q3" NUMBER(8,0), 
	"ACTUAL_Q4" NUMBER(8,0), 
	"ACTUAL_Q5" NUMBER(8,0), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DAISHA_GROUP
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DAISHA_GROUP" 
   (	"DAISHA_GROUP" VARCHAR2(2 BYTE), 
	"DAISHA_GROUP_N" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DAISHA_MASTER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL_SEQ" VARCHAR2(10 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"MODEL_ALL" VARCHAR2(150 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"DAISHA_TYPE" VARCHAR2(2 BYTE), 
	"DAISHA_GROUP" VARCHAR2(2 BYTE), 
	"MIN" NUMBER(2,0), 
	"MAX" NUMBER(2,0), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE), 
	"SNP" NUMBER(3,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DAISHA_PROGRESSIVE
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"PLAN_DATE" VARCHAR2(8 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"CELL_NAME" VARCHAR2(10 BYTE), 
	"DAISHA_TYPE" VARCHAR2(2 BYTE), 
	"DAISHA_GROUP" VARCHAR2(2 BYTE), 
	"SEQ" NUMBER(9,0), 
	"ROUND" NUMBER(2,0), 
	"MERCHANDISE_CD" VARCHAR2(12 BYTE), 
	"DESTINATION" VARCHAR2(10 BYTE), 
	"COLOR" VARCHAR2(10 BYTE), 
	"LOCATION" VARCHAR2(10 BYTE), 
	"PLAN_PICK_DT" VARCHAR2(8 BYTE), 
	"PLAN_PICK_TM" VARCHAR2(8 BYTE), 
	"ACT_PICK_DT" VARCHAR2(8 BYTE), 
	"ACT_PICK_TM" VARCHAR2(8 BYTE), 
	"SLANE_IN_DT" VARCHAR2(8 BYTE), 
	"SLANE_IN_TM" VARCHAR2(8 BYTE), 
	"BLANE_SIGNAL_DT" VARCHAR2(8 BYTE), 
	"BLANE_SIGNAL_TM" VARCHAR2(8 BYTE), 
	"PLAN_OUT_SLANE_DT" VARCHAR2(8 BYTE), 
	"PLAN_OUT_SLANE_TM" VARCHAR2(8 BYTE), 
	"ACT_OUT_SLANE_DT" VARCHAR2(8 BYTE), 
	"ACT_OUT_SLANE_TM" VARCHAR2(8 BYTE), 
	"BLANE_IN_DT" VARCHAR2(8 BYTE), 
	"BLANE_IN_TM" VARCHAR2(8 BYTE), 
	"BLANE_OUT_DT" VARCHAR2(8 BYTE), 
	"BLANE_OUT_TM" VARCHAR2(8 BYTE), 
	"ORDER_NO" NUMBER(2,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DAISHA_TYPE
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DAISHA_TYPE" 
   (	"DAISHA_TYPE" VARCHAR2(2 BYTE), 
	"DAISHA_TYPE_N" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DELIVERY_CYCLE_MASTER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DELIVERY_CYCLE_MASTER" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"TYPE" VARCHAR2(10 BYTE), 
	"ZONE" VARCHAR2(2 BYTE), 
	"CYCLE_TIME" NUMBER(4,0), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DNM_OVERTIME_CD
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DNM_OVERTIME_CD" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"OVERTIME_CD" VARCHAR2(50 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"OVERTIME_BEGIN" VARCHAR2(5 BYTE), 
	"OVERTIME_END" VARCHAR2(5 BYTE), 
	"WORKINGTIME_MIN" NUMBER(4,0), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DNM_RLTMPLANBYSHF_W
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DNM_RLTMPLANBYSHF_W" 
   (	"SEQ" NUMBER(7,0), 
	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"CAL_DATE" VARCHAR2(8 BYTE), 
	"CAL_TIME" VARCHAR2(5 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(3 BYTE), 
	"CELL_NAME" VARCHAR2(20 BYTE), 
	"PLAN_QTY_BY_SHIFT" NUMBER(8,0), 
	"REALTIME_PLAN_QTY" NUMBER(8,0), 
	"ACTUAL_QTY" NUMBER(8,0), 
	"DIFF_QTY" NUMBER(8,0), 
	"CAP_QTY" NUMBER(8,0), 
	"CYCLE_TIME" NUMBER(7,2), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE), 
	"HISTORY_ENTRY_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DNM_WORKSHIFT_CD
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"WORKSHIFT_CD" VARCHAR2(50 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"WORK1_BEGIN" VARCHAR2(5 BYTE), 
	"WORK1_END" VARCHAR2(5 BYTE), 
	"BREAK1_BEGIN" VARCHAR2(5 BYTE), 
	"BREAK1_END" VARCHAR2(5 BYTE), 
	"WORK2_BEGIN" VARCHAR2(5 BYTE), 
	"WORK2_END" VARCHAR2(5 BYTE), 
	"BREAK2_BEGIN" VARCHAR2(5 BYTE), 
	"BREAK2_END" VARCHAR2(5 BYTE), 
	"WORK3_BEGIN" VARCHAR2(5 BYTE), 
	"WORK3_END" VARCHAR2(5 BYTE), 
	"BREAK3_BEGIN" VARCHAR2(5 BYTE), 
	"BREAK3_END" VARCHAR2(5 BYTE), 
	"WORK4_BEGIN" VARCHAR2(5 BYTE), 
	"WORK4_END" VARCHAR2(5 BYTE), 
	"WORKINGTIME_MIN" NUMBER(4,0), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_DNM_WORKSHIFT_N_CAP
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_N_CAP" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"PLAN_DATE" VARCHAR2(8 BYTE), 
	"LINE_CD" VARCHAR2(3 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"WORKSHIFT_CD_DAY" VARCHAR2(50 BYTE), 
	"OVERTIME_CD_DAY" VARCHAR2(50 BYTE), 
	"WORKSHIFT_CD_NIGHT" VARCHAR2(50 BYTE), 
	"OVERTIME_CD_NIGHT" VARCHAR2(50 BYTE), 
	"CAP_QTY" NUMBER(8,0), 
	"CYCLE_TIME" NUMBER(7,2), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_MASTER_COLOR_SH
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_MASTER_COLOR_SH" 
   (	"MODEL" VARCHAR2(10 BYTE), 
	"SHELF" VARCHAR2(5 BYTE), 
	"COLOR" VARCHAR2(3 BYTE), 
	"FLAG" VARCHAR2(1 BYTE), 
	"DAISHA_TYPE" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_METRIX_PART_MASTER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"DAISHA_TYPE" VARCHAR2(2 BYTE), 
	"DAISHA_GROUP" VARCHAR2(2 BYTE), 
	"PART_NO" VARCHAR2(12 BYTE), 
	"DIM_NO" VARCHAR2(3 BYTE), 
	"PART_NAME" VARCHAR2(100 BYTE), 
	"SUPP_CD" VARCHAR2(4 BYTE), 
	"SUPP_NAME" VARCHAR2(20 BYTE), 
	"FLG_DIFF" VARCHAR2(1 BYTE), 
	"COLOR" VARCHAR2(5 BYTE), 
	"SNP" NUMBER(3,0), 
	"QTY" VARCHAR2(3 BYTE), 
	"ORDER_01" NUMBER(2,0), 
	"ORDER_02" NUMBER(2,0), 
	"ORDER_03" NUMBER(2,0), 
	"ORDER_04" NUMBER(2,0), 
	"ORDER_05" NUMBER(2,0), 
	"ORDER_06" NUMBER(2,0), 
	"ORDER_07" NUMBER(2,0), 
	"ORDER_08" NUMBER(2,0), 
	"ORDER_09" NUMBER(2,0), 
	"ORDER_10" NUMBER(2,0), 
	"ORDER_11" NUMBER(2,0), 
	"ORDER_12" NUMBER(2,0), 
	"ORDER_13" NUMBER(2,0), 
	"ORDER_14" NUMBER(2,0), 
	"ORDER_15" NUMBER(2,0), 
	"ORDER_16" NUMBER(2,0), 
	"ORDER_17" NUMBER(2,0), 
	"ORDER_18" NUMBER(2,0), 
	"ORDER_19" NUMBER(2,0), 
	"ORDER_20" NUMBER(2,0), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_PRODUCTION_PLAN
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL_SEQ" VARCHAR2(10 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"PLAN_DATE" VARCHAR2(10 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"CELL_NAME" VARCHAR2(20 BYTE), 
	"PRIORITY" VARCHAR2(2 BYTE), 
	"MERCHANDISE_CD" VARCHAR2(10 BYTE), 
	"PLAN_QTY" NUMBER(8,0), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_PRODUCTION_PLAN_DAISHA
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN_DAISHA" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"PLAN_DATE" VARCHAR2(8 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"CELL_NAME" VARCHAR2(10 BYTE), 
	"PRIORITY" VARCHAR2(2 BYTE), 
	"SEQ" NUMBER(8,0), 
	"MERCHANDISE_CD" VARCHAR2(12 BYTE), 
	"DESTINATION" VARCHAR2(10 BYTE), 
	"COLOR" VARCHAR2(10 BYTE), 
	"ROUND" NUMBER(2,0), 
	"FLAG" VARCHAR2(1 BYTE), 
	"CREATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(10 BYTE), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_PROGRESS_ORDER_DAISHA
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"PLAN_DATE" VARCHAR2(8 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"DAISHA_TYPE" VARCHAR2(2 BYTE), 
	"DAISHA_GROUP" VARCHAR2(2 BYTE), 
	"ROUND" VARCHAR2(2 BYTE), 
	"ORDER_NO" NUMBER(2,0), 
	"PLAN_TIME" VARCHAR2(8 BYTE), 
	"ACTUAL_TIME" VARCHAR2(8 BYTE), 
	"DIFF" NUMBER(4,0), 
	"MIN_BLANE" VARCHAR2(8 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_REC_EMPTY_DAISHA
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"MODEL" VARCHAR2(10 BYTE), 
	"CAL_DATE" VARCHAR2(8 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"CELL_NAME" VARCHAR2(5 BYTE), 
	"DAISHA_TYPE" VARCHAR2(2 BYTE), 
	"DAISHA_GROUP" VARCHAR2(2 BYTE), 
	"TOTAL_EMPTY" NUMBER(2,0), 
	"CREATE_DATE" DATE, 
	"UPDATE_DATE" DATE, 
	"ROUND" NUMBER(2,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_TEMP_PROCESS
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" 
   (	"MODEL" VARCHAR2(10 BYTE), 
	"PLAN_DATE" VARCHAR2(8 BYTE), 
	"SHIFT" VARCHAR2(1 BYTE), 
	"LINE_CD" VARCHAR2(2 BYTE), 
	"DAISHA_TYPE" VARCHAR2(2 BYTE), 
	"DAISHA_GROUP" VARCHAR2(2 BYTE), 
	"SEQ" NUMBER(9,0), 
	"ROUND" NUMBER(2,0), 
	"DESTINATION" VARCHAR2(10 BYTE), 
	"COLOR" VARCHAR2(10 BYTE), 
	"LOCATION" VARCHAR2(10 BYTE), 
	"PROCESS_ID" NUMBER(1,0), 
	"PROCESS_NAME" VARCHAR2(20 BYTE), 
	"STATUS" VARCHAR2(10 BYTE), 
	"TIME" VARCHAR2(8 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table T_SLANE_USER
--------------------------------------------------------

  CREATE TABLE "LCDRA"."T_SLANE_USER" 
   (	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"EMP_NO" VARCHAR2(7 BYTE), 
	"PASSWORD" VARCHAR2(20 BYTE), 
	"GNAME_ENG" VARCHAR2(20 BYTE), 
	"FNAME_ENG" VARCHAR2(20 BYTE), 
	"ROLE" VARCHAR2(6 BYTE), 
	"EMAIL" VARCHAR2(40 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table WEBLCD_T000_USER_CONTROL
--------------------------------------------------------

  CREATE TABLE "LCDRA"."WEBLCD_T000_USER_CONTROL" 
   (	"ID" NUMBER, 
	"FACTORY_CD" VARCHAR2(20 BYTE), 
	"USER_NAME" VARCHAR2(20 BYTE), 
	"PASSWORD" VARCHAR2(20 BYTE), 
	"NAME" VARCHAR2(100 BYTE), 
	"ROLE" VARCHAR2(20 BYTE), 
	"EMAIL" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Table WEBLCD_T001_ISO_DOC_CONTROL
--------------------------------------------------------

  CREATE TABLE "LCDRA"."WEBLCD_T001_ISO_DOC_CONTROL" 
   (	"ID" NUMBER, 
	"FACTORY_CD" VARCHAR2(2 BYTE), 
	"DOC_NO" NUMBER(5,0), 
	"CONTROL_NO" VARCHAR2(100 BYTE), 
	"DOCUMENT_NAME_THAI" VARCHAR2(500 BYTE), 
	"DOCUMENT_NAME_ENG" VARCHAR2(500 BYTE), 
	"STATUS" VARCHAR2(20 BYTE), 
	"REVISION_NO" NUMBER, 
	"EFFECTIVE_DATE" DATE, 
	"PDF_FILE_NAME" VARCHAR2(1000 BYTE), 
	"UPDATE_BY" VARCHAR2(20 BYTE), 
	"UPDATE_DATE" DATE, 
	"CREATE_BY" VARCHAR2(20 BYTE), 
	"CREATE_DATE" DATE, 
	"DOC_TYPE" VARCHAR2(100 BYTE), 
	"DATA" BLOB, 
	"CONTENTTYPE" VARCHAR2(1000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" 
 LOB ("DATA") STORE AS BASICFILE (
  TABLESPACE "DATA" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table WEBLCD_T002_SCHEDULE_CONTROL
--------------------------------------------------------

  CREATE TABLE "LCDRA"."WEBLCD_T002_SCHEDULE_CONTROL" 
   (	"ID" NUMBER(10,0), 
	"MEETING_DATE" DATE, 
	"START_TIME" VARCHAR2(20 BYTE), 
	"FINISH_TIME" VARCHAR2(20 BYTE), 
	"TOPIC" VARCHAR2(500 BYTE), 
	"ROOM" VARCHAR2(200 BYTE), 
	"RESPONSE_BY" VARCHAR2(20 BYTE), 
	"CREATE_BY" VARCHAR2(20 BYTE), 
	"CREATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(20 BYTE), 
	"UPDATE_DATE" VARCHAR2(20 BYTE), 
	"FACTORY_CD" VARCHAR2(2 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for View LCDINFO_F1_V001_PART_PRO
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."LCDINFO_F1_V001_PART_PRO" ("PART_NO", "DIM_NO", "CTRL_POINT", "BLOCK_CODE", "SUPP_CODE", "ADJUST_LT", "CD_DELV_PLACE", "CF_PALLETIZE", "CD_SHELF_ADDRESS", "QT_SAFETY") AS 
  select  mt.PART_NO,	mt.DIM_NO, 	mt.CTRL_POINT	,mt.BLOCK_CODE,mt.SUPP_CODE, aj.ADJUST_LT 
,lo.CD_DELV_PLACE	,lo.CF_PALLETIZE	,lo.CD_SHELF_ADDRESS	,st.QT_SAFETY
from LCDINFO_F1_T001_PART_LIST mt
left  join V_ADJUST_LT aj on mt.PART_NO = aj.NO_PARTS and mt.DIM_NO = aj.NO_ADJ_DIM and mt.BLOCK_CODE = aj.CD_USE_BLOCK and mt.CTRL_POINT = aj.NO_INVENT_CNTL_POI
left  join V_LOCATION lo on mt.PART_NO = lo.NO_PARTS  and mt.BLOCK_CODE = lo.CD_BLOCK and mt.DIM_NO = lo.NO_ADJ_DIM and mt.CTRL_POINT = lo.NO_INVENT_CNTL_POI and mt.SUPP_CODE = lo.CD_BS_BLOCK
left  join V_SAFETY st on mt.PART_NO = st.NO_PARTS and mt.DIM_NO = st.NO_ADJ_DIM and mt.BLOCK_CODE = st.CD_USE_BLOCK;
--------------------------------------------------------
--  DDL for View LCDINFO_F1_V002_PART_SUPP
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."LCDINFO_F1_V002_PART_SUPP" ("PART_NO", "DIM_NO", "CTRL_POINT", "BLOCK_CODE", "SUPP_CODE", "NM_PARTS_ENG", "DAY", "TM_STORE_LEAD", "NO_ARRANGE", "NM_SPLY_ENG", "CT_ALL", "QT_SNP", "QT_DELV_LOT", "PD_DELV_DIRCT", "PD_FIX_PERIOD_REQUI", "PD_PO_ISSUE", "PD_PRDC_GUART", "PD_MTRL_GUART", "PD_PRDC_INFO", "PD_DELV_QTY_ROUND", "CD_PROCESS") AS 
  select A.PART_NO,A.DIM_NO	,A.CTRL_POINT	,A.BLOCK_CODE	,A.SUPP_CODE,D.NM_PARTS_ENG	,A.DAY,A.TM_STORE_LEAD,A.NO_ARRANGE,C.NM_SPLY_ENG,A.CT_ALL,
B.QT_SNP	,B.QT_DELV_LOT	,B.PD_DELV_DIRCT	,B.PD_FIX_PERIOD_REQUI	,B.PD_PO_ISSUE	
,B.PD_PRDC_GUART	,B.PD_MTRL_GUART	,B.PD_PRDC_INFO	,B.PD_DELV_QTY_ROUND,B.CD_PROCESS
from (
SELECT mt.part_no,mt.dim_no,mt.ctrl_point,mt.block_code,mt.supp_code,w.day,s.TM_STORE_LEAD,sm.NO_ARRANGE,p.CT_ALL
FROM LCDINFO_F1_T001_PART_LIST mt
left join V_STORE_LT s on mt.part_no=s.no_parts 
and mt.dim_no = s.no_adj_dim
and mt.ctrl_point = s.no_invent_cntl_poi 
and mt.supp_code = s.cd_block
left join V_WK w on mt.part_no = w.no_parts 
and mt.dim_no = w.no_adj_dim
left join J002_PARTS_ORDER_CONDITION@FROM_EUC_NPIS j2 
on mt.part_no = j2.NO_PARTS
and mt.dim_no = j2.NO_ADJ_DIM
and mt.supp_code = j2.NO_ARRANGE
left join V_SUPP_NAME sm on mt.supp_code = sm.NO_ARRANGE
left join V_UNIT_PRICE_UPDATE p on mt.PART_NO = p.NO_PARTS and mt.dim_no = p.NO_ADJ_DIM and mt.ctrl_point = p.NO_INVENT_CNTL_POI and mt.supp_code = p.CD_BLOCK
group by mt.part_no,mt.dim_no,mt.ctrl_point,mt.block_code,mt.supp_code,w.day,s.TM_STORE_LEAD,sm.NO_ARRANGE,p.CT_ALL
) A 
left join J002_PARTS_ORDER_CONDITION@FROM_EUC_NPIS B
on A.part_no = B.NO_PARTS
and A.dim_no = B.NO_ADJ_DIM
and A.supp_code = B.NO_ARRANGE
and B.CD_INL_DELIV_PLACE_DEF = 'CHT'
LEFT join(SELECT s1.ID, s1.SUPPTYPE, s1.NO_ARRANGE,s1.NM_SPLY_ENG FROM LCDINFO_F1_T002_SUPP_NAME s1 
inner JOIN (select NO_ARRANGE, MAX(ID)AS ID from LCDINFO_F1_T002_SUPP_NAME 
GROUP BY NO_ARRANGE)s2 on s1.ID = s2.ID ) C 
ON A.NO_ARRANGE = C.NO_ARRANGE 
left join (SELECT p1.ID, p1.NO_PARTS,p1.NO_ADJ_DIM,p1.NM_PARTS_ENG FROM LCDINFO_F1_T003_PARTS_NAME p1 inner join
(SELECT max(ID)AS ID,NO_PARTS, NO_ADJ_DIM FROM LCDINFO_F1_T003_PARTS_NAME GROUP BY NO_PARTS, NO_ADJ_DIM)p2 on p1.ID = p2.ID) D
on A.PART_NO = D.NO_PARTS 
and A.DIM_NO = D.NO_ADJ_DIM;
--------------------------------------------------------
--  DDL for View LCDINFO_F1_V003_PARTS_LIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."LCDINFO_F1_V003_PARTS_LIST" ("ID_PARTS_LIST", "FACTORY_CD", "PART_NO", "DIM_NO", "CTRL_POINT", "BLOCK_CODE", "SUPP_CODE", "AREA", "RESP_NAME_OP", "RESP_NAME_ST", "CTRL_BY", "RESP_TEL", "CREATE_DATE", "CREATE_BY", "UPDATE_DATE", "UPDATE_BY", "ID_UPIMG", "STATUS", "NP_BOX", "DT_BOX", "TYPE_BOX", "NP_INBOX", "DT_INBOX", "TYPE_INBOX", "NP_PART", "DT_PART", "TYPE_PART", "ADJUST_LT", "CD_DELV_PLACE", "CF_PALLETIZE", "CD_SHELF_ADDRESS", "QT_SAFETY", "NM_PARTS_ENG", "TM_STORE_LEAD", "NM_SPLY_ENG", "CT_ALL", "QT_SNP", "QT_DELV_LOT", "PD_DELV_DIRCT", "PD_FIX_PERIOD_REQUI", "PD_PO_ISSUE", "PD_PRDC_GUART", "PD_MTRL_GUART", "PD_PRDC_INFO", "PD_DELV_QTY_ROUND", "DAY", "CD_PROCESS") AS 
  SELECT
  j1.ID_PARTS_LIST,
  j1.FACTORY_CD,
  j1.PART_NO,
  j1.DIM_NO,
  j1.CTRL_POINT,
  j1.BLOCK_CODE,
  j1.SUPP_CODE,
  j1.AREA,
  j1.RESP_NAME_OP,
  j1.RESP_NAME_ST,
  j1.CTRL_BY,
  j1.RESP_TEL,
 j1.CREATE_DATE,
 j1. CREATE_BY,
 j1. UPDATE_DATE,
 j1. UPDATE_BY,

  NVL(j4.ID_UPIMG,0)as ID_UPIMG,
  NVL(j4.STATUS,'N') as STATUS,
   j4.NP_BOX,
  j4.DT_BOX,
  j4.TYPE_BOX,
  j4.NP_INBOX,
  j4.DT_INBOX,
  j4.TYPE_INBOX,
  j4.NP_PART,
  j4.DT_PART,
  j4.TYPE_PART,
 
  j2.ADJUST_LT,
  j2.CD_DELV_PLACE,
  j2.CF_PALLETIZE,
  j2.CD_SHELF_ADDRESS,
  j2.QT_SAFETY,

  j3.NM_PARTS_ENG,
  
  j3.TM_STORE_LEAD,
  j3.NM_SPLY_ENG,
  j3.CT_ALL,
  j3.QT_SNP,
  j3.QT_DELV_LOT,
  j3.PD_DELV_DIRCT,
  j3.PD_FIX_PERIOD_REQUI,
  j3.PD_PO_ISSUE,
  j3.PD_PRDC_GUART,
  j3.PD_MTRL_GUART,
  j3.PD_PRDC_INFO,
  j3.PD_DELV_QTY_ROUND,
  j3.DAY,
  j3.CD_PROCESS


FROM LCDINFO_F1_T001_PART_LIST j1 left join LCDINFO_F1_T004_PART_PRO j2 
on j1.PART_NO = j2.PART_NO
and j1.DIM_NO = j2.DIM_NO
and j1.CTRL_POINT = j2.CTRL_POINT
and j1.BLOCK_CODE = j2.BLOCK_CODE
and j1.SUPP_CODE = j2.SUPP_CODE
left join LCDINFO_F1_T005_PART_SUPP j3
on j1.PART_NO = j3.PART_NO
and j1.DIM_NO = j3.DIM_NO
and j1.CTRL_POINT = j3.CTRL_POINT
and j1.BLOCK_CODE = j3.BLOCK_CODE
and j1.SUPP_CODE = j3.SUPP_CODE
left join LCDINFO_F1_T006_UPLOAD_IMAGE j4
on j1.PART_NO = j4.PART_NO
and j1.DIM_NO = j4.DIM_NO
and j1.CTRL_POINT = j4.CTRL_POINT
and j1.BLOCK_CODE = j4.BLOCK_CODE
and j1.SUPP_CODE = j4.SUPP_CODE;
--------------------------------------------------------
--  DDL for View MINSTOCK_V001_REAL_TIME_RA
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."MINSTOCK_V001_REAL_TIME_RA" ("PART_NO", "PART_NAME", "BLOCK_CODE", "AREA", "SUPP_CODE", "SUPP_NAME", "RESP_NAME", "INFORMDATE", "DELDATE", "DELTIME", "QTY", "CHECK_MANAGEMENT_STATUS") AS 
  SELECT  a.part_no,
    a.part_name,
    a.block_code,
    a.area,
    a.supp_code,
    a.supp_name,
    a.resp_name,
    TO_CHAR(a.create_date, 'DD-MM-YYYY HH24:MI:SS') AS Informdate ,
    TO_CHAR(c.deldate,'DD-MM-YYYY') AS deldate,
    c.deltime,
    c.qty,
    a.check_management_status
  FROM minstock_t002_history_control a
  LEFT OUTER join  minstock_v_j300_del_real_time1 c
  ON a.supp_code =c.vender_id and
  a.part_no = c.no_part and
  a.block_code = c.use_block  
  WHERE a.factory_cd           ='RA'
  AND a.check_management_status='WAIT' or 
 a.check_management_status='LINE STOP'
  ORDER BY a.create_date ASC;
--------------------------------------------------------
--  DDL for View MINSTOCK_V002_HISTORY_CHECK
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."MINSTOCK_V002_HISTORY_CHECK" ("ID", "FACTORY_CD", "PART_NO", "DIM_NO", "CTRL_POINT", "BLOCK_CODE", "PART_NAME", "AREA", "SUPP_CODE", "RESP_NAME", "RESP_TEL", "PART_TYPE", "CREATE_DATE", "CREATE_BY", "UPDATE_DATE", "UPDATE_BY", "SUPP_NAME", "MANAGEMENT_INPUT", "CHECK_MANAGEMENT_STATUS", "DEL_PLACE", "ZONE", "AREA_CODE", "PART_NO_SUP") AS 
  SELECT ID,
    FACTORY_CD,
    PART_NO,
    DIM_NO,
    CTRL_POINT,
    BLOCK_CODE,
    PART_NAME,
    AREA,
    SUPP_CODE,
    RESP_NAME,
    RESP_TEL,
    PART_TYPE,
    CREATE_DATE,
    CREATE_BY,
    UPDATE_DATE,
    UPDATE_BY,
    SUPP_NAME,
    MANAGEMENT_INPUT,
    CHECK_MANAGEMENT_STATUS,
    DEL_PLACE,
    ZONE,
    AREA_CODE,
    PART_NO
    || ''
    ||DIM_NO
    || ''
    || CTRL_POINT
    || ''
    || BLOCK_CODE
    || ''
    || SUPP_CODE
    || ''
    ||FACTORY_CD AS PART_NO_SUP
  FROM MINSTOCK_T002_HISTORY_CONTROL;
--------------------------------------------------------
--  DDL for View MINSTOCK_V002_REPLY_MIN_RA
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."MINSTOCK_V002_REPLY_MIN_RA" ("ID", "PART_NO", "PART_NAME", "BLOCK_CODE", "AREA", "DEL_PLACE", "ZONE", "AREA_CODE", "SUPP_CODE", "RESP_NAME", "CREATE_DATE", "MANAGEMENT_INPUT", "CHECK_MANAGEMENT_STATUS", "DELV_DATE", "TM_TIME", "QT_ORD") AS 
  SELECT 
a.id,   
a.part_no,
    a.part_name,
    a.block_code,
    a.area,
    a.del_place,
    a.zone,
    a.area_code,
    a.supp_code,
    a.resp_name,
    TO_CHAR(a.create_date, 'DD-MM-YYYY HH24:MI:SS') AS CREATE_DATE,
    a.management_input,
    a.check_management_status,
    TO_CHAR(c.deldate ,'DD-MM-YYYY') AS DELV_DATE,
    c.deltime AS TM_TIME ,
    c.QTY                           AS QT_ORD
  FROM minstock_t002_history_control a
  LEFT OUTER JOIN minstock_v_j300_del_real_time1 c
  ON a.supp_code               =c.vender_id
  AND a.part_no                = c.no_part
  AND a.block_code             = c.use_block
  WHERE a.factory_cd           ='RA'
  AND a.check_management_status='WAIT'
  OR a.check_management_status ='LINE STOP'
  ORDER BY a.create_date ASC;
--------------------------------------------------------
--  DDL for View MINSTOCK_V003_HISTORY_SHOW
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."MINSTOCK_V003_HISTORY_SHOW" ("PART_NO", "PART_NAME", "BLOCK_CODE", "AREA", "SUPP_CODE", "SUPP_NAME", "RESP_NAME", "CHECK_MANAGEMENT_STATUS", "CREATE_DATE", "CREATE_BY", "UPDATE_DATE", "UPDATE_BY") AS 
  SELECT part_no,part_name,block_code,area,supp_code,supp_name,resp_name, check_management_status,create_date,create_by,update_date,update_by  FROM minstock_t002_history_control order by create_date asc;
--------------------------------------------------------
--  DDL for View MINSTOCK_V_J000_SUPPNAME
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."MINSTOCK_V_J000_SUPPNAME" ("NO_ARRANGE", "NM_SPLY_ENG") AS 
  SELECT
 NO_ARRANGE ,
 NM_SPLY_ENG 
FROM  lcdinfo_f1_t002_supp_name;
--------------------------------------------------------
--  DDL for View MINSTOCK_V_J300_DEL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."MINSTOCK_V_J300_DEL" ("NO_PO", "NO_PART", "QT_ORD", "DELV_DATE", "TM_TIME", "VENDER_ID", "DEL_PLACE", "RACK_ADD", "USE_BLOCK", "ZONE", "INS_TYPE") AS 
  SELECT no_po,
    no_part,
    qt_ord,
    TO_CHAR(TO_DATE(dt_delv,'YYYY/MM/DD' ),'DD/MM/YY')  AS DELV_DATE,
    TO_CHAR(TO_DATE(tm_delv,'hh24:mi:ss' ), 'hh24:mi:ss') AS TM_TIME,
    vender_id,
    del_place,
    rack_add,
    use_block,
    SUBSTR(PALLETZE,3,1) AS Zone,
    ins_type
  FROM j300_recstatus
  ORDER BY dt_delv ASC;
--------------------------------------------------------
--  DDL for View MINSTOCK_V_J300_DEL_REAL_TIME
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."MINSTOCK_V_J300_DEL_REAL_TIME" ("NO_PO", "NO_PART", "QT_ORD", "DELV_DATE", "TM_TIME", "VENDER_ID", "DEL_PLACE", "RACK_ADD", "USE_BLOCK", "ZONE", "INS_TYPE") AS 
  SELECT no_po,
    no_part,
    qt_ord,
    TO_DATE(dt_delv,'YYYY/MM/DD' )                        AS DELV_DATE,
    TO_CHAR(TO_DATE(tm_delv,'hh24:mi:ss' ), 'hh24:mi:ss') AS TM_TIME,
    vender_id,
    del_place,
    rack_add,
    use_block,
    SUBSTR(PALLETZE,3,1) AS Zone,
    ins_type
  FROM j300_recstatus
  WHERE TO_DATE(dt_delv,'YYYY/MM/DD' ) >= CURRENT_DATE-1
  ORDER BY dt_delv ASC;
--------------------------------------------------------
--  DDL for View MINSTOCK_V_J300_DEL_REAL_TIME1
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."MINSTOCK_V_J300_DEL_REAL_TIME1" ("NO_PART", "DELDATE", "DELTIME", "QTY", "VENDER_ID", "USE_BLOCK") AS 
  SELECT no_part,
    MIN(delv_date) AS deldate,
    MIN(tm_time)   AS deltime,
    MIN(qt_ord) AS QTY,
    vender_id,
    use_block
  FROM minstock_v_j300_del_real_time
  GROUP BY no_part,
    vender_id,
    use_block;
--------------------------------------------------------
--  DDL for View MINSTOCK_V_J300_LOCATION
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."MINSTOCK_V_J300_LOCATION" ("NO_PART", "USE_BLOCK", "VENDER_ID", "NM_SPLY_ENG", "DEL_PLACE", "ZONE", "RACK_ADD") AS 
  SELECT DISTINCT a.no_part,
    a.use_block,
    a.vender_id,
    b.nm_sply_eng,
    a.del_place,
    a.zone,
    a.rack_add
  FROM minstock_v_j300_del a left outer join minstock_v_j000_suppname b
  on a.vender_id =b.no_arrange;
--------------------------------------------------------
--  DDL for View SMT_V001_TTL_PART_STATUS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."SMT_V001_TTL_PART_STATUS" ("PART_NO", "SERIAL_NO", "QTY_PACK", "QTY_CURRENT", "TOTAL_NG", "PART_REJECT", "EMPTY_PICKUP", "FAILED_PICKUP", "REJECT_BY_VISION", "RESCAN", "FIRST_TIME_USE", "LAST_TIME_USE") AS 
  SELECT part_no ,
    serial_no,
    qty_pack,
    qty_current,
    part_reject+empty_pickup+failed_pickup+reject_by_vision+rescan AS TOTAL_NG,
    part_reject,
    empty_pickup,
    failed_pickup,
    reject_by_vision,
    rescan,
    first_time_use,
    last_time_use
  FROM smt_t001_tdid;
--------------------------------------------------------
--  DDL for View TEST_VUSER
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."TEST_VUSER" ("EMP_NO", "NULLEMP", "GNAME_ENG", "FNAME_ENG", "GNAME_THA", "FNAME_THA", "PASSWORD", "FACTORY_CD", "LEVEL_USER", "E_MAIL", "ROLE") AS 
  SELECT u.EMP_NO,r.EMP_NO as NULLEMP,u.GNAME_ENG,u.FNAME_ENG,u.GNAME_THA,u.FNAME_THA,r.PASSWORD,u.FACTORY_CD,u.LEVEL_USER,r.E_MAIL,CASE  
  WHEN u.LEVEL_USER IN('E','J1')  
  THEN 'OPERATOR'  ELSE 'ADMIN' 
  END as ROLE 
  FROM TEST_REGIS 
  r RIGHT JOIN 
  TEST_USER u on r.EMP_NO = u.EMP_NO;
--------------------------------------------------------
--  DDL for View V_99LIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_99LIST" ("NO_PARTS", "NO_ADJ_DIM", "CD_USE_BLOCK", "DT_DATE", "QT_ORDER", "SUM_QT_DEMAND", "QT_NET_DEMAND", "QT_EFFCTV_INVNTRY", "QT_NET_EFFCTV_INVNTRY", "PD_PO_ISSUE", "CD_SPLY") AS 
  SELECT NPIS.V_PAD_99_LIST.NO_PARTS,NPIS.V_PAD_99_LIST.NO_ADJ_DIM,
 NPIS.V_PAD_99_LIST.CD_USE_BLOCK,NPIS.V_PAD_99_LIST.DT_DATE,NPIS.V_PAD_99_LIST.QT_ORDER,
 NPIS.V_PAD_99_LIST.SUM_QT_DEMAND,NPIS.V_PAD_99_LIST.QT_NET_DEMAND,
 NPIS.V_PAD_99_LIST.QT_EFFCTV_INVNTRY,
 NPIS.V_PAD_99_LIST.QT_NET_EFFCTV_INVNTRY,
 NPIS.J002_PARTS_ORDER_CONDITION.PD_PO_ISSUE,
 NPIS.J002_PARTS_ORDER_CONDITION.CD_SPLY 
 FROM NPIS.V_PAD_99_LIST@FROM_EUC_NPIS , NPIS.J002_PARTS_ORDER_CONDITION@FROM_EUC_NPIS 
 WHERE ( NPIS.V_PAD_99_LIST.NO_PARTS = NPIS.J002_PARTS_ORDER_CONDITION.NO_PARTS 
 AND NPIS.V_PAD_99_LIST.NO_ADJ_DIM = NPIS.J002_PARTS_ORDER_CONDITION.NO_ADJ_DIM ) 
 AND ( NPIS.V_PAD_99_LIST.QT_EFFCTV_INVNTRY < 0 
 AND (NPIS.V_PAD_99_LIST.CD_USE_BLOCK = '6100' 
 OR NPIS.V_PAD_99_LIST.CD_USE_BLOCK = '6009' OR 
 NPIS.V_PAD_99_LIST.CD_USE_BLOCK = '6200' 
 OR NPIS.V_PAD_99_LIST.CD_USE_BLOCK = '6015' 
 OR NPIS.V_PAD_99_LIST.CD_USE_BLOCK = '7010' 
 OR NPIS.V_PAD_99_LIST.CD_USE_BLOCK = '6012' 
 OR NPIS.V_PAD_99_LIST.CD_USE_BLOCK = '      ') 
 AND NPIS.J002_PARTS_ORDER_CONDITION.CD_DATA_CNTL = '0' 
 AND NPIS.V_PAD_99_LIST.NO_PARTS Not Like 'FZ%' 
 AND NPIS.V_PAD_99_LIST.NO_PARTS Not Like 'FJ%' 
 AND NPIS.V_PAD_99_LIST.NO_PARTS Not Like 'JJJ%'  ) 
 Group By NPIS.V_PAD_99_LIST.NO_PARTS,NPIS.V_PAD_99_LIST.NO_ADJ_DIM,
 NPIS.V_PAD_99_LIST.CD_USE_BLOCK,NPIS.V_PAD_99_LIST.DT_DATE,
 NPIS.V_PAD_99_LIST.QT_ORDER,NPIS.V_PAD_99_LIST.SUM_QT_DEMAND,
 NPIS.V_PAD_99_LIST.QT_NET_DEMAND,NPIS.V_PAD_99_LIST.QT_EFFCTV_INVNTRY,
 NPIS.V_PAD_99_LIST.QT_NET_EFFCTV_INVNTRY,NPIS.J002_PARTS_ORDER_CONDITION.CD_DATA_CNTL,
 NPIS.J002_PARTS_ORDER_CONDITION.PD_PO_ISSUE,NPIS.J002_PARTS_ORDER_CONDITION.CD_SPLY 
 ORDER BY NPIS.V_PAD_99_LIST.NO_PARTS ASC ,NPIS.V_PAD_99_LIST.CD_USE_BLOCK ASC;
--------------------------------------------------------
--  DDL for View V_ADJUST_LT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_ADJUST_LT" ("CD_FACT", "CF_DATA", "CD_USE_BLOCK", "NO_PARTS", "NO_ADJ_DIM", "NO_INVENT_CNTL_POI", "DT_B_VALID", "ADJUST_LT") AS 
  SELECT CD_FACT,
 CF_DATA,
 CD_USE_BLOCK,
 NO_PARTS,
 NO_ADJ_DIM,NO_INVENT_CNTL_POI, 
 DT_B_VALID,
 PD_DECIMAL_LEAD as ADJUST_LT 
 FROM NPIS.B352_DELIVERY_ADJUSTMENT_L_T@FROM_EUC_NPIS 
 WHERE PD_DECIMAL_LEAD > 0 AND DT_E_VALID = '99999999' AND MK_DELETE = 'N';
--------------------------------------------------------
--  DDL for View V_D000_PULLINGSUMMARY
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_D000_PULLINGSUMMARY" ("TEST", "CD_COST_TYPE", "DT_START_YM", "NO_PART", "NO_ADJ_DIM", "CNTL_POI", "CT_ALL") AS 
  SELECT no_part||''||no_adj_dim||''|| cntl_poi as test ,cd_cost_type,dt_start_ym,no_part,no_adj_dim,cntl_poi,ct_all 
from d000_pullingsummary;
--------------------------------------------------------
--  DDL for View V_DELIVERY_ROUND
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_DELIVERY_ROUND" ("CD_FACT", "CD_BS_BLOCK", "CD_BLOCK", "NO_PARTS", "NO_ADJ_DIM", "NO_INVENT_CNTL_POI", "CR_DELV_LOT_PER", "TM_DELV_01", "TM_DELV_02", "TM_DELV_03", "TM_DELV_04", "TM_DELV_05", "TM_DELV_06", "TM_DELV_07", "TM_DELV_08", "TM_DELV_09", "TM_DELV_10", "TM_DELV_11", "TM_DELV_12", "TM_DELV_13", "TM_DELV_14", "TM_DELV_15", "TM_DELV_16", "TM_DELV_17", "TM_DELV_18", "TM_DELV_19", "TM_DELV_20", "TM_DELV_21", "TM_DELV_22", "TM_DELV_23", "DT_ENTRY", "NM_ENTRY_PERSON") AS 
  select CD_FACT,CD_BS_BLOCK,CD_BLOCK,NO_PARTS,NO_ADJ_DIM,NO_INVENT_CNTL_POI,CR_DELV_LOT_PER,
TM_DELV_01,
TM_DELV_02,
TM_DELV_03,
TM_DELV_04,
TM_DELV_05,
TM_DELV_06,
TM_DELV_07,
TM_DELV_08,
TM_DELV_09,
TM_DELV_10,
TM_DELV_11,
TM_DELV_12,
TM_DELV_13,
TM_DELV_14,
TM_DELV_15,
TM_DELV_16,
TM_DELV_17,
TM_DELV_18,
TM_DELV_19,
TM_DELV_20,
TM_DELV_21,
TM_DELV_22,
TM_DELV_23,
TM_DELV_24
DT_ENTRY,NM_ENTRY_PERSON 
 from V_LCD_DELIVERY_MAX@FROM_EUC_NPIS
 where CD_BLOCK <> '      ' 
 and CR_DELV_LOT_PER <> 0;
--------------------------------------------------------
--  DDL for View V_DELIVERY_TIME
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_DELIVERY_TIME" ("CD_FACT", "CD_BS_BLOCK", "CD_BLOCK", "CD_DELV_PLACE", "CODE_AREA", "NO_PARTS", "NO_ADJ_DIM", "NO_INVENT_CNTL_POI", "DT_B_VALID", "TM_DELV_01", "TM_DELV_02", "TM_DELV_03", "TM_DELV_04", "TM_DELV_05", "TM_DELV_06", "TM_DELV_07", "TM_DELV_08", "TM_DELV_09", "TM_DELV_10", "TM_DELV_11", "TM_DELV_12", "TM_DELV_13", "TM_DELV_14", "TM_DELV_15", "TM_DELV_16", "TM_DELV_17", "TM_DELV_18", "TM_DELV_19", "TM_DELV_20", "TM_DELV_21", "TM_DELV_22", "TM_DELV_23", "TM_DELV_24", "PD_DECIMAL_LEAD", "MK_DAY_INTEGRATE", "DAY_INTEGRATE") AS 
  SELECT NPIS.V_LCA_PATTERN_PART_LIST.CD_FACT,NPIS.V_LCA_PATTERN_PART_LIST.CD_BS_BLOCK,NPIS.V_LCA_PATTERN_PART_LIST.CD_BLOCK,NPIS.V_LCA_PATTERN_PART_LIST.CD_DELV_PLACE,NPIS.V_LCA_PATTERN_PART_LIST.CODE_AREA,NPIS.V_LCA_PATTERN_PART_LIST.NO_PARTS,NPIS.V_LCA_PATTERN_PART_LIST.NO_ADJ_DIM,NPIS.V_LCA_PATTERN_PART_LIST.NO_INVENT_CNTL_POI,NPIS.V_LCA_PATTERN_PART_LIST.DT_B_VALID,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_01,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_02,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_03,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_04,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_05,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_06,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_07,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_08,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_09,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_10,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_11,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_12,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_13,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_14,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_15,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_16,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_17,
NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_18,
NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_19,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_20,
NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_21,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_22,
NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_23,NPIS.V_LCA_PATTERN_PART_LIST.TM_DELV_24,
NPIS.V_LCA_PATTERN_PART_LIST.PD_DECIMAL_LEAD,NPIS.V_LCA_PATTERN_PART_LIST.MK_DAY_INTEGRATE,
NPIS.V_LCA_PATTERN_PART_LIST.DAY_INTEGRATE FROM NPIS.V_LCA_PATTERN_PART_LIST@FROM_EUC_NPIS 
WHERE (NPIS.V_LCA_PATTERN_PART_LIST.CD_BLOCK = '      ' 
OR NPIS.V_LCA_PATTERN_PART_LIST.CD_BLOCK = '6012' 
OR NPIS.V_LCA_PATTERN_PART_LIST.CD_BLOCK = '6100' 
OR NPIS.V_LCA_PATTERN_PART_LIST.CD_BLOCK = '6300' 
OR NPIS.V_LCA_PATTERN_PART_LIST.CD_BLOCK = '6015' 
OR NPIS.V_LCA_PATTERN_PART_LIST.CD_BLOCK = '6200' 
OR NPIS.V_LCA_PATTERN_PART_LIST.CD_BLOCK = '6009' 
OR NPIS.V_LCA_PATTERN_PART_LIST.CD_BLOCK = '7010');
--------------------------------------------------------
--  DDL for View V_EMPLOYEE_INFO_PAD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_EMPLOYEE_INFO_PAD" ("EMP_NO", "GNAME_THA", "FNAME_THA", "GNAME_ENG", "FNAME_ENG", "ENTR_ADATE", "JOB_TYPE", "WORK_STS", "FACTORY", "EMAIL") AS 
  SELECT EMP_NO,GNAME_THA,FNAME_THA,GNAME_ENG,FNAME_ENG,ENTR_ADATE,JOB_TYPE, WORK_STS ,CASE  
  WHEN WORK_STS IN(1,2,3,4,5)  
  THEN 'HT'  ELSE 'RA' 
  END as FACTORY ,EMAIL
  FROM V_EMPLOYEE_INFO_PAD@FROM_HRMSTEST_HRMSINQ;
--------------------------------------------------------
--  DDL for View V_J300_REC_STATUS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_J300_REC_STATUS" ("NO_PO", "NO_PART", "QT_ORD", "DELV_DATE", "TM_TIME", "VENDER_ID", "DEL_PLACE", "RACK_ADD", "USE_BLOCK", "ZONE", "INS_TYPE") AS 
  select no_po,no_part,qt_ord, TO_CHAR(TO_DATE(dt_delv,'YYYY/MM/DD'), 'DD/MM/YYYY') AS DELV_DATE,
TO_CHAR(TO_DATE(tm_delv,'hh24:mi:ss' ), 'hh24:mi:ss') AS TM_TIME,vender_id,del_place, 
rack_add,use_block,SUBSTR(PALLETZE,3,1) AS Zone,ins_type
from j300_recstatus
order by dt_delv asc;
--------------------------------------------------------
--  DDL for View V_J300_REC_STATUS_LOCKTIME
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_J300_REC_STATUS_LOCKTIME" ("NO_PO", "NO_PART", "QT_ORD", "DELV_DATE", "TM_TIME", "VENDER_ID", "DEL_PLACE", "RACK_ADD", "USE_BLOCK", "ZONE", "INS_TYPE") AS 
  select no_po,no_part,qt_ord, TO_CHAR(TO_DATE(dt_delv,'YYYY/MM/DD'), 'DD/MM/YYYY') AS DELV_DATE,
TO_CHAR(TO_DATE(tm_delv,'hh24:mi:ss' ), 'hh24:mi:ss') AS TM_TIME,vender_id,del_place, 
rack_add,use_block,SUBSTR(PALLETZE,3,1) AS Zone,ins_type
from j300_recstatus
where SUBSTR(del_place,1,2)='MR'
order by dt_delv asc;
--------------------------------------------------------
--  DDL for View V_LOCATION
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_LOCATION" ("NO_PARTS", "CD_BS_BLOCK", "CD_BLOCK", "NO_ADJ_DIM", "NO_INVENT_CNTL_POI", "CD_DELV_PLACE", "CF_PALLETIZE", "CD_SHELF_ADDRESS") AS 
  SELECT NO_PARTS,CD_BS_BLOCK,CD_BLOCK,NO_ADJ_DIM,NO_INVENT_CNTL_POI
 ,CD_DELV_PLACE,CF_PALLETIZE,CD_SHELF_ADDRESS FROM H009_DELIVERY_PLACE@FROM_EUC_NPIS;
--------------------------------------------------------
--  DDL for View V_MTDB_CTRLDIE_TRANSFER
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_MTDB_CTRLDIE_TRANSFER" ("MT_MODEL", "PART_NO", "DIE_MAKER", "INJ_PLACE_DS", "MOLD_NO", "DS_FINAL_RESULT", "ETA_TIMES", "ACTUAL_DWG", "PLAN_TRY_DT", "PLAN_DS_DT", "PTQA_REC_DT", "PTQA_REC_DT_DS", "PE_REC_DATE_DS", "JUD_FN_DT_D", "SCAN_DT_DS", "RESULT_DS_N1", "DWG_NO_DS_N1", "JUD_FN_DT_DS_N1", "SCAN_DATE_DS_N1", "RESULT_DS", "DWG_NO_DS", "JUD_FN_DT_DS", "SCAN_DATE_DS", "DIE_NEED_TRANSFER", "PLAN_ETD", "PLAN_ETA", "ACT_ETA", "TRANSFER_BY", "CREATE_DT", "CREATE_BY", "UPDATE_DT", "UPDATE_BY", "STATUS_ID", "DEPT_UPLOAD") AS 
  SELECT MT_MODEL,
  PART_NO,
  DIE_MAKER,
  INJ_PLACE_DS,
  MOLD_NO,
  DS_FINAL_RESULT,
  ETA_TIMES,
  ACTUAL_DWG,
  PLAN_TRY_DT,
  PLAN_DS_DT,
  PTQA_REC_DT,
  --PTQA_REC
  CASE DEPT_UPLOAD 
  WHEN 'PUR1_CHTCTRL_DS' 
   THEN 
    PTQA_REC_DT 

   WHEN 'IDPE' THEN 
    PTQA_REC_DT

   WHEN 'RA_MO' THEN 
   PTQA_REC_DT
  
   WHEN 'HT_PX' THEN 
   PTQA_REC_DT
   
   WHEN 'RA_PX' THEN 
   PTQA_REC_DT
   
   WHEN 'PTQA_DS' THEN 
   CASE WHEN DS_FINAL_RESULT <> 'NG'  
      THEN PTQA_REC_DT
      ELSE 
      NULL
      END
   WHEN 'PUR1_SUPPCTRL_DS' THEN 
   PTQA_REC_DT
   -----PICKING
   WHEN 'PTQA_PACKING_DS' THEN 
   PTQA_REC_DT
   WHEN 'PUR1_PACKING_SUPPCTRL_DS' THEN 
   PTQA_REC_DT
    WHEN 'EPE' THEN 
   PTQA_REC_DT
   WHEN 'PUR2' THEN 
   PTQA_REC_DT
   ELSE
   NULL
  END AS PTQA_REC_DT_DS,
  CASE DEPT_UPLOAD 
  WHEN 'PUR1_CHTCTRL_DS' 
   THEN 
  CASE WHEN DS_FINAL_RESULT = 'PE' OR DS_FINAL_RESULT = 'MTOK' OR DS_FINAL_RESULT = 'OK' 
      THEN PLAN_DS_DT
      ELSE 
      NULL
      END
   WHEN 'IDPE' THEN 
     CASE WHEN DS_FINAL_RESULT = 'PE' OR DS_FINAL_RESULT = 'MTOK' OR DS_FINAL_RESULT = 'OK' 
      THEN PLAN_DS_DT
      ELSE 
      NULL
      END

   WHEN 'RA_MO' THEN 
   CASE WHEN DS_FINAL_RESULT = 'PE' OR DS_FINAL_RESULT = 'MTOK' OR DS_FINAL_RESULT = 'OK' 
      THEN PLAN_DS_DT
      ELSE 
      NULL
      END
   WHEN 'HT_PX' THEN 
    CASE WHEN DS_FINAL_RESULT = 'PE' OR DS_FINAL_RESULT = 'MTOK' OR DS_FINAL_RESULT = 'OK' 
      THEN PE_REC_DT
      ELSE 
      PE_REC_DT
      END
   
   WHEN 'RA_PX' THEN 
   CASE WHEN DS_FINAL_RESULT = 'PE' OR DS_FINAL_RESULT = 'MTOK' OR DS_FINAL_RESULT = 'OK' 
      THEN PLAN_DS_DT
      ELSE 
      NULL
      END
   
   WHEN 'PTQA_DS' THEN 
   CASE WHEN DS_FINAL_RESULT <> 'NG'  
      THEN PE_REC_DT
      ELSE 
      NULL
      END
   WHEN 'PUR1_SUPPCTRL_DS' THEN 
   NULL
   -----PICKING
   WHEN 'PTQA_PACKING_DS' THEN 
   PE_REC_DT
   WHEN 'PUR1_PACKING_SUPPCTRL_DS' THEN 
   NULL
    WHEN 'EPE' THEN 
   PE_REC_DT
   WHEN 'PUR2' THEN 
   NULL
   ELSE
   NULL
  END AS PE_REC_DATE_DS
  ,
  CASE DEPT_UPLOAD 
  WHEN 'PUR1_CHTCTRL_DS' 
   THEN 
  CASE WHEN  DS_FINAL_RESULT = 'MTOK' OR DS_FINAL_RESULT = 'OK' 
      THEN PLAN_DS_DT
      ELSE 
      NULL
      END
   WHEN 'IDPE' THEN 
     CASE WHEN  DS_FINAL_RESULT = 'MTOK' OR DS_FINAL_RESULT = 'OK' 
      THEN JUD_FN_DT
      ELSE 
      NULL
      END

   WHEN 'RA_MO' THEN 
   CASE WHEN  DS_FINAL_RESULT = 'MTOK' OR DS_FINAL_RESULT = 'OK' 
      THEN JUD_FN_DT
      ELSE 
      NULL
      END
   WHEN 'HT_PX' THEN 
    CASE WHEN  DS_FINAL_RESULT = 'MTOK' OR DS_FINAL_RESULT = 'OK' 
      THEN JUD_FN_DT
      ELSE 
      NULL
      END
   
   WHEN 'RA_PX' THEN 
   CASE WHEN  DS_FINAL_RESULT = 'MTOK' OR DS_FINAL_RESULT = 'OK' 
      THEN JUD_FN_DT
      ELSE 
      NULL
      END
   
   WHEN 'PTQA_DS' THEN 
   CASE WHEN DS_FINAL_RESULT <> 'NG'  
      THEN JUD_FN_DT
      ELSE 
      NULL
      END
   WHEN 'PUR1_SUPPCTRL_DS' THEN 
   NULL
   -----PICKING
   WHEN 'PTQA_PACKING_DS' THEN 
   JUD_FN_DT
   WHEN 'PUR1_PACKING_SUPPCTRL_DS' THEN 
   NULL
    WHEN 'EPE' THEN 
   JUD_FN_DT
   WHEN 'PUR2' THEN 
   NULL
   ELSE
   NULL
  END AS JUD_FN_DT_D
  ,
  CASE DEPT_UPLOAD 
  WHEN 'PUR1_CHTCTRL_DS' 
   THEN 
  CASE WHEN  DS_FINAL_RESULT = 'MTOK' OR DS_FINAL_RESULT = 'OK' 
      THEN PLAN_DS_DT
      ELSE 
      NULL
      END
   WHEN 'IDPE' THEN 
     CASE WHEN  DS_FINAL_RESULT = 'MTOK' OR DS_FINAL_RESULT = 'OK' 
      THEN JUD_FN_DT
      ELSE 
      NULL
      END

   WHEN 'RA_MO' THEN 
   CASE WHEN  DS_FINAL_RESULT = 'MTOK' OR DS_FINAL_RESULT = 'OK' 
      THEN JUD_FN_DT
      ELSE 
      NULL
      END
   WHEN 'HT_PX' THEN 
    CASE WHEN  DS_FINAL_RESULT = 'MTOK' OR DS_FINAL_RESULT = 'OK' 
      THEN JUD_FN_DT
      ELSE 
      NULL
      END
   
   WHEN 'RA_PX' THEN 
   CASE WHEN  DS_FINAL_RESULT = 'MTOK' OR DS_FINAL_RESULT = 'OK' 
      THEN JUD_FN_DT
      ELSE 
      NULL
      END
   
   WHEN 'PTQA_DS' THEN 
   CASE WHEN DS_FINAL_RESULT <> 'NG'  
      THEN SCAN_DT
      ELSE 
      NULL
      END
   WHEN 'PUR1_SUPPCTRL_DS' THEN 
   NULL
   -----PICKING
   WHEN 'PTQA_PACKING_DS' THEN 
   SCAN_DT
   WHEN 'PUR1_PACKING_SUPPCTRL_DS' THEN 
   NULL
    WHEN 'EPE' THEN 
   JUD_FN_DT
   WHEN 'PUR2' THEN 
   NULL
   ELSE
   NULL
  END AS SCAN_DT_DS
  ,
  
  
  CASE DEPT_UPLOAD 
  WHEN 'PUR1_CHTCTRL_DS' 
   THEN 
    RESULT_DS 

   WHEN 'IDPE' THEN 
    NULL

   WHEN 'RA_MO' THEN 
   RESULT_DS
  
   WHEN 'HT_PX' THEN 
   RESULT_DS
   
   WHEN 'RA_PX' THEN 
   NULL
   
   WHEN 'PTQA_DS' THEN 
   CASE WHEN DS_FINAL_RESULT <> 'NG'  
      THEN RESULT_DS
      ELSE 
      DS_FINAL_RESULT
      END
   WHEN 'PUR1_SUPPCTRL_DS' THEN 
   NULL
   -----PICKING
   WHEN 'PTQA_PACKING_DS' THEN 
   NULL
   WHEN 'PUR1_PACKING_SUPPCTRL_DS' THEN 
   NULL
    WHEN 'EPE' THEN 
   NULL
   WHEN 'PUR2' THEN 
   NULL
   ELSE
   NULL
  END AS RESULT_DS_N1,
  ------------------------------
  CASE DEPT_UPLOAD 
  WHEN 'PUR1_CHTCTRL_DS' 
   THEN 
    DWG_NO_DS 

   WHEN 'IDPE' THEN 
    NULL

   WHEN 'RA_MO' THEN 
   DWG_NO_DS
  
   WHEN 'HT_PX' THEN 
   DWG_NO_DS
   
   WHEN 'RA_PX' THEN 
   NULL
   
   WHEN 'PTQA_DS' THEN 
   CASE WHEN DS_FINAL_RESULT <> 'NG'  
      THEN DWG_NO_DS
      ELSE 
      ACTUAL_DWG
      END
   WHEN 'PUR1_SUPPCTRL_DS' THEN 
   NULL
   -----PICKING
   WHEN 'PTQA_PACKING_DS' THEN 
   NULL
   WHEN 'PUR1_PACKING_SUPPCTRL_DS' THEN 
   NULL
    WHEN 'EPE' THEN 
   NULL
   WHEN 'PUR2' THEN 
   NULL
   ELSE
   NULL
  END AS DWG_NO_DS_N1,
   ------------------------------
  CASE DEPT_UPLOAD 
  WHEN 'PUR1_CHTCTRL_DS' 
   THEN 
    JUD_FN_DT_DS 

   WHEN 'IDPE' THEN 
    NULL

   WHEN 'RA_MO' THEN 
   JUD_FN_DT_DS
  
   WHEN 'HT_PX' THEN 
   JUD_FN_DT_DS
   
   WHEN 'RA_PX' THEN 
   NULL
   
   WHEN 'PTQA_DS' THEN 
   CASE WHEN DS_FINAL_RESULT <> 'NG'  
      THEN JUD_FN_DT_DS
      ELSE 
      JUD_FN_DT
      END
   WHEN 'PUR1_SUPPCTRL_DS' THEN 
   NULL
   -----PICKING
   WHEN 'PTQA_PACKING_DS' THEN 
   NULL
   WHEN 'PUR1_PACKING_SUPPCTRL_DS' THEN 
   NULL
    WHEN 'EPE' THEN 
   NULL
   WHEN 'PUR2' THEN 
   NULL
   ELSE
   NULL
  END AS JUD_FN_DT_DS_N1,
   ------------------------------
  CASE DEPT_UPLOAD 
  WHEN 'PUR1_CHTCTRL_DS' 
   THEN 
    SCAN_DATE_DS 

   WHEN 'IDPE' THEN 
    NULL

   WHEN 'RA_MO' THEN 
   SCAN_DATE_DS
  
   WHEN 'HT_PX' THEN 
   SCAN_DATE_DS
   
   WHEN 'RA_PX' THEN 
   NULL
   
   WHEN 'PTQA_DS' THEN 
   CASE WHEN DS_FINAL_RESULT <> 'NG'  
      THEN SCAN_DATE_DS
      ELSE 
      SCAN_DT
      END
   WHEN 'PUR1_SUPPCTRL_DS' THEN 
   NULL
   -----PICKING
   WHEN 'PTQA_PACKING_DS' THEN 
   NULL
   WHEN 'PUR1_PACKING_SUPPCTRL_DS' THEN 
   NULL
    WHEN 'EPE' THEN 
   NULL
   WHEN 'PUR2' THEN 
   NULL
   ELSE
   NULL
  END AS SCAN_DATE_DS_N1,
  RESULT_DS,
  DWG_NO_DS,
  JUD_FN_DT_DS,
  SCAN_DATE_DS,
  DIE_NEED_TRANSFER,
  PLAN_ETD,
  PLAN_ETA,
  ACT_ETA,
  TRANSFER_BY,
  CREATE_DT,
  CREATE_BY,
  UPDATE_DT,
  UPDATE_BY,
  STATUS_ID,
  DEPT_UPLOAD
FROM T_MTDB_CTRLDIE_TRANSFER;
--------------------------------------------------------
--  DDL for View V_MTDB_DATA_PARTLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_MTDB_DATA_PARTLIST" ("MT_MODEL", "COMMON_LIST", "COUNT_DS", "COUNT_PART_NO", "CTGY_DS", "EST_DS_CTGY", "STATUS", "COLOR", "CATEGORY", "ORDER_BY", "ASSY_PLACE", "MAIN_SUB", "INPUT_PHASE", "LV_INP_DE", "LV_INP_MT", "UNIT_NO", "UNIT_NAME", "PART_NO", "DIM", "PART_NAME", "DWG_NO", "ECN_NO", "ECN_REC_DT", "SEQ_ECN", "ECN_PHASE", "ECN_DETAIL", "PROCESS", "TEXTURE", "MIRROR", "SCREEN", "SPRAY", "CAVITY", "SUP_CODE", "INJ_SUPPLIER", "DIE_SUPPLIER", "DIE_CONTROL", "DIE_JUDGE_RESP", "MOLD_NO", "PART_CM_MO_FM", "COUNTRY", "CONTROL", "MP_DWG_ISU_JP", "SEQ_DWG", "DS_PLAN_DT", "ETM_DS_OK_TM", "ETM_DS_OK_DT", "DS_OK_LEADTIME", "DS_OK_LEADTIME_WKS", "DRW_STATUS", "LEADTIME_WK", "STATUS_DS", "SEQ", "INJ_PLACE", "REC_DT", "REMARK_DS", "ACT_ETD", "ISU_PR_DT", "ISU_PR_DWG", "REMARK", "MODEL", "DATA_PART", "DATA_PART_NPMD") AS 
  SELECT 
A.MT_MODEL,
COMMON_LIST,
COUNT_DS,
COUNT_PART_NO,
CTGY_DS,
EST_DS_CTGY,
STATUS,
COLOR,
CATEGORY,
ORDER_BY,
ASSY_PLACE,
MAIN_SUB,
INPUT_PHASE,
LV_INP_DE,
LV_INP_MT,
UNIT_NO,
UNIT_NAME,
A.PART_NO,
A.DIM,
PART_NAME,
A.DWG_NO,
ECN_NO,
ECN_REC_DT,
SEQ_ECN,
ECN_PHASE,
ECN_DETAIL,
PROCESS,
TEXTURE,
MIRROR,
SCREEN,
SPRAY,
CAVITY,
SUP_CODE,
INJ_SUPPLIER,
DIE_SUPPLIER,
DIE_CONTROL,
DIE_JUDGE_RESP,
MOLD_NO,
PART_CM_MO_FM,
COUNTRY,
CONTROL,
MP_DWG_ISU_JP,
SEQ_DWG,
DS_PLAN_DT,
ETM_DS_OK_TM,
ETM_DS_OK_DT,
DS_OK_LEADTIME,
DS_OK_LEADTIME_WKS,
DRW_STATUS,
LEADTIME_WK,
STATUS_DS,
SEQ,
INJ_PLACE,
REC_DT,
REMARK_DS,
ACT_ETD,
ISU_PR_DT,
ISU_PR_DWG,
REMARK ,
C.MODEL,
DATA_PART,
DATA_PART_NPMD
FROM V_MTDB_PARTLIST A 
LEFT JOIN
(SELECT MT_MODEL,
  PART_NO,
  DIM,
  DWG_NO,
 
   LISTAGG(case WHEN MODEL is null then '' ELSE MODEL end
   ||','||case WHEN PART_RESULT is null then '' ELSE PART_RESULT end
   ||','||case WHEN PLAN_ETD is null then null ELSE PLAN_ETD end
   ||','||case WHEN PLAN_ETA is null then null ELSE PLAN_ETA end
   ||','||case WHEN ACT_ETA is null then null ELSE ACT_ETA end
   ||','||case WHEN ACT_JUD is null then null ELSE ACT_JUD end
   ||','||case WHEN PO is null then '' ELSE PO end
   ||','||case WHEN IN_HOUSE_OD_NO is null then '' ELSE IN_HOUSE_OD_NO end
   ||','||case WHEN QTY_ORDER is null then null ELSE QTY_ORDER end
   ||','||case WHEN ACC_QT is null then '' ELSE ACC_QT end
   ||','||case WHEN ACP_QT is null then '' ELSE ACP_QT end
   ||','||case WHEN DIFF is null then null ELSE DIFF end
   ||','||case WHEN CURRENCY is null then '' ELSE CURRENCY end
   ||','||case WHEN PUR_PRICE is null then '' ELSE PUR_PRICE end
   ||','||case WHEN GROUP_CD is null then '' ELSE GROUP_CD end
   ,'|') WITHIN GROUP (
    ORDER BY MODEL ASC) AS DATA_PART,
     LISTAGG(case WHEN MODEL is null then '' ELSE MODEL end
   ||','||case WHEN PART_RESULT is null then '' ELSE PART_RESULT end
   ||','||case WHEN PLAN_ETA is null then null ELSE PLAN_ETA end
   ||','||case WHEN ACT_ETA is null then null ELSE ACT_ETA end

   ||','||case WHEN PO is null then '' ELSE PO end
   ||','||case WHEN IN_HOUSE_OD_NO is null then '' ELSE IN_HOUSE_OD_NO end
   ||','||case WHEN QTY_ORDER is null then null ELSE QTY_ORDER end
   ||','||case WHEN ACC_QT is null then '' ELSE ACC_QT end
   ||','||case WHEN ACP_QT is null then '' ELSE ACP_QT end
   ||','||case WHEN DIFF is null then null ELSE DIFF end

   ,'|') WITHIN GROUP (
    ORDER BY MODEL ASC) AS DATA_PART_NPMD
  
 
FROM V_MTDB_MT_PART_GROUP GROUP BY MT_MODEL,
  PART_NO,
  DIM,
  DWG_NO)B ON
  A.MT_MODEL = B.MT_MODEL 
  AND (A.PART_NO = B.PART_NO 
  OR A.ORDER_BY = B.PART_NO) 
  AND A.DIM = B.DIM 
  AND A.DWG_NO = B.DWG_NO
  LEFT JOIN (SELECT 
  MT_MODEL,
   LISTAGG(case WHEN MODEL is null then '' ELSE MODEL end,',') WITHIN GROUP (
    ORDER BY MODEL ASC) AS MODEL
FROM T_MTDB_MASTER_SERIES GROUP BY MT_MODEL) C ON
  A.MT_MODEL = C.MT_MODEL;
--------------------------------------------------------
--  DDL for View V_MTDB_DIE_SAMPLE_STATUS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_MTDB_DIE_SAMPLE_STATUS" ("MT_MODEL", "CATEGORY", "DIE_JUDGE_RESP", "TOTAL", "OK", "MTOK", "PTQA", "PE", "PRQA", "MOLD", "PRESS", "KANAN", "YAKO", "HAVE_SCH", "NO_SCH", "DE_LAY") AS 
  SELECT 
MT_MODEL,
CATEGORY,
DIE_JUDGE_RESP2 as DIE_JUDGE_RESP,
SUM(TO_TAL)as TOTAL,
SUM(OK)as OK, 
SUM(MTOK) as MTOK,
SUM(PTQA)as PTQA,
SUM(PE)as PE,
SUM(PRQA)as PRQA,
SUM(MOLD)as MOLD,
SUM(PRESS)as PRESS,
SUM(KANAN)as KANAN,
SUM(YAKO)as YAKO,
SUM(HAVE_SCH)as HAVE_SCH,
SUM(ON_SCH)as NO_SCH,
SUM(DE_LAY)as DE_LAY
FROM
(SELECT 
MT_MODEL,
CATEGORY,
CASE  WHEN CATEGORY = 'ELEC' OR CATEGORY = 'PACK' 
THEN 'CHT' ELSE DIE_JUDGE_RESP END as DIE_JUDGE_RESP2,
DIE_JUDGE_RESP,
COUNT(DIE_JUDGE_RESP) as TO_TAL,
COUNT(OK) as OK,
COUNT(MTOK) as MTOK,
COUNT(PTQA)as PTQA,
COUNT(PE)as PE,
COUNT(PRQA)as PRQA,
COUNT(MOLD)as MOLD,
COUNT(PRESS)as PRESS,
COUNT(KANAN) as KANAN,
COUNT(YAKO)as YAKO,
COUNT(HAVE_SCH) as HAVE_SCH,
COUNT(ON_SCH)as ON_SCH,
COUNT(DE_LAY)as DE_LAY
FROM
(SELECT 
  MT_MODEL,
  CATEGORY,
  DIE_JUDGE_RESP,
  CASE CATEGORY WHEN 'MECH'
  THEN 
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN
        CASE WHEN DS_FINAL_RESULT = 'OK' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'OK' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'OK' THEN DS_FINAL_RESULT
      END
      END
      END
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'OK' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'OK' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'OK' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'OK' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'OK' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'OK' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      END
      END     
END
      as OK,
      CASE CATEGORY WHEN 'MECH' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MTOK' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MTOK' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MTOK' THEN DS_FINAL_RESULT
      END
      END
      END
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MTOK' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MTOK' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MTOK' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MTOK' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MTOK' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MTOK' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      END
      END     
END
      as MTOK,
       CASE CATEGORY WHEN 'MECH' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PTQA' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PTQA' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PTQA' THEN DS_FINAL_RESULT
      END
      END
      END
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PTQA' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PTQA' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PTQA' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PTQA' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PTQA' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PTQA' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      END
      END     
END
      as PTQA,
      CASE CATEGORY WHEN 'MECH' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PE' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PE' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PE' THEN DS_FINAL_RESULT
      END
      END
      END
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PE' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PE' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PE' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PE' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PE' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PE' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      END
      END     
END
      as PE,
       CASE CATEGORY WHEN 'MECH' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRQA' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRQA' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRQA' THEN DS_FINAL_RESULT
      END
      END
      END
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRQA' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRQA' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRQA' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRQA' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRQA' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRQA' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      END
      END     
END
      as PRQA,
      CASE CATEGORY WHEN 'MECH' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MOLD' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MOLD' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MOLD' THEN DS_FINAL_RESULT
      END
      END
      END
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MOLD' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MOLD' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MOLD' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MOLD' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MOLD' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'MOLD' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      END
      END     
END
      as MOLD, 
      CASE CATEGORY WHEN 'MECH' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRESS' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRESS' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRESS' THEN DS_FINAL_RESULT
      END
      END
      END
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRESS' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRESS' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRESS' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRESS' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRESS' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'PRESS' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      END
      END     
END
      as PRESS,
      CASE CATEGORY WHEN 'MECH' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'KANAN' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'KANAN' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'KANAN' THEN DS_FINAL_RESULT
      END
      END
      END
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'KANAN' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'KANAN' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'KANAN' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'KANAN' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'KANAN' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'KANAN' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      END
      END     
END
      as KANAN,
       CASE CATEGORY WHEN 'MECH' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'YAKO' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'YAKO' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'YAKO' THEN DS_FINAL_RESULT
      END
      END
      END
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'YAKO' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'YAKO' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'YAKO' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'YAKO' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'YAKO' THEN DS_FINAL_RESULT
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'YAKO' THEN DS_FINAL_RESULT
      END
      END
      END
      END
      END
      END     
END
      as YAKO,
       CASE CATEGORY WHEN 'MECH' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
       CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT >= UPDATE_DT AND PTQA_REC_DT is null THEN 'HAVE SCH'
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT >= UPDATE_DT AND PTQA_REC_DT is null THEN 'HAVE SCH'
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT >= UPDATE_DT AND PTQA_REC_DT is null THEN 'HAVE SCH'
      END
      END
      END
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT >= UPDATE_DT AND PTQA_REC_DT is null THEN 'HAVE SCH'
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
       CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT >= UPDATE_DT AND PTQA_REC_DT is null THEN 'HAVE SCH'
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
       CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT >= UPDATE_DT AND PTQA_REC_DT is null THEN 'HAVE SCH'
      END
      END
      END
      END
      ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT >= UPDATE_DT AND PTQA_REC_DT is null THEN 'HAVE SCH'
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
       CASE WHEN DS_FINAL_RESULT = 'NG'  OR DS_FINAL_RESULT  is null AND PLAN_DS_DT >= UPDATE_DT AND PTQA_REC_DT is null THEN 'HAVE SCH'
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT >= UPDATE_DT AND PTQA_REC_DT is null THEN 'HAVE SCH'
      END
      END
      END
      END
      END
      END     
END
      as HAVE_SCH,
        CASE CATEGORY WHEN 'MECH' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
       CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT = '-' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT is null AND PTQA_REC_DT is null THEN   'ON SCH' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
       CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT = '-' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT is null AND PTQA_REC_DT is null THEN   'ON SCH' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT = '-' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT is null AND PTQA_REC_DT is null THEN   'ON SCH' 
      END
      END
      END
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT = '-' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT is null AND PTQA_REC_DT is null THEN   'ON SCH' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
       CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT = '-' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT is null AND PTQA_REC_DT is null THEN   'ON SCH' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
      CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT = '-' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT is null AND PTQA_REC_DT is null THEN   'ON SCH' 
      END
      END
      END
      END
      ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
       CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT = '-' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT is null AND PTQA_REC_DT is null THEN   'ON SCH' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
      CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT = '-' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT is null AND PTQA_REC_DT is null THEN   'ON SCH' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
       CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT = '-' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT is null AND PTQA_REC_DT is null THEN   'ON SCH' 
      END
      END
      END
      END
      END
      END     
END
      as ON_SCH,
       CASE CATEGORY WHEN 'MECH' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
       CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT < UPDATE_DT AND PTQA_REC_DT is null THEN   'DELAY' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
       CASE WHEN DS_FINAL_RESULT = 'NG'  OR DS_FINAL_RESULT  is null AND PLAN_DS_DT < UPDATE_DT AND PTQA_REC_DT is null THEN   'DELAY' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'NG'  OR DS_FINAL_RESULT  is null AND PLAN_DS_DT < UPDATE_DT AND PTQA_REC_DT is null THEN   'DELAY' 
      END
      END
      END
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'NG'  OR DS_FINAL_RESULT  is null AND PLAN_DS_DT < UPDATE_DT AND PTQA_REC_DT is null THEN   'DELAY' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
       CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT < UPDATE_DT AND PTQA_REC_DT is null THEN   'DELAY' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
      CASE WHEN DS_FINAL_RESULT = 'NG' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT < UPDATE_DT AND PTQA_REC_DT is null THEN   'DELAY' 
      END
      END
      END
      END
      ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DS_FINAL_RESULT = 'NG'  OR DS_FINAL_RESULT  is null AND PLAN_DS_DT < UPDATE_DT AND PTQA_REC_DT is null THEN   'DELAY' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
       CASE WHEN DS_FINAL_RESULT = 'NG'  OR DS_FINAL_RESULT  is null AND PLAN_DS_DT < UPDATE_DT AND PTQA_REC_DT is null THEN   'DELAY' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
        CASE WHEN DS_FINAL_RESULT =  'NG' OR DS_FINAL_RESULT  is null AND PLAN_DS_DT < UPDATE_DT AND PTQA_REC_DT is null THEN   'DELAY' 
      END
      END
      END
      END
      END
      END     
END
      as DE_LAY
      
      FROM V_MTDB_PARTLIST_ALL where COUNT_DS = '1' AND CATEGORY <> 'INK_HEAD')  
      GROUP BY MT_MODEL, CATEGORY,DIE_JUDGE_RESP) GROUP BY MT_MODEL, CATEGORY,
      DIE_JUDGE_RESP2;
--------------------------------------------------------
--  DDL for View V_MTDB_DIE_SAMPLE_STATUS_CHART
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_MTDB_DIE_SAMPLE_STATUS_CHART" ("MT_MODEL", "CATEGORY", "PRODUCT_CODE", "QUANTITY") AS 
  SELECT MT_MODEL,
      CATEGORY,
       DECODE(unpivot_row,  1, 'OK',
      2, 'MTOK', 3,'PTQA/EPE', 4, 'PE' 
,5,'PRQA'
, 6, 'MOLD'
, 7, 'PRESS'
, 8, 'KANAN'
, 9, 'YAKO'
, 10,'HAVE SCH'
, 11,'NO SCH'
, 12, 'DELAY'
, 'N/A') AS product_code,
       DECODE(unpivot_row, 1, OK, 
      2, MTOK, 3,PTQA, 4, PE
      ,5,PRQA
      , 6, MOLD
      , 7, PRESS
      , 8, KANAN
      , 9, YAKO
      , 10,HAVE_SCH
      , 11,NO_SCH
      , 12, DE_LAY
      , 'N/A') AS quantity
FROM   (SELECT MT_MODEL,
  CATEGORY,
  ROUND((SUM(TOTAL)/SUM(TOTAL))*100,1) as TOTAL,
  ROUND((SUM(OK)/SUM(TOTAL))*100,1) as OK,
  ROUND((SUM(MTOK)/SUM(TOTAL))*100,1) as MTOK,
  ROUND((SUM(PTQA)/SUM(TOTAL))*100,1) as PTQA,
  ROUND((SUM(PE)/SUM(TOTAL))*100,1) as PE,
  ROUND((SUM(PRQA)/SUM(TOTAL))*100,1) as PRQA,
  ROUND((SUM(MOLD)/SUM(TOTAL))*100,1) as MOLD,
  ROUND((SUM(PRESS)/SUM(TOTAL))*100,1) as PRESS,
  ROUND((SUM(KANAN)/SUM(TOTAL))*100,1) as KANAN,
  ROUND((SUM(YAKO)/SUM(TOTAL))*100,1) as YAKO,
  ROUND((SUM(HAVE_SCH)/SUM(TOTAL))*100,1) as HAVE_SCH,
  ROUND((SUM(NO_SCH)/SUM(TOTAL))*100,1) as NO_SCH,
  ROUND((SUM(DE_LAY)/SUM(TOTAL))*100,1) as DE_LAY
FROM V_MTDB_DIE_SAMPLE_STATUS GROUP BY  MT_MODEL,
  CATEGORY),(SELECT level AS unpivot_row FROM dual CONNECT BY level <= 12);
--------------------------------------------------------
--  DDL for View V_MTDB_ETM_DT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_MTDB_ETM_DT" ("MT_MODEL", "CTGY_DS", "EST_DS_CTGY", "STATUS", "COLOR", "CATEGORY", "ORDER_BY", "ASSY_PLACE", "MAIN_SUB", "INPUT_PHASE", "LV_INP_DE", "LV_INP_MT", "UNIT_NO", "UNIT_NAME", "PART_NO", "DIM", "PART_NAME", "DWG_NO", "ECN_NO", "ECN_REC_DT", "ECN_PHASE", "ECN_DETAIL", "PROCESS", "TEXTURE", "MIRROR", "SCREEN", "SPRAY", "CAVITY", "SUP_CODE", "INJ_SUPPLIER", "DIE_SUPPLIER", "DIE_CONTROL", "DIE_JUDGE_RESP", "MOLD_NO", "PART_CM_MO_FM", "COUNTRY", "CONTROL", "MP_DWG_ISU_JP", "DS_PLAN_DT", "ETM_DS_OK_TM", "WORKING_DAY", "ETM_DS_OK", "INJ_PLACE", "REC_DT", "REMARK_DS", "ACT_ETD", "ISU_PR_DT", "ISU_PR_DWG", "REMARK", "CREATE_DT", "CREATE_BY", "UPDATE_DT", "UPDATE_BY", "STATUS_ID", "COMMON_LIST", "COUNT_DS", "COUNT_PART_NO") AS 
  SELECT A.MT_MODEL
,A.CTGY_DS
,A.EST_DS_CTGY
,A.STATUS
,A.COLOR
,A.CATEGORY
,A.ORDER_BY
,A.ASSY_PLACE
,A.MAIN_SUB
,A.INPUT_PHASE
,A.LV_INP_DE
,A.LV_INP_MT
,A.UNIT_NO
,A.UNIT_NAME
,A.PART_NO
,A.DIM
,A.PART_NAME
,A.DWG_NO
,A.ECN_NO
,A.ECN_REC_DT
,A.ECN_PHASE
,A.ECN_DETAIL
,A.PROCESS
,A.TEXTURE
,A.MIRROR
,A.SCREEN
,A.SPRAY
,A.CAVITY
,A.SUP_CODE
,A.INJ_SUPPLIER
,A.DIE_SUPPLIER
,A.DIE_CONTROL
,A.DIE_JUDGE_RESP
,A.MOLD_NO
,A.PART_CM_MO_FM
,A.COUNTRY
,A.CONTROL
,A.MP_DWG_ISU_JP
,A.DS_PLAN_DT
,A.ETM_DS_OK_TM
,B.WORKING_DAY
,A.DS_PLAN_DT + B.WORKING_DAY AS ETM_DS_OK
,A.INJ_PLACE
,A.REC_DT
,A.REMARK_DS
,A.ACT_ETD
,A.ISU_PR_DT
,A.ISU_PR_DWG
,A.REMARK
,A.CREATE_DT
,A.CREATE_BY
,A.UPDATE_DT
,A.UPDATE_BY
,A.STATUS_ID
,A.COMMON_LIST
,A.COUNT_DS
,A.COUNT_PART_NO
FROM(SELECT 
A.MT_MODEL,
CASE WHEN A.CATEGORY = 'MECH' AND A.DIE_CONTROL = 'CHT' AND A.INJ_PLACE = 'M' THEN  'MECH_CHTCTRL_M' 
ELSE 
CASE WHEN A.CATEGORY = 'MECH' AND A.DIE_CONTROL = 'CHT' AND A.INJ_PLACE = 'I' THEN  'MECH_CHTCTRL_I' 
ELSE  
CASE WHEN A.CATEGORY = 'MECH' AND A.DIE_CONTROL <> 'CHT'  THEN  'MECH_SUPPCTRL'  
ELSE 
CASE WHEN A.CATEGORY = 'PACK'   THEN  'PACKING_SUPPCTRL'  
ELSE 
CASE WHEN A.CATEGORY = 'ELEC'   THEN  'ELEC_SUPPCTRL'  
ELSE
CASE WHEN A.CATEGORY = 'INK_HEAD'   THEN  'INK_HEAD_SUPPCTRL' 
ELSE null
END
END
END
END 
END
END
AS CTGY_DS,
CASE WHEN A.DIE_JUDGE_RESP = 'KANAN'  AND A.INJ_PLACE = 'M' THEN  'KANAN' 
ELSE 
CASE WHEN A.DIE_JUDGE_RESP = 'YAKO'  AND A.INJ_PLACE = 'M' THEN  'YAKO' 
ELSE  
CASE WHEN (A.DIE_JUDGE_RESP  <> 'KANAN' OR A.DIE_JUDGE_RESP  <> 'YAKO') AND A.COUNTRY = 'T'  THEN  'CHT_DPS'  
ELSE 
CASE WHEN (A.DIE_JUDGE_RESP  <> 'KANAN' OR A.DIE_JUDGE_RESP  <> 'YAKO') AND A.COUNTRY <> 'T'  THEN  'CHT_LPS'   

END
END 
END
END
AS EST_DS_CTGY,
  A.STATUS,
  A.COLOR,
  A.CATEGORY,
  A.ORDER_BY,
  A.ASSY_PLACE,
  A.MAIN_SUB,
  A.INPUT_PHASE,
  A.LV_INP_DE,
  A.LV_INP_MT,
  A.UNIT_NO,
  A.UNIT_NAME,
  A.PART_NO,
  A.DIM,
  A.PART_NAME,
  A.DWG_NO,
  A.ECN_NO,
  A.ECN_REC_DT,
  A.ECN_PHASE,
  A.ECN_DETAIL,
  A.PROCESS,
  A.TEXTURE,
  A.MIRROR,
  A.SCREEN,
  A.SPRAY,
  A.CAVITY,
  A.SUP_CODE,
  A.INJ_SUPPLIER,
  A.DIE_SUPPLIER,
  A.DIE_CONTROL,
  A.DIE_JUDGE_RESP,
  A.MOLD_NO,
  A.PART_CM_MO_FM,
  A.COUNTRY,
  A.CONTROL,
  A.MP_DWG_ISU_JP,
  A.DS_PLAN_DT,
  A.ETM_DS_OK_TM,
  A.INJ_PLACE,
  A.REC_DT,
  A.REMARK_DS,
  A.ACT_ETD,
  A.ISU_PR_DT,
  A.ISU_PR_DWG,
  A.REMARK,
  A.COMMON_LIST,
  A.COUNT_DS,
  A.COUNT_PART_NO,
  A.CREATE_DT,
  A.CREATE_BY,
  A.UPDATE_DT,
  A.UPDATE_BY,
  A.STATUS_ID
FROM T_MTDB_MASTER_PARTLIST A ) A LEFT JOIN T_MTDB_DS_LEADTIME_MASTER B ON
 A.MT_MODEL = A.MT_MODEL AND A.EST_DS_CTGY = B.DS_CTGY AND A.ETM_DS_OK_TM = B.DS_TIMES;
--------------------------------------------------------
--  DDL for View V_MTDB_EXTRAORDER
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_MTDB_EXTRAORDER" ("MT_MODEL", "MODEL", "MT_PART_STATUS", "TOTAL", "OK", "OK_BL", "PTQA_EPE", "PE", "PRQA", "MOLD", "PRESS", "HAVE_SCH", "NO_SCH", "DE_LAY") AS 
  SELECT MT_MODEL,
  MODEL,
  MT_PART_STATUS,
   COUNT(MT_PART_STATUS) as TOTAL,
  COUNT(OK) as OK,
  COUNT(OK_BL) as OK_BL,
  COUNT(PTQA_EPE) as PTQA_EPE,
  COUNT(PE) as PE,
  COUNT(PRQA) as PRQA,
  COUNT(MOLD) as MOLD,
  COUNT(PRESS) as PRESS,
  COUNT(HAVE_SCH) as HAVE_SCH,
  COUNT(NO_SCH) as NO_SCH,
  COUNT(DE_LAY) as DE_LAY
FROM 
(SELECT MT_MODEL,
  MODEL,
  CATEGORY,
  'EXTRA ORDER' as MT_PART_STATUS,
  CASE CATEGORY WHEN 'MECH'
  THEN  
        CASE WHEN RESULT = 'OK'  THEN RESULT
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC'
  THEN
        CASE WHEN RESULT = 'OK'   THEN RESULT
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN RESULT = 'OK' THEN RESULT
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN RESULT = 'OK'  THEN RESULT
        END
      END
      END
      END
  
END
      as OK,
       CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN RESULT = 'OK(B/L)'   THEN RESULT
    
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN RESULT = 'OK(B/L)' THEN RESULT
    
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN RESULT = 'OK(B/L)' THEN RESULT
      
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN RESULT = 'OK(B/L)' THEN RESULT
       
        END
      END
      END
      END
  
       
END
      as OK_BL,
       CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN RESULT = 'PTQA' OR RESULT = 'EPE'  THEN RESULT
    
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN RESULT = 'PTQA' OR RESULT = 'EPE'  THEN RESULT
      
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN RESULT = 'PTQA' OR RESULT = 'EPE'  THEN RESULT
      
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN RESULT = 'PTQA' OR RESULT = 'EPE'  THEN RESULT
       
        END
      END
      END
      END
  
       
END
      as PTQA_EPE,
      CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN RESULT = 'PE'  THEN RESULT
     
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN RESULT = 'PE'  THEN RESULT
     
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN RESULT = 'PE' THEN RESULT
       
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN RESULT = 'PE'  THEN RESULT
      
        END
      END
      END
      END
  
       
END
      as PE,
       CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN RESULT = 'PRQA' THEN RESULT
     
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN RESULT = 'PRQA' THEN RESULT
     
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN RESULT = 'PRQA' THEN RESULT
      
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN RESULT = 'PRQA'  THEN RESULT
     
        END
      END
      END
      END   
END
      as PRQA,
      CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN RESULT = 'MOLD' THEN RESULT
    
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN RESULT = 'MOLD'  THEN RESULT
     
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN RESULT = 'MOLD'  THEN RESULT
   
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN RESULT = 'MOLD'  THEN RESULT
       
        END
      END
      END
      END
  
       
END
      as MOLD,
      CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN RESULT = 'PRESS' THEN RESULT
      
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN RESULT = 'PRESS'  THEN RESULT
    
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN RESULT = 'PRESS' THEN RESULT
       
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN RESULT = 'PRESS' THEN RESULT
      
        END
      END
      END
      END
  
       
END
      as PRESS,
      CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN RESULT = 'NG' OR RESULT is null AND PLAN_DEL_DT >= UPDATE_DT AND ACT_REC_DT is null  THEN 'HAVE SCH'
     
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN RESULT = 'NG' OR RESULT is null AND PLAN_DEL_DT >= UPDATE_DT AND ACT_REC_DT is null  THEN 'HAVE SCH'
   
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN RESULT = 'NG' OR RESULT is null  AND PLAN_DEL_DT >= UPDATE_DT AND ACT_REC_DT is null   THEN 'HAVE SCH'
       
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN RESULT = 'NG' OR RESULT is null  AND PLAN_DEL_DT >= UPDATE_DT AND ACT_REC_DT is null   THEN 'HAVE SCH'
      
        END
      END
      END
      END
END
      as HAVE_SCH,
      CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN RESULT = 'NG' OR RESULT is null AND PLAN_DEL_DT is null AND ACT_REC_DT is null   THEN 'NO SCH'
     
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN RESULT = 'NG' OR RESULT is null AND PLAN_DEL_DT is null AND ACT_REC_DT is null   THEN 'NO SCH'
   
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN RESULT = 'NG' OR RESULT is null  AND PLAN_DEL_DT is null AND ACT_REC_DT is null  THEN 'NO SCH'
       
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN RESULT = 'NG' OR RESULT is null  AND PLAN_DEL_DT is null AND ACT_REC_DT is null THEN 'NO SCH'
      
        END
      END
      END
      END
END
      as NO_SCH,
       CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN RESULT = 'NG' OR RESULT is null AND PLAN_DEL_DT < UPDATE_DT AND ACT_REC_DT is null THEN 'DELAY'
     
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN RESULT = 'NG' OR RESULT is null AND PLAN_DEL_DT < UPDATE_DT AND ACT_REC_DT is null THEN 'DELAY'
   
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN RESULT = 'NG' OR RESULT is null AND PLAN_DEL_DT < UPDATE_DT AND ACT_REC_DT is null THEN 'DELAY'
       
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN RESULT = 'NG' OR RESULT is null AND PLAN_DEL_DT < UPDATE_DT AND ACT_REC_DT is null THEN 'DELAY'
      
        END
      END
      END
      END
END
      as DE_LAY,
  PLAN_DEL_DT,
  ACT_REC_DT,
  UPDATE_DT
FROM T_MTDB_EXTRA_ORDER where COUNT_ITEMS = '1')GROUP BY MT_MODEL,MODEL,MT_PART_STATUS;
--------------------------------------------------------
--  DDL for View V_MTDB_MECH_DIE_TRF_CHART
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_MTDB_MECH_DIE_TRF_CHART" ("MT_MODEL", "PRODUCT_CODE", "QUANTITY") AS 
  SELECT MT_MODEL,
       DECODE(unpivot_row,
      1, 'WAIT ETD', 2,'ON THE WAY', 3, 'ETA OK'
, 'N/A') AS product_code,
       DECODE(unpivot_row,  
      1, WAIT_ETD, 2,ON_THE_WAY, 3, ETA_OK 
      , 'N/A') AS quantity
FROM  
(SELECT MT_MODEL,
  ROUND((SUM(TO_TAL)/SUM(TO_TAL))*100,2) AS TO_TAL,
  ROUND((SUM(WAIT_ETD)/SUM(TO_TAL))*100,2)  as WAIT_ETD,
  ROUND((SUM(ON_THE_WAY)/SUM(TO_TAL))*100,2)  as ON_THE_WAY,
  ROUND((SUM(ETA_OK)/SUM(TO_TAL))*100,2)  as ETA_OK
FROM V_MTDB_MECH_DIE_TRF_STATUS GROUP BY MT_MODEL),(SELECT level AS unpivot_row FROM dual CONNECT BY level <= 3);
--------------------------------------------------------
--  DDL for View V_MTDB_MECH_DIE_TRF_STATUS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_MTDB_MECH_DIE_TRF_STATUS" ("MT_MODEL", "DIE_JUDGE_RESP", "TO_TAL", "WAIT_ETD", "ON_THE_WAY", "ETA_OK") AS 
  SELECT
MT_MODEL,
DIE_JUDGE_RESP,
COUNT(DIE_JUDGE_RESP) as TO_TAL,
COUNT(WAIT_ETD)AS WAIT_ETD,
COUNT(ON_THE_WAY)as ON_THE_WAY, 
COUNT(ETA_OK)as ETA_OK
FROM
(SELECT
MT_MODEL,
CATEGORY,
DIE_JUDGE_RESP,
DIE_NEED_TRF,
 CASE CATEGORY WHEN 'MECH' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DIE_NEED_TRF = 'YES' AND ACT_ETD is null AND ACT_ETA is null THEN   'WAIT ETD' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
       CASE WHEN DIE_NEED_TRF = 'YES' AND ACT_ETD is null AND ACT_ETA is null THEN   'WAIT ETD' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
       CASE WHEN DIE_NEED_TRF = 'YES' AND ACT_ETD is null AND ACT_ETA is null THEN   'WAIT ETD' 
      END
      END
      END
      END
      END
      as WAIT_ETD,
      CASE CATEGORY WHEN 'MECH' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DIE_NEED_TRF = 'YES' AND ACT_ETD is NOT null AND ACT_ETA is null THEN   'ON THE WAY' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
       CASE WHEN DIE_NEED_TRF = 'YES' AND ACT_ETD is NOT null AND ACT_ETA is null THEN   'ON THE WAY' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
       CASE WHEN DIE_NEED_TRF = 'YES' AND ACT_ETD is NOT null AND ACT_ETA is null THEN   'ON THE WAY' 
      END
      END
      END
      END
      END
      as ON_THE_WAY,
       CASE CATEGORY WHEN 'MECH' 
  THEN  
      CASE DIE_JUDGE_RESP WHEN 'CHT' 
      THEN 
        CASE WHEN DIE_NEED_TRF = 'YES' AND ACT_ETD is NOT null AND ACT_ETA is NOT null THEN   'ETA OK' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'KANAN' 
      THEN 
       CASE WHEN DIE_NEED_TRF = 'YES' AND ACT_ETD is NOT null AND ACT_ETA is NOT null THEN   'ETA OK' 
        END
      ELSE
      CASE DIE_JUDGE_RESP WHEN 'YAKO' 
      THEN 
       CASE WHEN DIE_NEED_TRF = 'YES' AND ACT_ETD is NOT null AND ACT_ETA is NOT null THEN   'ETA OK' 
      END
      END
      END
      END
      END
      as ETA_OK
FROM V_MTDB_PARTLIST_ALL WHERE COUNT_DS = '1' AND CATEGORY = 'MECH' AND DIE_NEED_TRF = 'YES')
GROUP BY MT_MODEL,CATEGORY,
DIE_JUDGE_RESP;
--------------------------------------------------------
--  DDL for View V_MTDB_MT_PART_GROUP
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_MTDB_MT_PART_GROUP" ("MT_MODEL", "COUNT_PART_NO", "MODEL", "PART_NO", "DIM", "DWG_NO", "CATEGORY", "ORDER_BY", "STATUS", "PART_RESULT", "PLAN_ETD", "PLAN_ETA", "ACT_ETA", "ACT_JUD", "PO", "IN_HOUSE_OD_NO", "QTY_ORDER", "ACC_QT", "ACP_QT", "DIFF", "CURRENCY", "PUR_PRICE", "UPDATE_DT", "GROUP_CD") AS 
  SELECT 
  A.MT_MODEL,
  D.COUNT_PART_NO,
  A.MODEL,
  A.PART_NO,
  A.DIM,
  A.DWG_NO,
  D.CATEGORY,
  D.ORDER_BY,
  B.STATUS,
  CASE WHEN D.CATEGORY = 'ELEC' AND B.STATUS = 'UI'
  THEN 
  'EPE'
  ELSE CASE WHEN D.CATEGORY <> 'ELEC' AND B.STATUS = 'UI' THEN 'PTQA'
     ELSE CASE WHEN B.ACC_DT IS NULL AND B.ACP_QT IS NULL THEN NULL
      ELSE CASE WHEN B.ACP_QT >= A.QTY_ORDER THEN 'OK' 
      ELSE CASE WHEN B.ACP_QT < A.QTY_ORDER THEN 'OK(B/L)'
      END
      END
      END
      END
  END AS PART_RESULT,
  C.PLAN_ETD,
 case when C.PLAN_ETA is not null then C.PLAN_ETA else case when B.DEL_PART is not null then B.DEL_PART end end  AS PLAN_ETA,
-- B.DEL_PART
  B.ACC_DT AS ACT_ETA,
  B.ACP_DT AS ACT_JUD,
  B.PO,
  A.IN_HOUSE_OD_NO,
  A.QTY_ORDER,
  B.ACC_QT,
  B.ACP_QT,
  NVL(B.ACP_QT,0) - NVL(A.QTY_ORDER,0) AS DIFF,
  B.CURRENCY,
  B.PUR_PRICE,
  B.UPDATE_DT,
  A.GROUP_CD
 FROM T_MTDB_MASTER_MT_ORDER A 
 LEFT JOIN T_MTDB_SIAM B ON A.MT_MODEL = B.MT_MODEL 
 AND A.PART_NO = B.PART_NO  AND A.DIM = B.DIM AND A.DWG_NO = B.DWG_NO
 AND A.GROUP_CD = B.GROUP_CD
 LEFT JOIN T_MTDB_CTRLDIE_TRANSFER_PART C
 ON A.MT_MODEL = C.MT_MODEL  AND A.PART_NO = C.PART_NO  AND A.DIM = B.DIM
 AND A.DWG_NO = C.DWG_NO AND A.GROUP_CD = C.GROUP_CD
 LEFT JOIN V_MTDB_PARTLIST D ON A.MT_MODEL = D.MT_MODEL
 AND A.PART_NO = D.PART_NO AND A.DIM = D.DIM AND A.DWG_NO = D.DWG_NO
 GROUP BY 
  A.MT_MODEL,
  D.CATEGORY,
  D.ORDER_BY,
  D.COUNT_PART_NO,
  A.MODEL,
  A.PART_NO,
  A.DIM,
  A.DWG_NO,
  B.PO,
  A.IN_HOUSE_OD_NO,
  A.QTY_ORDER,
  B.STATUS,
  C.PLAN_ETD,
  C.PLAN_ETA ,
  B.DEL_PART,
  B.ACC_DT,
  B.ACP_DT,
  B.ACC_QT,
  B.ACP_QT,
  B.CURRENCY,
  B.PUR_PRICE,
  B.UPDATE_DT,
  A.GROUP_CD;
--------------------------------------------------------
--  DDL for View V_MTDB_MT_PART_STATUS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_MTDB_MT_PART_STATUS" ("MT_MODEL", "MODEL", "MT_PART_STATUS", "TOTAL", "OK", "OK_BL", "PTQA_EPE", "PE", "PRQA", "MOLD", "PRESS", "HAVE_SCH", "NO_SCH", "DE_LAY") AS 
  SELECT MT_MODEL,
  MODEL, 
  MT_PART_STATUS,
  COUNT(MT_PART_STATUS) as TOTAL,
  COUNT(OK) as OK,
  COUNT(OK_BL) as OK_BL,
  COUNT(PTQA_EPE) as PTQA_EPE,
  COUNT(PE) as PE,
  COUNT(PRQA) as PRQA,
  COUNT(MOLD) as MOLD,
  COUNT(PRESS) as PRESS,
  COUNT(HAVE_SCH) as HAVE_SCH,
  COUNT(NO_SCH) as NO_SCH,
  COUNT(DE_LAY) as DE_LAY
  FROM
(SELECT 
A.MT_MODEL,
B.MODEL,
A.PART_NO,
A.DIM,
A.DWG_NO,
A.CATEGORY,
CASE WHEN B.ORDER_BY = 'A PLAN' THEN
   'COMMON A PLAN'
   ELSE 
   CASE  A.CATEGORY WHEN 'MECH' THEN 'MECHANIC' 
   ELSE
    CASE  A.CATEGORY WHEN 'ELEC' THEN 'ELECTRIC' 
    ELSE
    CASE  A.CATEGORY WHEN 'PACK' THEN 'PACKING' 
     ELSE
    CASE  A.CATEGORY WHEN 'INK_HEAD' THEN 'INK_HEAD' 
    END
    END
    END
   END
   END as MT_PART_STATUS,
B.OK,
B.OK_BL,
B.PTQA_EPE,
B.PE,
B.PRQA,
B.MOLD,
B.PRESS,
B.HAVE_SCH,
B.NO_SCH,
B.DE_LAY,
B.ORDER_BY,
B.PART_RESULT,
B.PLAN_ETD,
B.PLAN_ETA,
B.ACT_ETA,
B.UPDATE_DT
FROM T_MTDB_MASTER_PARTLIST A LEFT JOIN
(SELECT MT_MODEL,
  MODEL,
  PART_NO,
  DIM,
  DWG_NO,
  CATEGORY,
  CASE WHEN ORDER_BY <> 'A PLAN' 
  THEN
  CASE CATEGORY WHEN 'MECH'
  THEN  
        CASE WHEN PART_RESULT = 'OK'  THEN PART_RESULT
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC'
  THEN
        CASE WHEN PART_RESULT = 'OK'   THEN PART_RESULT
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN PART_RESULT = 'OK'  THEN PART_RESULT
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN PART_RESULT = 'OK' THEN PART_RESULT
        END
      END
      END
      END
END
ELSE
 CASE WHEN PART_RESULT = 'OK' THEN PART_RESULT
 END
END
      as OK,
      CASE WHEN ORDER_BY <> 'A PLAN' 
  THEN
       CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN PART_RESULT = 'OK(B/L)' THEN PART_RESULT
    
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN PART_RESULT = 'OK(B/L)' THEN PART_RESULT
    
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN PART_RESULT = 'OK(B/L)' THEN PART_RESULT
      
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN PART_RESULT = 'OK(B/L)' THEN PART_RESULT
       
        END
      END
      END
      END
  
       
END
ELSE
CASE WHEN PART_RESULT = 'OK(B/L)'  THEN PART_RESULT
END
END
      as OK_BL,
       CASE WHEN ORDER_BY <> 'A PLAN' 
  THEN
       CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN PART_RESULT = 'PTQA' OR PART_RESULT = 'EPE' THEN PART_RESULT
    
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN PART_RESULT = 'PTQA' OR PART_RESULT = 'EPE' THEN PART_RESULT
      
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN PART_RESULT = 'PTQA' OR PART_RESULT = 'EPE' THEN PART_RESULT
      
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN PART_RESULT = 'PTQA' OR PART_RESULT = 'EPE' THEN PART_RESULT
       
        END
      END
      END
      END
  
       
END
ELSE
  CASE WHEN PART_RESULT = 'PTQA' OR PART_RESULT = 'EPE' THEN PART_RESULT
        END
END
      as PTQA_EPE,
        CASE WHEN ORDER_BY <> 'A PLAN' 
  THEN
      CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN PART_RESULT = 'PE' THEN PART_RESULT
     
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN PART_RESULT = 'PE' THEN PART_RESULT
     
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN PART_RESULT = 'PE' THEN PART_RESULT
       
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN PART_RESULT = 'PE'  THEN PART_RESULT
      
        END
      END
      END
      END
  
       
END
ELSE
 CASE WHEN PART_RESULT = 'PE' THEN PART_RESULT
 END
END
      as PE,
          CASE WHEN ORDER_BY <> 'A PLAN' 
  THEN
       CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN PART_RESULT = 'PRQA' THEN PART_RESULT
     
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN PART_RESULT = 'PRQA' THEN PART_RESULT
     
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN PART_RESULT = 'PRQA'  THEN PART_RESULT
      
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN PART_RESULT = 'PRQA'  THEN PART_RESULT
     
        END
      END
      END
      END   
END
ELSE
 CASE WHEN PART_RESULT = 'PRQA'  THEN PART_RESULT
        END
END
as PRQA,
   CASE WHEN ORDER_BY <> 'A PLAN' 
  THEN
      CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN PART_RESULT = 'MOLD' AND ORDER_BY <> 'A PLAN'  THEN PART_RESULT
    
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN PART_RESULT = 'MOLD' THEN PART_RESULT
     
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN PART_RESULT = 'MOLD'  THEN PART_RESULT
   
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN PART_RESULT = 'MOLD' THEN PART_RESULT
       
        END
      END
      END
      END
  
       
END
ELSE
CASE WHEN PART_RESULT = 'MOLD'  THEN PART_RESULT
        END
END
      as MOLD,
      CASE WHEN ORDER_BY <> 'A PLAN' 
  THEN
      CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN PART_RESULT = 'PRESS' THEN PART_RESULT
      
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN PART_RESULT = 'PRESS'  THEN PART_RESULT
    
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN PART_RESULT = 'PRESS' THEN PART_RESULT
       
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN PART_RESULT = 'PRESS' THEN PART_RESULT
      
        END
      END
      END
      END
  
       
END
ELSE
 CASE WHEN PART_RESULT = 'PRESS' THEN PART_RESULT
      
        END
END
      as PRESS,
       CASE WHEN ORDER_BY <> 'A PLAN' 
  THEN
      CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN PART_RESULT = 'NG' OR PART_RESULT is null AND PLAN_ETA >= UPDATE_DT AND ACT_ETA is null  THEN 'HAVE SCH'
     
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN PART_RESULT = 'NG' OR PART_RESULT is null AND PLAN_ETA >= UPDATE_DT AND ACT_ETA is null  THEN 'HAVE SCH'
   
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN PART_RESULT = 'NG' OR PART_RESULT is null AND PLAN_ETA >= UPDATE_DT AND ACT_ETA is null  THEN 'HAVE SCH'
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN PART_RESULT = 'NG' OR PART_RESULT is null AND PLAN_ETA >= UPDATE_DT AND ACT_ETA is null  THEN 'HAVE SCH'
      
        END
      END
      END
      END
END
ELSE
 CASE WHEN PART_RESULT = 'NG' OR PART_RESULT is null AND PLAN_ETA >= UPDATE_DT AND ACT_ETA is null  THEN 'HAVE SCH'
      
        END
END
      as HAVE_SCH,
          CASE WHEN ORDER_BY <> 'A PLAN' 
  THEN
      CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN PART_RESULT = 'NG' OR PART_RESULT is null AND PLAN_ETA is null AND ACT_ETA is null  THEN 'NO SCH'
     
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN PART_RESULT = 'NG' OR PART_RESULT is null AND PLAN_ETA is null AND ACT_ETA is null   THEN 'NO SCH'
   
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN PART_RESULT = 'NG' OR PART_RESULT is null AND PLAN_ETA is null AND ACT_ETA is null   THEN 'NO SCH'
       
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN PART_RESULT = 'NG' OR PART_RESULT is null AND PLAN_ETA is null AND ACT_ETA is null  THEN 'NO SCH'
      
        END
      END
      END
      END
END
ELSE
 CASE WHEN PART_RESULT = 'NG' OR PART_RESULT is null AND PLAN_ETA is null AND ACT_ETA is null  THEN 'NO SCH'
        END
END
      as NO_SCH,
       CASE WHEN ORDER_BY <> 'A PLAN' 
  THEN
       CASE CATEGORY WHEN 'MECH' 
  THEN  
        CASE WHEN PART_RESULT = 'NG' OR PART_RESULT is null AND PLAN_ETA < UPDATE_DT AND ACT_ETA is null  THEN 'DELAY'
     
      END
 ELSE
  CASE CATEGORY WHEN 'ELEC' 
  THEN  
        CASE WHEN PART_RESULT = 'NG' OR PART_RESULT is null AND PLAN_ETA < UPDATE_DT AND ACT_ETA is null  THEN 'DELAY'
   
      END
  ELSE 
       CASE CATEGORY WHEN 'PACK' 
  THEN  
        CASE WHEN PART_RESULT = 'NG' OR PART_RESULT is null AND PLAN_ETA < UPDATE_DT AND ACT_ETA is null  THEN 'DELAY'
       
        END
  ELSE
   CASE CATEGORY WHEN 'INK_HEAD' 
  THEN  
        CASE WHEN PART_RESULT = 'NG' OR PART_RESULT is null AND PLAN_ETA < UPDATE_DT AND ACT_ETA is null  THEN 'DELAY'
      
        END
      END
      END
      END
END
ELSE
 CASE WHEN PART_RESULT = 'NG' OR PART_RESULT is null AND PLAN_ETA < UPDATE_DT AND ACT_ETA is null   THEN 'DELAY'
        END
END
      as DE_LAY,
  ORDER_BY,
  PART_RESULT,
  PLAN_ETD,
  PLAN_ETA,
  ACT_ETA,
  UPDATE_DT 
FROM V_MTDB_MT_PART_GROUP WHERE COUNT_PART_NO = '1')B ON A.MT_MODEL = B.MT_MODEL 
 AND A.PART_NO = B.PART_NO  AND A.DIM = B.DIM AND A.DWG_NO = B.DWG_NO WHERE B.MODEL IS NOT NULL) GROUP BY MT_MODEL,MODEL,MT_PART_STATUS;
--------------------------------------------------------
--  DDL for View V_MTDB_MT_PART_U_EXTRA
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_MTDB_MT_PART_U_EXTRA" ("MT_MODEL", "MODEL", "MT_PART_STATUS", "TOTAL", "OK", "OK_BL", "PTQA_EPE", "PE", "PRQA", "MOLD", "PRESS", "HAVE_SCH", "NO_SCH", "DE_LAY") AS 
  SELECT MT_MODEL,
MODEL,
MT_PART_STATUS, 
TOTAL,
OK,
OK_BL,
PTQA_EPE,
PE,
PRQA,
MOLD,
PRESS,
HAVE_SCH,
NO_SCH,
DE_LAY  FROM V_MTDB_MT_PART_STATUS WHERE MT_PART_STATUS IS NOT NULL
UNION ALL 
SELECT MT_MODEL,
MODEL,
MT_PART_STATUS,
TOTAL,
OK,
OK_BL,
PTQA_EPE,
PE,
PRQA,
MOLD,
PRESS,
HAVE_SCH,
NO_SCH,
DE_LAY  FROM V_MTDB_EXTRAORDER 
ORDER BY MT_MODEL;
--------------------------------------------------------
--  DDL for View V_MTDB_MT_PART_U_EXTRA_CHART
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_MTDB_MT_PART_U_EXTRA_CHART" ("MT_MODEL", "MODEL", "MT_PART_STATUS", "PRODUCT_CODE", "QUANTITY") AS 
  SELECT MT_MODEL, 
      MODEL,
      MT_PART_STATUS,
       DECODE(unpivot_row,  1, 'OK', 
      2, 'OK(B/L)', 3,'PTQA/EPE', 4, 'PE'
,5,'PRQA'
, 6, 'MOLD'
, 7, 'PRESS'
, 8,'HAVE SCH'
, 9,'NO SCH'
, 10, 'DELAY'
, 'N/A') AS product_code, 
       DECODE(unpivot_row, 1, OK, 
      2, OK_BL, 3,PTQA_EPE, 4, PE
      ,5,PRQA
      , 6, MOLD
      , 7, PRESS
      , 8,HAVE_SCH
      , 9,NO_SCH
      , 10, DE_LAY
      , 'N/A') AS quantity
FROM   (SELECT MT_MODEL,
  MODEL,
  MT_PART_STATUS,
  ROUND((SUM(TOTAL)/SUM(TOTAL))*100,2) as TOTAL,
  ROUND((SUM(OK)/SUM(TOTAL))*100,2) as OK,
  ROUND((SUM(OK_BL)/SUM(TOTAL))*100,2) as OK_BL,
  ROUND((SUM(PTQA_EPE)/SUM(TOTAL))*100,2) as PTQA_EPE,
  ROUND((SUM(PE)/SUM(TOTAL))*100,2) as PE,
  ROUND((SUM(PRQA)/SUM(TOTAL))*100,2) as PRQA,
  ROUND((SUM(MOLD)/SUM(TOTAL))*100,2) as MOLD,
  ROUND((SUM(PRESS)/SUM(TOTAL))*100,2) as PRESS,
  ROUND((SUM(HAVE_SCH)/SUM(TOTAL))*100,2) as HAVE_SCH,
  ROUND((SUM(NO_SCH)/SUM(TOTAL))*100,2) as NO_SCH,
  ROUND((SUM(DE_LAY)/SUM(TOTAL))*100,2) as DE_LAY
FROM V_MTDB_MT_PART_U_EXTRA WHERE MT_PART_STATUS IS NOT NULL GROUP BY  MT_MODEL,MODEL,
  MT_PART_STATUS ),(SELECT level AS unpivot_row FROM dual CONNECT BY level <= 10);
--------------------------------------------------------
--  DDL for View V_MTDB_PARTLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_MTDB_PARTLIST" ("MT_MODEL", "CTGY_DS", "EST_DS_CTGY", "STATUS", "COLOR", "CATEGORY", "ORDER_BY", "ASSY_PLACE", "MAIN_SUB", "INPUT_PHASE", "LV_INP_DE", "LV_INP_MT", "UNIT_NO", "UNIT_NAME", "PART_NO", "DIM", "PART_NAME", "DWG_NO", "ECN_NO", "ECN_REC_DT", "SEQ_ECN", "ECN_PHASE", "ECN_DETAIL", "PROCESS", "TEXTURE", "MIRROR", "SCREEN", "SPRAY", "CAVITY", "SUP_CODE", "INJ_SUPPLIER", "DIE_SUPPLIER", "DIE_CONTROL", "DIE_JUDGE_RESP", "MOLD_NO", "PART_CM_MO_FM", "COUNTRY", "CONTROL", "MP_DWG_ISU_JP", "SEQ_DWG", "DS_PLAN_DT", "ETM_DS_OK_TM", "ETM_DS_OK_DT", "DS_OK_LEADTIME", "DS_OK_LEADTIME_WKS", "DRW_STATUS", "LEADTIME_WK", "STATUS_DS", "SEQ", "INJ_PLACE", "REC_DT", "REMARK_DS", "ACT_ETD", "ISU_PR_DT", "ISU_PR_DWG", "REMARK", "COMMON_LIST", "COUNT_DS", "COUNT_PART_NO") AS 
  SELECT A.MT_MODEL
,A.CTGY_DS
,A.EST_DS_CTGY
,A.STATUS
,A.COLOR
,A.CATEGORY
,A.ORDER_BY
,A.ASSY_PLACE
,A.MAIN_SUB
,A.INPUT_PHASE
,A.LV_INP_DE
,A.LV_INP_MT
,A.UNIT_NO
,A.UNIT_NAME
,A.PART_NO
,A.DIM
,A.PART_NAME
,A.DWG_NO
,A.ECN_NO
,A.ECN_REC_DT
,A.SEQ_ECN
,A.ECN_PHASE
,A.ECN_DETAIL
,A.PROCESS
,A.TEXTURE
,A.MIRROR
,A.SCREEN
,A.SPRAY
,A.CAVITY
,A.SUP_CODE
,A.INJ_SUPPLIER
,A.DIE_SUPPLIER
,A.DIE_CONTROL
,A.DIE_JUDGE_RESP
,A.MOLD_NO
,A.PART_CM_MO_FM
,A.COUNTRY
,A.CONTROL
,A.MP_DWG_ISU_JP
,A.SEQ_DWG
,A.DS_PLAN_DT
,A.ETM_DS_OK_TM
,TO_DATE(C.DT_WORK,'YYYYMMDD') AS ETM_DS_OK_DT
,A.DS_OK_LEADTIME
,ROUND(A.DS_OK_LEADTIME/7,1) AS DS_OK_LEADTIME_WKS
,A.DRW_STATUS
,D.LEADTIME_WK
,
CASE WHEN A.DS_OK_LEADTIME IS NOT NULL AND D.LEADTIME_WK  IS NOT NULL THEN
CASE A.DRW_STATUS WHEN 'MP1' THEN 
    CASE WHEN ROUND(A.DS_OK_LEADTIME/7,1) <= D.LEADTIME_WK 
      THEN 
      'ON TARGET'
      ELSE
      'OVER TARGET'
      END
  ELSE
  CASE A.DRW_STATUS WHEN 'MP2' THEN 
    CASE WHEN ROUND(A.DS_OK_LEADTIME/7,1) <= D.LEADTIME_WK 
    THEN 
    'ON TARGET'
    ELSE
    'OVER TARGET'
    END
 ELSE 
   CASE A.DRW_STATUS WHEN 'ECN' THEN 
    CASE WHEN ROUND(A.DS_OK_LEADTIME/7,1) <= D.LEADTIME_WK 
    THEN 
    'ON TARGET'
    ELSE
    'OVER TARGET'
    END
    END
    END
END
else
NULL
END
AS STATUS_DS
,A.SEQ
,A.INJ_PLACE
,A.REC_DT
,A.REMARK_DS
,A.ACT_ETD
,A.ISU_PR_DT
,A.ISU_PR_DWG
,A.REMARK
,A.COMMON_LIST
,A.COUNT_DS
,A.COUNT_PART_NO
FROM(
SELECT 
A.MT_MODEL
,A.CTGY_DS
,A.EST_DS_CTGY
,A.STATUS
,A.COLOR
,A.CATEGORY
,A.ORDER_BY
,A.ASSY_PLACE
,A.MAIN_SUB
,A.INPUT_PHASE
,A.LV_INP_DE
,A.LV_INP_MT
,A.UNIT_NO
,A.UNIT_NAME
,A.PART_NO
,A.DIM
,A.PART_NAME
,A.DWG_NO
,A.ECN_NO
,A.ECN_REC_DT
,D.SEQ AS SEQ_ECN
,A.ECN_PHASE
,A.ECN_DETAIL
,A.PROCESS
,A.TEXTURE
,A.MIRROR
,A.SCREEN
,A.SPRAY
,A.CAVITY
,A.SUP_CODE
,A.INJ_SUPPLIER
,A.DIE_SUPPLIER
,A.DIE_CONTROL
,A.DIE_JUDGE_RESP
,A.MOLD_NO
,A.PART_CM_MO_FM
,A.COUNTRY
,A.CONTROL
,A.MP_DWG_ISU_JP
,C.SEQ AS SEQ_DWG
,A.DS_PLAN_DT
,A.WORKING_DAY + B.SEQ AS SEQ
,A.WORKING_DAY
,A.ETM_DS_OK_TM
,CASE WHEN A.ECN_PHASE IS NULL THEN ROUND((A.WORKING_DAY + B.SEQ) - C.SEQ) ELSE  ROUND((A.WORKING_DAY + B.SEQ )- D.SEQ) END AS DS_OK_LEADTIME
,CASE WHEN A.ECN_PHASE IS NULL THEN 'MP1' ELSE  'ECN' END AS DRW_STATUS 
,A.INJ_PLACE
,A.REC_DT
,A.REMARK_DS
,A.ACT_ETD
,A.ISU_PR_DT
,A.ISU_PR_DWG
,A.REMARK
,A.COMMON_LIST
,A.COUNT_DS
,A.COUNT_PART_NO
FROM V_MTDB_ETM_DT A LEFT JOIN
(SELECT * FROM(SELECT DT_WORK, MK_WORK,  DAY, CREATE_DT, CREATE_BY, UPDATE_DT, UPDATE_BY,
case when mk_work ='H' then NULL else sum(value) over (order by DT_WORK) end AS SEQ
FROM T_MTDB_WORKING_DAY_MASTER) where SEQ IS NOT NULL )B ON TO_CHAR(A.DS_PLAN_DT,'YYYYMMDD') = B.DT_WORK
LEFT JOIN (SELECT * FROM(SELECT DT_WORK, MK_WORK,  DAY, CREATE_DT, CREATE_BY, UPDATE_DT, UPDATE_BY,
case when mk_work ='H' then NULL else sum(value) over (order by DT_WORK) end AS SEQ
FROM T_MTDB_WORKING_DAY_MASTER) where SEQ IS NOT NULL )C ON TO_CHAR(A.MP_DWG_ISU_JP,'YYYYMMDD') = C.DT_WORK 
LEFT JOIN 
(SELECT * FROM(SELECT DT_WORK, MK_WORK,  DAY, CREATE_DT, CREATE_BY, UPDATE_DT, UPDATE_BY,
case when mk_work ='H' then NULL else sum(value) over (order by DT_WORK) end AS SEQ
FROM T_MTDB_WORKING_DAY_MASTER) where SEQ IS NOT NULL )D ON TO_CHAR(A.ECN_REC_DT,'YYYYMMDD') = D.DT_WORK
)A 
LEFT JOIN (SELECT DT_WORK, MK_WORK,  DAY, CREATE_DT, CREATE_BY, UPDATE_DT, UPDATE_BY,
case when mk_work ='H' then NULL else sum(value) over (order by DT_WORK) end AS SEQ
FROM T_MTDB_WORKING_DAY_MASTER)C ON A.SEQ = C.SEQ 
LEFT JOIN 
T_MTDB_LEADTIME_DRW_MASTER D ON A.MT_MODEL = D.MT_MODEL AND A.DRW_STATUS = D.TARGET_DS;
--------------------------------------------------------
--  DDL for View V_MTDB_PARTLIST_ALL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_MTDB_PARTLIST_ALL" ("COMMON_LIST", "COUNT_DS", "COUNT_PART_NO", "MODEL_COUNT", "COUNT_ORDER", "MT_MODEL", "CTGY_DS", "EST_DS_CTGY", "STATUS", "COLOR", "CATEGORY", "ORDER_BY", "ASSY_PLACE", "MAIN_SUB", "INPUT_PHASE", "LV_INP_DE", "LV_INP_MT", "UNIT_NO", "UNIT_NAME", "PART_NO", "DIM", "PART_NAME", "DWG_NO", "ECN_NO", "ECN_REC_DT", "SEQ_ECN", "ECN_PHASE", "ECN_DETAIL", "USAGE_TYPE_ALL", "USAGE_TYPE", "PROCESS", "TEXTURE", "MIRROR", "SCREEN", "SPRAY", "CAVITY", "SUP_CODE", "INJ_SUPPLIER", "DIE_SUPPLIER", "DIE_CONTROL", "DIE_JUDGE_RESP", "MOLD_NO", "PART_CM_MO_FM", "COUNTRY", "CONTROL", "MP_DWG_ISU_JP", "SEQ_DWG", "DS_PLAN_DT", "ETM_DS_OK_TM", "ETM_DS_OK_DT", "DS_OK_LEADTIME", "DS_OK_LEADTIME_WKS", "DRW_STATUS", "LEADTIME_WK", "STATUS_DS", "SEQ", "ISU_PR_DT", "ISU_PR_DWG", "DS_FINAL_RESULT", "ETA_TIMES", "INJ_PLACE", "ACTUAL_DWG", "PLAN_TRY_DT", "PLAN_DS_DT", "PLAN_STATUS", "SEQ_TODAY", "SEQ_PTQA_REC", "SEQ_PE", "SEQ_PR", "SEQ_JUD", "PTQA_REC_DT", "PTQA_DAY", "PE_DAY", "PRQA_DAY", "PTQA_CHECK_D", "PTQA_STATUS", "PTQA_REC_DT_DS", "PE_REC_DT_DS", "PE_CHECK_D", "PE_STATUS", "PRQA_REC_DT_DS", "PRQA_CHECK_D", "PRQA_STATUS", "JUD_FN_DT_D", "SCAN_DT_DS", "REMARK_DS", "RESULT_DS_N1", "DWG_NO_DS_N1", "JUD_FN_DT_DS_N1", "SCAN_DATE_DS_N1", "RESULT_DS", "DWG_NO_DS", "JUD_FN_DT_DS", "SCAN_DATE_DS", "DIE_NEED_TRF", "PLAN_ETD", "PLAN_ETA", "ACT_ETD", "ACT_ETA", "TRANSFER_BY", "MODEL", "DATA_PART", "DATA_PART_NPMD", "REMARK", "UPDATE_DT") AS 
  SELECT
COMMON_LIST,
COUNT_DS,
COUNT_PART_NO,
MODEL_COUNT,
COUNT_ORDER,
MT_MODEL,
CTGY_DS,
EST_DS_CTGY,
STATUS,
COLOR,
CATEGORY,
ORDER_BY,
ASSY_PLACE,
MAIN_SUB,
INPUT_PHASE,
LV_INP_DE,
LV_INP_MT,
UNIT_NO,
UNIT_NAME,
PART_NO,
DIM,
PART_NAME,
DWG_NO,
ECN_NO,
TO_CHAR(ECN_REC_DT,'DD-MON-YY') as ECN_REC_DT,
SEQ_ECN,
ECN_PHASE,
ECN_DETAIL,
USAGE_TYPE_ALL,
USAGE_TYPE,
PROCESS,
TEXTURE,
MIRROR,
SCREEN,
SPRAY,
CAVITY,
SUP_CODE,
INJ_SUPPLIER,
DIE_SUPPLIER,
DIE_CONTROL,
DIE_JUDGE_RESP,
MOLD_NO,
PART_CM_MO_FM,
COUNTRY,
CONTROL,
 TO_CHAR(MP_DWG_ISU_JP,'DD-MON-YY') as MP_DWG_ISU_JP,
SEQ_DWG,
TO_CHAR(DS_PLAN_DT,'DD-MON-YY') as DS_PLAN_DT,
ETM_DS_OK_TM,
TO_CHAR(ETM_DS_OK_DT,'DD-MON-YY') as ETM_DS_OK_DT,
DS_OK_LEADTIME,
DS_OK_LEADTIME_WKS,
DRW_STATUS,
LEADTIME_WK,
STATUS_DS,
SEQ,
TO_CHAR(ISU_PR_DT,'DD-MON-YY') as ISU_PR_DT,
ISU_PR_DWG,
DS_FINAL_RESULT,
ETA_TIMES,
INJ_PLACE,
ACTUAL_DWG,
TO_CHAR(PLAN_TRY_DT,'DD-MON-YY') as PLAN_TRY_DT,
TO_CHAR(PLAN_DS_DT ,'DD-MON-YY') as PLAN_DS_DT,
PLAN_STATUS,
SEQ_TODAY,
SEQ_PTQA_REC,
SEQ_PE,
SEQ_PR,
SEQ_JUD,
TO_CHAR(PTQA_REC_DT,'DD-MON-YY') as PTQA_REC_DT,
PTQA_DAY,
PE_DAY,
PRQA_DAY,
PTQA_CHECK_D,
CASE WHEN PTQA_CHECK_D <= PTQA_DAY 
THEN 
'On Sch'
ELSE 
CASE WHEN PTQA_CHECK_D > PTQA_DAY 
THEN
'Delay'
ELSE
null
END
END as PTQA_STATUS,
TO_CHAR(PTQA_REC_DT_DS,'DD-MON-YY') as PTQA_REC_DT_DS,
 TO_CHAR(PE_REC_DATE_DS,'DD-MON-YY') as PE_REC_DT_DS,
PE_CHECK_D,
CASE WHEN PE_CHECK_D <= PE_DAY 
THEN 
'On Sch'
ELSE 
CASE WHEN PE_CHECK_D > PE_DAY 
THEN
'Delay'
ELSE
null
END
END as PE_STATUS,
TO_CHAR(REC_DT,'DD-MON-YY') as PRQA_REC_DT_DS,
PRQA_CHECK_D,
CASE WHEN PRQA_CHECK_D <= PRQA_DAY 
THEN 
'On Sch'
ELSE 
CASE WHEN PRQA_CHECK_D > PRQA_DAY 
THEN
'Delay'
ELSE
null
END
END as PRQA_STATUS,
TO_CHAR(JUD_FN_DT_D,'DD-MON-YY') as JUD_FN_DT_D,
TO_CHAR(SCAN_DT_DS,'DD-MON-YY') as SCAN_DT_DS,
REMARK_DS,
RESULT_DS_N1,
DWG_NO_DS_N1,
TO_CHAR(JUD_FN_DT_DS_N1,'DD-MON-YY') as JUD_FN_DT_DS_N1,
TO_CHAR(SCAN_DATE_DS_N1,'DD-MON-YY') as SCAN_DATE_DS_N1,
RESULT_DS,
DWG_NO_DS,
TO_CHAR(JUD_FN_DT_DS,'DD-MON-YY') as JUD_FN_DT_DS,
TO_CHAR(SCAN_DATE_DS,'DD-MON-YY') as SCAN_DATE_DS,
DIE_NEED_TRANSFER as DIE_NEED_TRF,
TO_CHAR(PLAN_ETD,'DD-MON-YY') as PLAN_ETD,
TO_CHAR(PLAN_ETA,'DD-MON-YY') as PLAN_ETA,
TO_CHAR(ACT_ETD,'DD-MON-YY') as ACT_ETD,
TO_CHAR(ACT_ETA,'DD-MON-YY') as ACT_ETA,
TRANSFER_BY,
MODEL,
DATA_PART,
DATA_PART_NPMD,
REMARK,
UPDATE_DT
FROM
(SELECT 
  N.MODEL_COUNT,
  M.COUNT_ORDER,
  A.COMMON_LIST,
  A.COUNT_DS,
  A.COUNT_PART_NO,
  A.MT_MODEL,
  A.CTGY_DS,
  A.EST_DS_CTGY,
  A.STATUS,
  A.COLOR,
  A.CATEGORY,
  A.ORDER_BY,
  A.ASSY_PLACE,
  A.MAIN_SUB,
  A.INPUT_PHASE,
  A.LV_INP_DE,
  A.LV_INP_MT,
  A.UNIT_NO,
  A.UNIT_NAME,
  A.PART_NO,
  A.DIM,
  A.PART_NAME,
  A.DWG_NO,
  A.ECN_NO,
  A.ECN_REC_DT,
  A.SEQ_ECN,
  A.ECN_PHASE,
  A.ECN_DETAIL,
  K.USAGE_TYPE,
  L.USAGE_TYPE_ALL,
  A.PROCESS,
  A.TEXTURE,
  A.MIRROR,
  A.SCREEN,
  A.SPRAY,
  A.CAVITY,
  A.SUP_CODE,
  A.INJ_SUPPLIER,
  A.DIE_SUPPLIER,
  A.DIE_CONTROL,
  A.DIE_JUDGE_RESP,
  A.MOLD_NO,
  A.PART_CM_MO_FM,
  A.COUNTRY,
  A.CONTROL,
  A.MP_DWG_ISU_JP,
  A.SEQ_DWG,
  A.DS_PLAN_DT,
  A.ETM_DS_OK_TM,
  A.ETM_DS_OK_DT,
  A.DS_OK_LEADTIME,
  A.DS_OK_LEADTIME_WKS,
  A.DRW_STATUS,
  A.LEADTIME_WK,
  A.STATUS_DS,
  A.SEQ,
  A.ISU_PR_DT,
  A.ISU_PR_DWG,
  B.DS_FINAL_RESULT,
  B.ETA_TIMES,
  A.INJ_PLACE,
  B.ACTUAL_DWG,
  B.PLAN_TRY_DT,
  B.PLAN_DS_DT,
  B.UPDATE_DT,
  CASE WHEN B.PLAN_DS_DT >= B.UPDATE_DT AND B.PTQA_REC_DT IS NULL 
  THEN 'On Sch' 
  ELSE 
    CASE WHEN B.PLAN_DS_DT < B.UPDATE_DT AND B.PTQA_REC_DT IS NULL 
    THEN 'Delay' 
    ELSE
     CASE WHEN B.PLAN_DS_DT IS NULL AND B.PTQA_REC_DT IS NULL 
     THEN 'No Sch' 
     ELSE
     CASE WHEN  B.PTQA_REC_DT IS NOT NULL 
     THEN NULL 
     END
    END
  END
  
  END as PLAN_STATUS,
  C.SEQ AS SEQ_TODAY,
  D.SEQ AS SEQ_PTQA_REC,
  E.SEQ AS SEQ_PE,
  F.SEQ AS SEQ_PR,
  G.SEQ AS SEQ_JUD,
  B.PTQA_REC_DT,
  H.CHECK_DAY as PTQA_DAY,
  I.CHECK_DAY as PE_DAY,
  J.CHECK_DAY as PRQA_DAY,
  CASE WHEN B.PE_REC_DATE_DS IS NULL THEN 
  C.SEQ - D.SEQ 
  ELSE 
  E.SEQ - D.SEQ
  END as PTQA_CHECK_D,
  B.PTQA_REC_DT_DS,
  B.PE_REC_DATE_DS,
   CASE WHEN A.REC_DT IS NULL AND B.JUD_FN_DT_D IS NULL THEN C.SEQ - E.SEQ 
  ELSE 
  CASE WHEN A.REC_DT IS NULL AND B.JUD_FN_DT_D IS NOT NULL THEN G.SEQ - E.SEQ 
  ELSE
  CASE WHEN A.REC_DT IS NOT NULL AND B.PE_REC_DATE_DS IS NOT NULL THEN F.SEQ - E.SEQ 
  ELSE
  CASE WHEN A.REC_DT IS NOT NULL AND B.JUD_FN_DT_D IS NOT NULL THEN E.SEQ - D.SEQ 
  
  END
  END
  END
  END as PE_CHECK_D,
  A.REC_DT,
   CASE WHEN B.JUD_FN_DT_D IS NULL THEN C.SEQ - F.SEQ 
  ELSE 
  G.SEQ - F.SEQ
  END as PRQA_CHECK_D ,
  B.JUD_FN_DT_D,
  B.SCAN_DT_DS,
  A.REMARK_DS,
  B.RESULT_DS_N1,
  B.DWG_NO_DS_N1,
  B.JUD_FN_DT_DS_N1,
  B.SCAN_DATE_DS_N1,
  B.RESULT_DS,
  B.DWG_NO_DS,
  B.JUD_FN_DT_DS,
  B.SCAN_DATE_DS,
  B.DIE_NEED_TRANSFER,
  B.PLAN_ETD,
  B.PLAN_ETA,
  A.ACT_ETD,
  B.ACT_ETA,
  B.TRANSFER_BY,
  A.MODEL,
  A.DATA_PART,
  A.DATA_PART_NPMD,
  A.REMARK
FROM V_MTDB_DATA_PARTLIST A LEFT JOIN T_MTDB_CTRLDIE_TRANSFER2 B
ON A.MT_MODEL = B.MT_MODEL AND A.PART_NO = B.PART_NO AND A.MOLD_NO = B.MOLD_NO
LEFT JOIN (SELECT * FROM(SELECT DT_WORK, MK_WORK,  DAY, CREATE_DT, CREATE_BY, UPDATE_DT, UPDATE_BY,
case when mk_work ='H' then NULL else sum(value) over (order by DT_WORK) end AS SEQ
FROM T_MTDB_WORKING_DAY_MASTER) where SEQ IS NOT NULL )C ON TO_CHAR(SYSDATE,'YYYYMMDD') = C.DT_WORK
LEFT JOIN (SELECT * FROM(SELECT DT_WORK, MK_WORK,  DAY, CREATE_DT, CREATE_BY, UPDATE_DT, UPDATE_BY,
case when mk_work ='H' then NULL else sum(value) over (order by DT_WORK) end AS SEQ
FROM T_MTDB_WORKING_DAY_MASTER) where SEQ IS NOT NULL )D ON TO_CHAR(B.PTQA_REC_DT,'YYYYMMDD') = D.DT_WORK
LEFT JOIN (SELECT * FROM(SELECT DT_WORK, MK_WORK,  DAY, CREATE_DT, CREATE_BY, UPDATE_DT, UPDATE_BY,
case when mk_work ='H' then NULL else sum(value) over (order by DT_WORK) end AS SEQ
FROM T_MTDB_WORKING_DAY_MASTER) where SEQ IS NOT NULL )E ON TO_CHAR(B.PE_REC_DATE_DS,'YYYYMMDD') = E.DT_WORK
LEFT JOIN (SELECT * FROM(SELECT DT_WORK, MK_WORK,  DAY, CREATE_DT, CREATE_BY, UPDATE_DT, UPDATE_BY,
case when mk_work ='H' then NULL else sum(value) over (order by DT_WORK) end AS SEQ
FROM T_MTDB_WORKING_DAY_MASTER) where SEQ IS NOT NULL )F ON TO_CHAR(A.REC_DT,'YYYYMMDD') = F.DT_WORK
LEFT JOIN (SELECT * FROM(SELECT DT_WORK, MK_WORK,  DAY, CREATE_DT, CREATE_BY, UPDATE_DT, UPDATE_BY,
case when mk_work ='H' then NULL else sum(value) over (order by DT_WORK) end AS SEQ
FROM T_MTDB_WORKING_DAY_MASTER) where SEQ IS NOT NULL )G ON TO_CHAR(B.JUD_FN_DT_D,'YYYYMMDD') = G.DT_WORK
LEFT JOIN(SELECT 
  DEPT,
  CHECK_DAY
FROM T_MTDB_DS_JUDGE_LT_MASTER WHERE DEPT = 'PTQA')H ON A.MT_MODEL = A.MT_MODEL
LEFT JOIN(SELECT 
  DEPT,
  CHECK_DAY
FROM T_MTDB_DS_JUDGE_LT_MASTER WHERE DEPT = 'PE')I ON A.MT_MODEL = A.MT_MODEL
LEFT JOIN(SELECT
  DEPT,
  CHECK_DAY
FROM T_MTDB_DS_JUDGE_LT_MASTER WHERE DEPT = 'PRQA')J ON A.MT_MODEL = A.MT_MODEL
LEFT JOIN (SELECT  MT_MODEL,PART_NO, DIM,SUP_CD,
     LISTAGG(case WHEN USAGE_TYPE is null then '' ELSE USAGE_TYPE end||','|| case WHEN USAGE is null then '' ELSE USAGE end,'|') WITHIN GROUP (
    ORDER BY PART_NO ASC) AS USAGE_TYPE
    FROM T_MTDB_MASTER_USAGE GROUP BY  MT_MODEL,PART_NO, DIM,SUP_CD ORDER BY PART_NO)K 
    ON A.MT_MODEL = K.MT_MODEL AND A.PART_NO = K.PART_NO AND A.DIM = K.DIM AND A.SUP_CODE = K.SUP_CD
  LEFT JOIN (SELECT MT_MODEL,LISTAGG(USAGE_TYPE,',' ) WITHIN GROUP (
    ORDER BY MT_MODEL ASC) AS USAGE_TYPE_ALL FROM
    (SELECT  MT_MODEL,USAGE_TYPE FROM T_MTDB_MASTER_USAGE GROUP BY  MT_MODEL,USAGE_TYPE) GROUP BY MT_MODEL)L 
    ON A.MT_MODEL = L.MT_MODEL
        LEFT JOIN (SELECT A.MT_MODEL,
A.PART_NO,
A.COUNT_ORDER,
A.DIM,
A.DWG_NO
 FROM
(SELECT A.MT_MODEL,
A.PART_NO,
 LISTAGG(case WHEN A.MODEL is null then '' ELSE A.MODEL end||','|| case WHEN A.COUNT_PART is null then 0 ELSE A.COUNT_PART end,'|') WITHIN GROUP (
    ORDER BY A.MODEL  ASC) AS COUNT_ORDER,
A.DIM,
A.DWG_NO
 FROM(
SELECT MT_MODEL,PART_NO,MODEL, COUNT(PART_NO)as COUNT_PART,DIM,DWG_NO
FROM V_MTDB_MT_PART_GROUP GROUP BY MT_MODEL,PART_NO,MODEL,DIM,DWG_NO ORDER BY PART_NO)A 
GROUP BY A.MT_MODEL,
A.PART_NO,
A.DIM,
A.DWG_NO)A) M 
ON A.MT_MODEL = M.MT_MODEL AND( A.PART_NO = M.PART_NO OR A.ORDER_BY = M.PART_NO) AND A.DIM = M.DIM AND A.DWG_NO = M.DWG_NO
LEFT JOIN (SELECT 
  MT_MODEL,
   LISTAGG(case WHEN MODEL is null then '' ELSE  MODEL end,',') WITHIN GROUP (
    ORDER BY MODEL ASC) AS MODEL_COUNT
FROM T_MTDB_MASTER_SERIES GROUP BY MT_MODEL)N ON A.MT_MODEL = N.MT_MODEL
GROUP BY A.MT_MODEL,
A.CTGY_DS,
A.COMMON_LIST,
A.COUNT_DS,
A.COUNT_PART_NO,
A.EST_DS_CTGY,
A.STATUS,
A.COLOR,
A.CATEGORY,
A.ORDER_BY,
A.ASSY_PLACE,
A.MAIN_SUB,
A.INPUT_PHASE,
A.LV_INP_DE,
A.LV_INP_MT,
A.UNIT_NO,
A.UNIT_NAME,
A.PART_NO,
A.DIM,
A.PART_NAME,
A.DWG_NO,
A.ECN_NO,
A.ECN_REC_DT,
A.SEQ_ECN,
A.ECN_PHASE,
A.ECN_DETAIL,
A.PROCESS,
A.TEXTURE,
A.MIRROR,
A.SCREEN,
A.SPRAY,
A.CAVITY,
A.SUP_CODE,
A.INJ_SUPPLIER,
A.DIE_SUPPLIER,
A.DIE_CONTROL,
A.DIE_JUDGE_RESP,
A.MOLD_NO,
A.PART_CM_MO_FM,
A.COUNTRY,
A.CONTROL,
A.MP_DWG_ISU_JP,
A.SEQ_DWG,
A.DS_PLAN_DT,
A.ETM_DS_OK_TM,
A.ETM_DS_OK_DT,
A.DS_OK_LEADTIME,
A.DS_OK_LEADTIME_WKS,
A.DRW_STATUS,
A.LEADTIME_WK,
A.STATUS_DS,
A.SEQ,
A.INJ_PLACE,
A.REC_DT,
A.REMARK_DS,
A.ACT_ETD,
A.ISU_PR_DT,
A.ISU_PR_DWG,
A.REMARK,
 B.DS_FINAL_RESULT,
  B.ETA_TIMES,
  B.ACTUAL_DWG,
  B.PLAN_TRY_DT,
  B.PLAN_DS_DT,
  B.PTQA_REC_DT,
  B.PTQA_REC_DT_DS,
  B.PE_REC_DATE_DS,
  B.JUD_FN_DT_D,
  B.SCAN_DT_DS,
  B.RESULT_DS_N1,
  B.DWG_NO_DS_N1,
  B.JUD_FN_DT_DS_N1,
  B.SCAN_DATE_DS_N1,
  B.RESULT_DS,
  B.DWG_NO_DS,
  B.JUD_FN_DT_DS,
  B.SCAN_DATE_DS,
  B.DIE_NEED_TRANSFER,
  B.PLAN_ETD,
  B.PLAN_ETA,
  B.ACT_ETA,
  B.TRANSFER_BY,
  A.DATA_PART,
  A.DATA_PART_NPMD,
  B.UPDATE_DT,
  C.SEQ,
  D.SEQ,
  E.SEQ,
  F.SEQ,
  G.SEQ,
  H.CHECK_DAY,
  I.CHECK_DAY,
   A.MODEL,
   K.USAGE_TYPE,
   L.USAGE_TYPE_ALL,
    N.MODEL_COUNT,
  M.COUNT_ORDER,
  J.CHECK_DAY
  ORDER BY A.PART_NO );
--------------------------------------------------------
--  DDL for View V_POC_WEEK_BUNDLE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_POC_WEEK_BUNDLE" ("NO_PARTS", "NO_ADJ_DIM", "NO_ARRANGE", "QT_SNP", "QT_DELV_LOT", "PD_DELV_DIRCT", "PD_FIX_PERIOD_REQUI", "PD_PO_ISSUE", "PD_PRDC_GUART", "PD_MTRL_GUART", "PD_PRDC_INFO", "PD_DELV_QTY_ROUND", "CD_LEAV_PORT_DEF", "CF_TRANSP_METH_DEF", "WEEK_BUNDLE") AS 
  SELECT t1.NO_PARTS , t1.NO_ADJ_DIM , t1.NO_ARRANGE , t1.QT_SNP, t1.QT_DELV_LOT,	t1.PD_DELV_DIRCT,
     t1.PD_FIX_PERIOD_REQUI	, t1.PD_PO_ISSUE	, t1.PD_PRDC_GUART,	 t1.PD_MTRL_GUART,	 t1.PD_PRDC_INFO,
     t1.PD_DELV_QTY_ROUND	, t1.CD_LEAV_PORT_DEF	, t1.CF_TRANSP_METH_DEF ,t2.day as WEEK_BUNDLE
 FROM J002_PARTS_ORDER_CONDITION@FROM_EUC_NPIS t1  left outer join v_wk t2
 on t1.NO_PARTS = t2.no_parts
 and t1.NO_ADJ_DIM = t2.no_adj_dim;
--------------------------------------------------------
--  DDL for View V_PRD_PLAN_A3_MODEL_MS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_PRD_PLAN_A3_MODEL_MS" ("FACTORY_CD", "MODEL_SEQ", "MODEL", "MODEL_ALL", "LINE_CD", "CELL_NAME") AS 
  SELECT M1.FACTORY_CD,M1.MODEL_SEQ,MIN(M1.MODEL)as MODEL,M1.MODEL_ALL,A1.LINE_CD,A1.CELL_NAME FROM T_PRD_PLAN_A3_MODEL_MS@FROM_EUC_NPIS M1 
LEFT JOIN T_PRD_PLAN_A3_ASSY_PLAN@FROM_EUC_NPIS A1
ON M1.FACTORY_CD = A1.FACTORY_CD
AND M1.MODEL_SEQ = A1.MODEL_SEQ
where PLAN_DATE BETWEEN to_char(sysdate,'YYYYMMDD') and  to_char(sysdate+1,'YYYYMMDD')
GROUP by M1.FACTORY_CD,M1.MODEL_SEQ,M1.MODEL_ALL,A1.LINE_CD,A1.CELL_NAME ORDER BY MODEL;
--------------------------------------------------------
--  DDL for View V_PRD_PROGRESSIVE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_PRD_PROGRESSIVE" ("MODEL", "PLAN_DATE", "CELL_NAME", "MODEL_SEQ", "LINE_CD", "SHIFT", "PLAN_Q", "Q1", "Q2", "Q3", "Q4", "Q5", "CYCLE_TIME", "DAYNIGHT", "WORKSHIFT_CD_DAY", "OVERTIME_CD_DAY", "WORKSHIFT_CD_NIGHT", "OVERTIME_CD_NIGHT") AS 
  SELECT A.model,A.PLAN_DATE,A.CELL_NAME, A.model_seq ,A.line_cd, A.shift , A.PLAN_Q,
round(M.Q1*(A.PLAN_Q/480))as Q1,round(M.Q2*(A.PLAN_Q/480))as Q2, round(M.Q3*(A.PLAN_Q/480))as Q3,round(M.Q4*(A.PLAN_Q/480))as Q4,
case A.shift WHEN 'D' THEN CASE WHEN A.OVERTIME_CD_DAY is not null THEN round(M.Q5*(A.PLAN_Q/480))end 
ELSE CASE WHEN A.OVERTIME_CD_NIGHT is not null THEN round(M.Q5*(A.PLAN_Q/480))end END as  Q5 ,A.CYCLE_TIME, 
A.DAYNIGHT,A.WORKSHIFT_CD_DAY,
A.OVERTIME_CD_DAY,A.WORKSHIFT_CD_NIGHT,A.OVERTIME_CD_NIGHT FROM
(SELECT c.model,c.PLAN_DATE,c.CELL_NAME, c.model_seq ,c.line_cd, c.shift , c.PLAN_Q,D.DAYNIGHT,d.WORKSHIFT_CD_DAY,
d.OVERTIME_CD_DAY,
d.WORKSHIFT_CD_NIGHT,
d.OVERTIME_CD_NIGHT,D.CYCLE_TIME FROM
(SELECT B.model,B.CELL_NAME,a.PLAN_DATE, A.model_seq ,a.line_cd, A.shift , A.PLAN_Q FROM
(SELECT  model_seq,shift,line_cd,PLAN_DATE, SUM(plan_qty) AS PLAN_Q FROM T_SLANE_PRODUCTION_PLAN  
WHERE FACTORY_CD = FACTORY_CD AND MODEL_SEQ = MODEL_SEQ
and plan_date = plan_date
AND SHIFT = SHIFT 
group by model_seq,shift,line_cd,PLAN_DATE) A left JOIN V_PRD_PLAN_A3_MODEL_MS B ON A.model_seq = B.model_seq and a.line_cd = B.LINE_CD
GROUP BY b.model, A.model_seq , A.shift,a.line_cd , A.PLAN_Q,B.CELL_NAME,a.PLAN_DATE ) C 
left join(SELECT a.PLAN_DATE,
b.MODEL_SEQ,
b.MODEL,
a.LINE_CD,
a.SHIFT,
a.WORKSHIFT_CD_DAY||a.WORKSHIFT_CD_NIGHT as DAYNIGHT,
a.WORKSHIFT_CD_DAY,
a.OVERTIME_CD_DAY,
a.WORKSHIFT_CD_NIGHT,
a.OVERTIME_CD_NIGHT,
a.CYCLE_TIME FROM V_PRD_PLAN_A3_MODEL_MS b LEFT join( SELECT PLAN_DATE,SUBSTR(LINE_CD,1,2)as LINE_CD,SHIFT,
WORKSHIFT_CD_DAY||WORKSHIFT_CD_NIGHT as DAYNIGHT,WORKSHIFT_CD_DAY,
OVERTIME_CD_DAY,WORKSHIFT_CD_NIGHT,OVERTIME_CD_NIGHT ,CYCLE_TIME
FROM t_prd_plan_a3_workshift_n_cap@from_euctest_chtinq) a 
on a.LINE_CD = b.LINE_CD) D on c.PLAN_DATE = d.PLAN_DATE and c.model_seq = d.model_seq 
and c.line_cd = d.line_cd and c.shift = d.shift) A LEFT JOIN (select 
WORKSHIFT_CD,
SHIFT ,
(to_date(work1_end,'HH24:MI')-to_date(work1_begin,'HH24:MI'))*24*60 as Q1,case SHIFT when 'N' THEN 
(TO_DATE(TO_CHAR(SYSDATE+1,'YYYYMMDD')||WORK2_END,'YYYYMMDDHH24:MI')-TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')||WORK2_BEGIN,'YYYYMMDDHH24:MI'))*24 * 60 
else (to_date(work2_end,'HH24:MI')-to_date(work2_begin,'HH24:MI'))*24 *60 end as Q2,
(to_date(work3_end,'HH24:MI')-to_date(work3_begin,'HH24:MI'))*24*60 as Q3,
(to_date(work4_end,'HH24:MI')-to_date(work4_begin,'HH24:MI'))*24*60 as Q4,
120 as Q5
from t_prd_plan_a3_workshift_cd@from_euctest_chtinq) M on A.DAYNIGHT = M.WORKSHIFT_CD AND A.SHIFT = M.SHIFT;
--------------------------------------------------------
--  DDL for View V_SAFETY
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SAFETY" ("NO_PARTS", "NO_ADJ_DIM", "CD_USE_BLOCK", "DT_NECESS_EXPEC", "QT_SAFETY", "CF_EXT_DEM") AS 
  SELECT NO_PARTS,
NO_ADJ_DIM,
CD_USE_BLOCK,
DT_NECESS_EXPEC,
SUM(QT_NECESS_EXPEC) as QT_SAFETY,
CF_EXT_DEM FROM 
B302_DEMAND_FOR_PRODUCTION@FROM_EUC_NPIS
WHERE NO_ADJ_DIM <> '   ' 
AND CF_EXT_DEM = 'Z'  
Group By NO_PARTS,
NO_ADJ_DIM,
CD_USE_BLOCK,
DT_NECESS_EXPEC,
CF_SUPPLY,
CF_IO_UPPER,
CF_EXT_DEM 
ORDER BY NO_PARTS ASC ,
CD_USE_BLOCK ASC ,
DT_NECESS_EXPEC ASC;
--------------------------------------------------------
--  DDL for View V_SLANE_CHART_HANDLING
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_CHART_HANDLING" ("MODEL", "PLAN_DATE", "LINE_CD", "SHIFT", "DAISHA_TYPE", "DAISHA_GROUP", "ROUND", "DIFF_LINE", "DIFF_CHART", "DIFF_RE", "DIFF_CHART_END", "CYCLE_TIME", "DIFF", "PLAN_TIME", "SEQ", "TYPE_DAISHA") AS 
  SELECT  A.MODEL,A.PLAN_DATE,A.LINE_CD,A.SHIFT,A.DAISHA_TYPE,A.DAISHA_GROUP,A.ROUND,
((NVL(A.CYCLE_TIME - A.DIFF,'0')/A.CYCLE_TIME)*100) AS DIFF_LINE,
case  when ((NVL(A.CYCLE_TIME - A.DIFF,'0')/A.CYCLE_TIME)*100) > 100
then 100 else ((NVL(A.CYCLE_TIME - A.DIFF,'0')/A.CYCLE_TIME)*100) 
end as DIFF_CHART,case when 100-((NVL(A.CYCLE_TIME - A.DIFF,'0')/A.CYCLE_TIME)*100) < 0 
then 0 else case when 100-((NVL(A.CYCLE_TIME - A.DIFF,'0')/A.CYCLE_TIME)*100) > 100 
then 100 else 100-((NVL(A.CYCLE_TIME - A.DIFF,'0')/A.CYCLE_TIME)*100) end 
end 
as DIFF_RE,case when ((NVL(A.CYCLE_TIME - A.DIFF,'0')/A.CYCLE_TIME)*100)-100 < 0 
then 0 else ((NVL(A.CYCLE_TIME - A.DIFF,'0')/A.CYCLE_TIME)*100)-100 
end as DIFF_CHART_END,A.CYCLE_TIME,NVL(A.DIFF,'0') as DIFF,A.PLAN_OUT_SLANE_TM as PLAN_TIME,A.SEQ,A.TYPE_DAISHA 
FROM V_SLANE_CHART_HANDLING_NEW A;
--------------------------------------------------------
--  DDL for View V_SLANE_CHART_HANDLING_NEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_CHART_HANDLING_NEW" ("FACTORY_CD", "MODEL", "PLAN_DATE", "SHIFT", "LINE_CD", "CELL_NAME", "DAISHA_TYPE", "DAISHA_GROUP", "CYCLE_TIME", "TYPE_DAISHA", "START_DIFF", "DIFF", "DIFF_CHART", "SEQ", "ROUND", "LOCATION", "BLANE_SIGNAL_DT", "BLANE_SIGNAL_TM", "PLAN_OUT_SLANE_DT", "PLAN_OUT_SLANE_TM", "ACT_OUT_SLANE_DT", "ACT_OUT_SLANE_TM") AS 
  SELECT A.FACTORY_CD,
  A.MODEL,
  A.PLAN_DATE,
  A.SHIFT,
  A.LINE_CD,
  A.CELL_NAME,
  A.DAISHA_TYPE,
  A.DAISHA_GROUP,
  B.CYCLE_TIME,
  B.TYPE as TYPE_DAISHA,
CASE WHEN A.ACT_OUT_SLANE_TM <> 'xx:xx:xx' THEN  ROUND((TO_DATE(TO_CHAR(TO_DATE(A.ACT_OUT_SLANE_DT,'YYYYMMDD'),'DD-MM-YY')||A.ACT_OUT_SLANE_TM,'DD-MM-YYHH24:MI:SS')- TO_DATE(TO_CHAR(TO_DATE(A.BLANE_SIGNAL_DT,'YYYYMMDD'),'DD-MM-YY')||A.BLANE_SIGNAL_TM,'DD-MM-YYHH24:MI:SS'))*24*60)
ELSE 0 END as START_DIFF,

CASE WHEN A.ACT_OUT_SLANE_TM <> 'xx:xx:xx' THEN  ROUND((TO_DATE(TO_CHAR(TO_DATE(A.PLAN_OUT_SLANE_DT,'YYYYMMDD'),'DD-MM-YY')||A.PLAN_OUT_SLANE_TM,'DD-MM-YYHH24:MI:SS')- TO_DATE(TO_CHAR(TO_DATE(A.ACT_OUT_SLANE_DT,'YYYYMMDD'),'DD-MM-YY')||A.ACT_OUT_SLANE_TM,'DD-MM-YYHH24:MI:SS'))*24*60) 
ELSE 0 END as DIFF,
CASE WHEN A.ACT_OUT_SLANE_TM <> 'xx:xx:xx' THEN
B.CYCLE_TIME-NVL(ROUND((TO_DATE(TO_CHAR(TO_DATE(A.PLAN_OUT_SLANE_DT,'YYYYMMDD'),'DD-MM-YY')||A.PLAN_OUT_SLANE_TM,'DD-MM-YYHH24:MI:SS')- TO_DATE(TO_CHAR(TO_DATE(A.ACT_OUT_SLANE_DT,'YYYYMMDD'),'DD-MM-YY')||A.ACT_OUT_SLANE_TM,'DD-MM-YYHH24:MI:SS'))*24*60),'0')
ELSE 0 END as DIFF_CHART,
  A.SEQ,
  A.ROUND,
  A.LOCATION,
  A.BLANE_SIGNAL_DT,
  A.BLANE_SIGNAL_TM,
  A.PLAN_OUT_SLANE_DT,
  A.PLAN_OUT_SLANE_TM,
  A.ACT_OUT_SLANE_DT,
  A.ACT_OUT_SLANE_TM
  FROM T_SLANE_DAISHA_PROGRESSIVE 
  A LEFT JOIN T_SLANE_DELIVERY_CYCLE_MASTER B ON A.MODEL= B.MODEL 
   WHERE  A.BLANE_SIGNAL_TM IS NOT NULL  AND   A.ACT_OUT_SLANE_TM IS NOT NULL AND B.ZONE = 'S';
--------------------------------------------------------
--  DDL for View V_SLANE_CHART_PICKING
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_CHART_PICKING" ("FACTORY_CD", "MODEL", "PLAN_DATE", "SHIFT", "LINE_CD", "CELL_NAME", "DAISHA_TYPE", "DAISHA_GROUP", "CYCLE_TIME", "TYPE_DAISHA", "START_DIFF", "DIFF", "DIFF_CHART", "SEQ", "ROUND", "LOCATION", "PLAN_PICK_DT", "PLAN_PICK_TM", "ACT_PICK_DT", "ACT_PICK_TM", "SLANE_IN_DT", "SLANE_IN_TM", "ORDER_NO") AS 
  SELECT A.FACTORY_CD,
  A.MODEL,
  A.PLAN_DATE,
  A.SHIFT,
  A.LINE_CD,
  A.CELL_NAME,
  A.DAISHA_TYPE,
  A.DAISHA_GROUP,
  B.CYCLE_TIME,
  B.TYPE as TYPE_DAISHA,
   --NVL(ROUND((TO_DATE(TO_CHAR(TO_DATE(A.SLANE_IN_TM,'HH24:MI:SS'),
--'HH24:MI'),'HH24:MI')-TO_DATE(TO_CHAR(TO_DATE(A.ACT_PICK_TM,'HH24:MI:SS'),'HH24:MI'),'HH24:MI'))*24*60),'0') as START_DIFF,
 ROUND((TO_DATE(TO_CHAR(TO_DATE(A.SLANE_IN_DT,'YYYYMMDD'),'DD-MM-YY')||A.SLANE_IN_TM,'DD-MM-YYHH24:MI:SS')- TO_DATE(TO_CHAR(TO_DATE(A.ACT_PICK_DT,'YYYYMMDD'),'DD-MM-YY')||A.ACT_PICK_TM,'DD-MM-YYHH24:MI:SS'))*24*60)
 as START_DIFF,
ROUND((TO_DATE(TO_CHAR(TO_DATE(A.ACT_PICK_DT,'YYYYMMDD'),'DD-MM-YY')||A.ACT_PICK_TM,'DD-MM-YYHH24:MI:SS')- TO_DATE(TO_CHAR(TO_DATE(A.SLANE_IN_DT,'YYYYMMDD'),'DD-MM-YY')||A.SLANE_IN_TM,'DD-MM-YYHH24:MI:SS'))*24*60) as DIFF,
--ROUND((TO_DATE(TO_CHAR(TO_DATE(A.SLANE_IN_DT,'YYYYMMDD'),'DD-MM-YY')||A.SLANE_IN_TM,'DD-MM-YYHH24:MI:SS')- TO_DATE(TO_CHAR(TO_DATE(A.ACT_PICK_DT,'YYYYMMDD'),'DD-MM-YY')||A.ACT_PICK_TM,'DD-MM-YYHH24:MI:SS'))*24*60)
 --as DIFF,
B.CYCLE_TIME-NVL(ROUND((TO_DATE(TO_CHAR(TO_DATE(A.ACT_PICK_DT,'YYYYMMDD'),'DD-MM-YY')||A.ACT_PICK_TM,'DD-MM-YYHH24:MI:SS')- TO_DATE(TO_CHAR(TO_DATE(A.SLANE_IN_DT,'YYYYMMDD'),'DD-MM-YY')||A.SLANE_IN_TM,'DD-MM-YYHH24:MI:SS'))*24*60),'0') as DIFF_CHART,
  A.SEQ,
  A.ROUND,
  A.LOCATION,
  A.PLAN_PICK_DT,
  A.PLAN_PICK_TM,
  A.ACT_PICK_DT,
  A.ACT_PICK_TM,
  A.SLANE_IN_DT,
  A.SLANE_IN_TM,
  A.ORDER_NO
  FROM T_SLANE_DAISHA_PROGRESSIVE 
  A LEFT JOIN T_SLANE_DELIVERY_CYCLE_MASTER B ON A.MODEL= B.MODEL 
   WHERE  A.ACT_PICK_TM IS NOT NULL AND  A.SLANE_IN_TM IS NOT NULL AND B.ZONE = 'P';
--------------------------------------------------------
--  DDL for View V_SLANE_DAISHA_PROGRESSIVE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_DAISHA_PROGRESSIVE" ("MODEL", "PLAN_DATE", "LINE_CD", "CELL_NAME", "DAISHA_TYPE", "DAISHA_GROUP", "TOTAL_EMPTY", "ACT_PICK", "PLAN_PICK", "S_ROUND", "PLAN_OUT", "PLANOUT_TM", "PLAN_ACT_OUT_TM", "ACT_SLANE", "ACT_OUT_SLANE_TM", "BLANE_ROUND", "ASSY", "LOCATION", "BLANE_IN_TM", "ACT_OUT_TM", "PLAN_PICK_TM", "SEQ", "ROUND", "MIN", "MAX") AS 
  SELECT k.model,
    k.PLAN_DATE,
    k.line_cd,
    k.cell_name,
    --x.cell_name,
    k.DAISHA_TYPE,
    k.DAISHA_GROUP ,
    e.total_empty,
    D.ACT_PICK,
    c.PLAN_PICK,
    A.S_ROUND,
    f.PLAN_OUT,
    f.PLANOUT_TM,
    m.PLAN_ACT_OUT_TM,
    p.ACT_SLANE,
    p.ACT_OUT_SLANE_TM,
    i.BLANE_ROUND,
    t.ASSY,
    i.location,
    i.BLANE_IN_TM,
    i.ACT_OUT_SLANE_TM as ACT_OUT_TM,
    d.PLAN_PICK_TM,
    N.SEQ,
    N.ROUND,
    N.MIN,
    N.MAX
  FROM
    (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP
    FROM t_slane_daisha_progressive
    WHERE model  = model
    AND location = location
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) K
  LEFT JOIN
    (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP,
      LISTAGG(ROUND
      ||COLOR, ',') WITHIN GROUP (
    ORDER BY seq DESC) AS S_ROUND
    FROM t_slane_daisha_progressive
    WHERE model  = model
    AND location = 'S-LANE'
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) A
  ON K.model         = A.model
  AND k.plan_date    = a.plan_date
  AND k.line_cd      = a.line_cd
  AND k.DAISHA_TYPE  = a.DAISHA_TYPE
  AND k.DAISHA_GROUP = a.DAISHA_GROUP
  LEFT JOIN
    (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP,
      MAX(PLAN_PICK_TM) AS PLAN_PICK_TM,
      LISTAGG(ROUND
      ||COLOR, ',') WITHIN GROUP (
    ORDER BY seq DESC) AS ACT_PICK
    FROM t_slane_daisha_progressive
    WHERE model  = model
    AND location = 'PICKING'
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) D
  ON k.model         = d.model
  AND k.plan_date    = d.plan_date
  AND k.line_cd      = d.line_cd
  AND k.DAISHA_TYPE  = d.DAISHA_TYPE
  AND k.DAISHA_GROUP = d.DAISHA_GROUP
  LEFT JOIN
    (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP,
      LISTAGG(ROUND
      ||COLOR, ',') WITHIN GROUP (
    ORDER BY seq DESC)      AS PLAN_OUT,
      MAX(PLAN_OUT_SLANE_TM)AS PLANOUT_TM
    FROM t_slane_daisha_progressive
    WHERE model            = model
    AND location           = 'S-LANE'
    AND BLANE_SIGNAL_DT   IS NOT NULL
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) F
  ON k.model         = f.model
  AND k.plan_date    = f.plan_date
  AND k.line_cd      = f.line_cd
  AND k.DAISHA_TYPE  = f.DAISHA_TYPE
  AND k.DAISHA_GROUP = f.DAISHA_GROUP
  LEFT JOIN
    (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP,
      LISTAGG(ROUND
      ||COLOR, ',') WITHIN GROUP (
    ORDER BY seq DESC) AS PLAN_PICK
    FROM t_slane_daisha_progressive
    WHERE model   = model
    AND location IS NULL
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) C
  ON k.model         = c.model
  AND k.plan_date    = c.plan_date
  AND k.line_cd      = c.line_cd
  AND k.DAISHA_TYPE  = c.DAISHA_TYPE
  AND k.DAISHA_GROUP = c.DAISHA_GROUP
  LEFT JOIN
    (SELECT model,
      cal_date,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP,
       sum(total_empty)as total_empty
    FROM t_slane_rec_empty_daisha
    WHERE cal_date = (SELECT 
      MAX(cal_date)AS cal_date from t_slane_rec_empty_daisha)
    GROUP BY model,
     cal_date,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) E
  ON k.line_cd       = e.line_cd
  AND k.model        = e.model
  AND k.DAISHA_TYPE  = e.DAISHA_TYPE
  AND k.DAISHA_GROUP = e.DAISHA_GROUP
  LEFT JOIN
    (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP,
      location,
      MAX(BLANE_IN_TM)AS BLANE_IN_TM,
       MAX(ACT_OUT_SLANE_TM)AS ACT_OUT_SLANE_TM,
      LISTAGG(ROUND
      ||COLOR, ',') WITHIN GROUP (
    ORDER BY seq DESC) AS BLANE_ROUND
    FROM t_slane_daisha_progressive
    WHERE model  = model
    AND (location = 'IN KITTING' 
    OR location = 'IN B-LANE')
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      LOCATION,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) I
  ON k.model         = i.model
  AND k.plan_date    = i.plan_date
  AND k.line_cd      = i.line_cd
  AND k.DAISHA_TYPE  = i.DAISHA_TYPE
  AND k.DAISHA_GROUP = i.DAISHA_GROUP
  LEFT JOIN
    (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP,
      LISTAGG(ROUND
      ||COLOR, ',') WITHIN GROUP (
    ORDER BY seq DESC) AS ASSY
    FROM t_slane_daisha_progressive
    WHERE model  = model
    AND location = 'ASSY'
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      LOCATION,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) T
  ON k.model         = t.model
  AND k.plan_date    = t.plan_date
  AND k.line_cd      = t.line_cd
  AND k.DAISHA_TYPE  = t.DAISHA_TYPE
  AND k.DAISHA_GROUP = t.DAISHA_GROUP
  LEFT JOIN
    (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP,
      LISTAGG(ROUND
      ||COLOR, ',') WITHIN GROUP (
    ORDER BY seq DESC)     AS ACT_SLANE,
      MAX(ACT_OUT_SLANE_TM)AS ACT_OUT_SLANE_TM
    FROM t_slane_daisha_progressive
    WHERE model           = model
    AND location          = 'KITTING'
    OR location           = 'B-LANE'
    AND BLANE_SIGNAL_DT  IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NOT NULL
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      LOCATION,
      DAISHA_TYPE,
      DAISHA_GROUP
    ) P
  ON k.model         = p.model
  AND k.plan_date    = p.plan_date
  AND k.line_cd      = p.line_cd
  AND k.DAISHA_TYPE  = p.DAISHA_TYPE
  AND k.DAISHA_GROUP = p.DAISHA_GROUP
  LEFT JOIN (SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP,
      LISTAGG(ROUND
      ||COLOR, ',') WITHIN GROUP (
    ORDER BY seq DESC)      AS ACT_OUT_BEFORE,
      MAX(PLAN_OUT_SLANE_TM)AS PLAN_ACT_OUT_TM
    FROM t_slane_daisha_progressive
    WHERE model            = model
    AND (location           = 'KITTING'
    or location           = 'IN KITTING'
    or location           = 'B-LANE'
    or location           = 'IN B-LANE')
    AND BLANE_SIGNAL_DT   IS NOT NULL
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP)M 
   ON k.model        = M.model
  AND k.plan_date    = M.plan_date
  AND k.line_cd      = M.line_cd
  AND k.DAISHA_TYPE  = M.DAISHA_TYPE
  AND k.DAISHA_GROUP = M.DAISHA_GROUP
  LEFT JOIN (select a.model,
      a.cell_name,
      a.PLAN_DATE,
      a.line_cd ,
      a.DAISHA_TYPE,
      a.DAISHA_GROUP,
      a.SEQ,
      b.round,
      a.min,
      a.max
      from 
(select a.model,
      a.cell_name,
      a.PLAN_DATE,
      a.line_cd ,
      a.DAISHA_TYPE,
      a.DAISHA_GROUP,
       b.min,
       b.max,
      (a.SEQ + b.MIN)-1 as SEQ from (   
    SELECT model,
      cell_name,
      PLAN_DATE,
      line_cd ,
      DAISHA_TYPE,
      DAISHA_GROUP,
    MIN(SEQ ) as SEQ
    FROM t_slane_daisha_progressive
    WHERE model  = model
    AND location = 'S-LANE'
    GROUP BY model,
      cell_name,
      PLAN_DATE,
      line_cd,
      DAISHA_TYPE,
      DAISHA_GROUP)A left join T_SLANE_DAISHA_MASTER B on
      a.model = b.model and
      a.line_cd = b.line_cd and
      a.DAISHA_TYPE = b.DAISHA_TYPE and
      a.DAISHA_GROUP = b.DAISHA_GROUP)A,(SELECT * FROM t_slane_daisha_progressive)B 
      WHERE
      a.model =b.model 
      and a.cell_name = b.cell_name
      and a.PLAN_DATE =b.PLAN_DATE
     and a.line_cd = b.line_cd
     and a.DAISHA_TYPE =b.DAISHA_TYPE
    and  a.DAISHA_GROUP = b.DAISHA_GROUP
    and  a.SEQ = b.SEQ) N ON 
      k.model        = N.model
  AND k.plan_date    = N.plan_date
  AND k.line_cd      = N.line_cd
  AND k.DAISHA_TYPE  = N.DAISHA_TYPE
  AND k.DAISHA_GROUP = N.DAISHA_GROUP
  LEFT JOIN (SELECT model,
      cell_name,
      PLAN_DATE
    FROM t_slane_daisha_progressive
    WHERE model  = model
    AND line_cd <> 'CM'
      GROUP BY model,
      line_cd,
      PLAN_DATE,
      cell_name,
      PLAN_DATE)x ON 
       k.model        = x.model
  AND k.plan_date    = x.plan_date;
--------------------------------------------------------
--  DDL for View V_SLANE_DETAIL_EMPTY
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_DETAIL_EMPTY" ("MODEL", "CELL_NAME", "DAISHA_TYPE", "DAISHA_GROUP", "TOTAL_EMPTY") AS 
  SELECT C.MODEL,CELL_NAME,
E.DAISHA_TYPE_N as DAISHA_TYPE,
D.DAISHA_GROUP_N as DAISHA_GROUP,
C.TOTAL_EMPTY FROM
(SELECT  A.MODEL,A.CAL_DATE,A.LINE_CD, CASE  A.LINE_CD WHEN 'CM' THEN 'ALL' ELSE  A.CELL_NAME END AS CELL_NAME, 
 A.DAISHA_TYPE ,A.DAISHA_GROUP,sum( A.total_empty)as total_empty 
FROM t_slane_rec_empty_daisha A,
(SELECT model,LINE_CD,DAISHA_TYPE,
MAX(cal_date)AS cal_date,DAISHA_GROUP from t_slane_rec_empty_daisha  
WHERE model = model 
and LINE_CD = LINE_CD GROUP BY model,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP)B
WHERE A.MODEL = B.MODEL
AND A.LINE_CD = B.LINE_CD
AND A.CAL_DATE = B.cal_date
AND A.DAISHA_TYPE = B.DAISHA_TYPE
AND A.DAISHA_GROUP = B.DAISHA_GROUP
GROUP BY  A.model, A.cal_date, A.line_cd , A.CELL_NAME, A.DAISHA_TYPE,
 A.DAISHA_GROUP)C
 LEFT JOIN T_SLANE_DAISHA_GROUP D ON C.DAISHA_GROUP = D.DAISHA_GROUP    
LEFT JOIN T_SLANE_DAISHA_TYPE E ON C.DAISHA_TYPE = E.DAISHA_TYPE;
--------------------------------------------------------
--  DDL for View V_SLANE_DNM_DAILY_PLAN
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_DNM_DAILY_PLAN" ("MODEL", "SHIFT", "PLAN_DATE", "PLAN_QTY", "PLAN_QTY_BY_SHIFT", "REALTIME_PLAN_QTY", "ACTUAL_QTY", "DIFF_QTY") AS 
  SELECT a.MODEL,b.SHIFT,a.PLAN_DATE,sum(a.PLAN_QTY)as PLAN_QTY,
sum(b.PLAN_QTY_BY_SHIFT)as PLAN_QTY_BY_SHIFT,
sum(REALTIME_PLAN_QTY)as REALTIME_PLAN_QTY,
sum(ACTUAL_QTY)as ACTUAL_QTY,sum(DIFF_QTY)as DIFF_QTY FROM 
(select  MODEL,LINE_CD,sum(PLAN_QTY)as PLAN_QTY,PLAN_DATE 
from T_SLANE_PRODUCTION_PLAN  GROUP BY 
MODEL ,PLAN_DATE,LINE_CD)A left join 
(select LINE_CD,SHIFT,CAL_DATE, 
sum(PLAN_QTY_BY_SHIFT)as PLAN_QTY_BY_SHIFT,
sum(REALTIME_PLAN_QTY)as REALTIME_PLAN_QTY,
sum(ACTUAL_QTY)as ACTUAL_QTY,
sum(DIFF_QTY)as DIFF_QTY  
FROM T_SLANE_DNM_RLTMPLANBYSHF_W 
group by LINE_CD,SHIFT,CAL_DATE)B ON
a.LINE_CD = b.LINE_CD 
and a.PLAN_DATE = b.CAL_DATE 
GROUP BY a.MODEL,a.PLAN_DATE ,b.SHIFT;
--------------------------------------------------------
--  DDL for View V_SLANE_DNM_DAILY_PLAN_B_LANE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_DNM_DAILY_PLAN_B_LANE" ("MODEL", "LINE_CD", "CELL_NAME", "PLAN_QTY", "PLAN_DATE", "SHIFT", "PLAN_QTY_BY_SHIFT", "REALTIME_PLAN_QTY", "ACTUAL_QTY", "DIFF_QTY") AS 
  select A.MODEL,
A.LINE_CD,
A.CELL_NAME,
A.PLAN_QTY,
A.PLAN_DATE,
B.SHIFT,
B.PLAN_QTY_BY_SHIFT,
B.REALTIME_PLAN_QTY,
B.ACTUAL_QTY,
B.DIFF_QTY from
(select  MODEL,LINE_CD,CELL_NAME,sum(PLAN_QTY)as PLAN_QTY,PLAN_DATE 
from T_SLANE_PRODUCTION_PLAN  GROUP BY 
MODEL ,PLAN_DATE,LINE_CD,CELL_NAME)A left join 
(select LINE_CD,SHIFT,CAL_DATE, 
sum(PLAN_QTY_BY_SHIFT)as PLAN_QTY_BY_SHIFT,
sum(REALTIME_PLAN_QTY)as REALTIME_PLAN_QTY,
sum(ACTUAL_QTY)as ACTUAL_QTY,
sum(DIFF_QTY)as DIFF_QTY  
FROM T_SLANE_DNM_RLTMPLANBYSHF_W 
group by LINE_CD,SHIFT,CAL_DATE)B 
on A.LINE_CD = B.LINE_CD
and A.PLAN_DATE = B.CAL_DATE;
--------------------------------------------------------
--  DDL for View V_SLANE_DNM_WORKSHIFT_CD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_DNM_WORKSHIFT_CD" ("FACTORY_CD", "MODEL_SEQ", "MODEL", "SHIFT", "LINE_CD", "WORK1_BEGIN", "WORK1_END", "WORK2_BEGIN", "WORK2_END", "WORK3_BEGIN", "WORK3_END", "WORK4_BEGIN", "WORK4_END") AS 
  SELECT D.FACTORY_CD,
    C.MODEL_SEQ,
    C.MODEL,
    C.SHIFT,
    C.LINE_CD,
    WORK1_BEGIN,
    WORK1_END ,
    WORK2_BEGIN,
    WORK2_END,
    WORK3_BEGIN,
    WORK3_END ,
    WORK4_BEGIN,
    WORK4_END
  FROM
    ( SELECT DISTINCT(a.MODEL_SEQ)AS MODEL_SEQ,
      a.MODEL,
      B.SHIFT,
      a.LINE_CD,
      B.DAYNIGHT
    FROM V_PRD_PLAN_A3_MODEL_MS A
    LEFT JOIN
      (SELECT DISTINCT(SUBSTR(LINE_CD,1,2))AS LINE_CD,
        SHIFT,
        WORKSHIFT_CD_DAY
        ||WORKSHIFT_CD_NIGHT AS DAYNIGHT
      FROM T_SLANE_DNM_WORKSHIFT_N_CAP
      )B
    ON A.LINE_CD = B.LINE_CD
    )C
  LEFT JOIN T_SLANE_DNM_WORKSHIFT_CD D
  ON C.DAYNIGHT = D.WORKSHIFT_CD
  GROUP BY D.FACTORY_CD,
    C.MODEL_SEQ,
    C.MODEL,
    C.SHIFT,
    C.LINE_CD,
    WORK1_BEGIN,
    WORK1_END ,
    WORK2_BEGIN,
    WORK2_END,
    WORK3_BEGIN,
    WORK3_END ,
    WORK4_BEGIN,
    WORK4_END;
--------------------------------------------------------
--  DDL for View V_SLANE_PRODUCTION_PLAN
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_PRODUCTION_PLAN" ("MODEL", "PLAN_DATE", "LINE_CD", "CELL_NAME", "SHIFT", "PLAN_QTY", "WORKINGTIME", "CYCLE_TIME", "TIME_Q1", "TIME_Q2", "TIME_Q3", "TIME_Q4", "TIME_Q5", "PLAN_Q1", "PLAN_Q2", "PLAN_Q3", "PLAN_Q4", "PLAN_Q5") AS 
  SELECT MODEL,
    PLAN_DATE,
    LINE_CD,
    CELL_NAME,
    SHIFT,
    PLAN_QTY,
    workingtime,
    CYCLE_TIME,
    ROUND(TIME_Q1)as TIME_Q1,
    ROUND(TIME_Q2)as TIME_Q2,
    ROUND(TIME_Q3)as TIME_Q3,
    ROUND(TIME_Q4)as TIME_Q4,
    ROUND(TIME_Q5)as TIME_Q5,
    ROUND((TIME_Q1*PLAN_QTY)/workingtime) AS PLAN_Q1,
    ROUND((TIME_Q2*PLAN_QTY)/workingtime) AS PLAN_Q2,
    ROUND((TIME_Q3*PLAN_QTY)/workingtime) AS PLAN_Q3,
    CASE TIME_Q5
      WHEN 0
      THEN (PLAN_QTY      -(ROUND((TIME_Q1*PLAN_QTY)/workingtime)+ROUND((TIME_Q2*PLAN_QTY)/workingtime) +ROUND((TIME_Q3*PLAN_QTY)/workingtime)))
      ELSE (ROUND((TIME_Q4*PLAN_QTY)/workingtime))
    END AS PLAN_Q4,
    CASE TIME_Q5
      WHEN 0
      THEN 0
      ELSE (PLAN_QTY-(ROUND((TIME_Q1*PLAN_QTY)/workingtime)+ROUND((TIME_Q2*PLAN_QTY)/workingtime) +ROUND((TIME_Q3*PLAN_QTY)/workingtime)+ROUND((TIME_Q4*PLAN_QTY)/workingtime)))
    END AS PLAN_Q5
  FROM
    (SELECT MODEL,
      PLAN_DATE,
      LINE_CD,
      CELL_NAME,
      SHIFT,
      PLAN_QTY,
      (workingtime_min+overtime_min) workingtime,
      CYCLE_TIME,
      (to_date(work1_end,'HH24:MI')-to_date(work1_begin,'HH24:MI'))*24*60 AS TIME_Q1,
      CASE SHIFT
        WHEN 'D'
        THEN (to_date(work2_end,'HH24:MI')  -to_date(work2_begin,'HH24:MI'))*24*60
        ELSE 
        CASE WHEN 
        work2_end BETWEEN '23:00' and '23:59'
        THEN 
       (to_date(work2_end,'HH24:MI')  -to_date(work2_begin,'HH24:MI'))*24*60
          ELSE 
         (TO_DATE(TO_CHAR(SYSDATE       +1,'YYYYMMDD')
          ||WORK2_END,'YYYYMMDDHH24:MI')    - TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')
          ||WORK2_BEGIN,'YYYYMMDDHH24:MI')) *24 * 60
          
          END
      END                                                                 AS TIME_Q2,
      (to_date(work3_end,'HH24:MI')-to_date(work3_begin,'HH24:MI'))*24*60 AS TIME_Q3,
      (to_date(work4_end,'HH24:MI')-to_date(work4_begin,'HH24:MI'))*24*60 AS TIME_Q4,
      overtime_min                                                        AS TIME_Q5
    FROM
      (SELECT a.model,
        a.plan_date,
        a.line_cd,
        a.cell_name,
        a.shift,
        SUM(A.PLAN_QTY) PLAN_QTY,
        b.workshift_cd_day,
        b.overtime_cd_day,
        b.cycle_time,
        c.work1_begin,
        c.work1_end,
        c.work2_begin,
        c.work2_end,
        c.work3_begin,
        c.work3_end,
        c.work4_begin,
        c.work4_end,
        NVL(c.workingtime_min,0) AS workingtime_min ,
        NVL(d.workingtime_min,0) AS overtime_min
      FROM t_slane_production_plan a,
        t_slane_dnm_workshift_n_cap b,
        t_slane_dnm_workshift_cd c ,
        t_slane_dnm_overtime_cd d
      WHERE a.plan_date      BETWEEN TO_CHAR(SYSDATE-30 ,'YYYYMMDD') and TO_CHAR(SYSDATE,'YYYYMMDD')
      AND a.shift            = 'D'
      AND a.plan_date        = b.plan_date(+)
      AND a.line_cd          = SUBSTR(b.line_cd(+),1,2)
      AND b.workshift_cd_day = c.workshift_cd
      AND b.overtime_cd_day  = d.overtime_cd (+)
      GROUP BY a.model,
        a.plan_date,
        a.line_cd,
        a.cell_name,
        a.shift,
        b.workshift_cd_day,
        b.overtime_cd_day,
        b.cycle_time,
        c.work1_begin,
        c.work1_end,
        c.work2_begin,
        c.work2_end,
        c.work3_begin,
        c.work3_end,
        c.work4_begin,
        c.work4_end,
        NVL(c.workingtime_min,0),
        NVL(d.workingtime_min,0)
      UNION
      SELECT a.model,
        a.plan_date,
        a.line_cd,
        a.cell_name,
        a.shift,
        SUM(A.PLAN_QTY) PLAN_QTY,
        b.workshift_cd_night,
        b.overtime_cd_night,
        b.cycle_time,
        c.work1_begin,
        c.work1_end,
        c.work2_begin,
        c.work2_end,
        c.work3_begin,
        c.work3_end,
        c.work4_begin,
        c.work4_end,
        NVL(c.workingtime_min,0) AS workingtime_min ,
        NVL(d.workingtime_min,0) AS overtime_min
      FROM t_slane_production_plan a,
        t_slane_dnm_workshift_n_cap b,
        t_slane_dnm_workshift_cd c ,
        t_slane_dnm_overtime_cd d
      WHERE a.plan_date        BETWEEN TO_CHAR(SYSDATE-30 ,'YYYYMMDD') and TO_CHAR(SYSDATE,'YYYYMMDD')
      AND a.shift              = 'N'
      AND a.plan_date          = b.plan_date(+)
      AND a.line_cd            = SUBSTR(b.line_cd(+),1,2)
      AND b.workshift_cd_night = c.workshift_cd
      AND b.overtime_cd_night  = d.overtime_cd (+)
      GROUP BY a.model,
        a.plan_date,
        a.line_cd,
        a.cell_name,
        a.shift,
        b.workshift_cd_night,
        b.overtime_cd_night,
        b.cycle_time,
        c.work1_begin,
        c.work1_end,
        c.work2_begin,
        c.work2_end,
        c.work3_begin,
        c.work3_end,
        c.work4_begin,
        c.work4_end,
        NVL(c.workingtime_min,0),
        NVL(d.workingtime_min,0)
      )
    );
--------------------------------------------------------
--  DDL for View V_SLANE_PROGRESS_DELIVERY
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_PROGRESS_DELIVERY" ("FACTORY_CD", "MODEL", "PLAN_DATE", "SHIFT", "LINE_CD", "CELL_NAME", "DAISHA_TYPE", "DAISHA_GROUP", "Q1", "Q2", "Q3", "Q4", "Q5") AS 
  SELECT A.FACTORY_CD,A.MODEL,A.PLAN_DATE,A.SHIFT,A.LINE_CD,A.CELL_NAME,B.DAISHA_TYPE_N  AS DAISHA_TYPE,D.DAISHA_GROUP_N AS DAISHA_GROUP,
       A.Q1,A.Q2,A.Q3,A.Q4,A.Q5
  FROM
    (SELECT a.FACTORY_CD,a.MODEL,a.PLAN_DATE,a.SHIFT,a.LINE_CD,a.CELL_NAME,a.DAISHA_TYPE,a.DAISHA_GROUP,B.Q1,C.Q2,D.Q3,E.Q4,F.Q5
    FROM
      (SELECT FACTORY_CD,MODEL,PLAN_DATE,SHIFT,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP
      FROM T_SLANE_DAISHA_PROGRESSIVE
      GROUP BY FACTORY_CD,MODEL,PLAN_DATE,SHIFT,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP
      )A
    LEFT JOIN
      (SELECT a.FACTORY_CD,a.MODEL,a.PLAN_DATE,a.SHIFT,a.LINE_CD,a.CELL_NAME,a.DAISHA_TYPE,a.DAISHA_GROUP,(COUNT(*)*c.snp)AS Q1
      FROM T_SLANE_DAISHA_PROGRESSIVE a,
      (SELECT DISTINCT(MODEL),SHIFT,WORK1_BEGIN,WORK1_END,WORK2_BEGIN,WORK2_END,WORK3_BEGIN,WORK3_END,WORK4_BEGIN,WORK4_END
        FROM V_SLANE_WORKING_TIME
        ) b,
      (SELECT  DISTINCT(MODEL), snp, DAISHA_TYPE, DAISHA_GROUP from T_SLANE_DAISHA_MASTER) c
      WHERE a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date(b.work1_begin,'HH24:MI'),'HH24:MI:SS') AND TO_CHAR(to_date(b.WORK1_END,'HH24:MI'),'HH24:MI:SS')
      AND a.MODEL     = b.MODEL
      AND a.SHIFT     = b.SHIFT
      AND a.PLAN_DATE = a.PLAN_DATE
      AND a.MODEL     = c.MODEL
      AND a.DAISHA_TYPE = c.DAISHA_TYPE
      AND a.DAISHA_GROUP = c.DAISHA_GROUP
      GROUP BY a.FACTORY_CD,a.MODEL,a.PLAN_DATE,a.SHIFT,a.LINE_CD,a.CELL_NAME,a.DAISHA_TYPE,a.DAISHA_GROUP,c.snp
      )B
    ON a.FACTORY_CD    = b.FACTORY_CD
    AND a.MODEL        = b.MODEL
    AND a.PLAN_DATE    = b.PLAN_DATE
    AND a.SHIFT        = b.SHIFT
    AND a.LINE_CD      = b.LINE_CD
    AND a.DAISHA_TYPE  = b.DAISHA_TYPE
    AND a.DAISHA_GROUP = b.DAISHA_GROUP
    LEFT JOIN
      (SELECT a.FACTORY_CD,a.MODEL,a.PLAN_DATE,a.SHIFT,a.LINE_CD,a.CELL_NAME,a.DAISHA_TYPE,a.DAISHA_GROUP,
        (COUNT(*)*c.snp)AS Q2
      FROM T_SLANE_DAISHA_PROGRESSIVE a,
        (SELECT DISTINCT(MODEL),SHIFT,WORK1_BEGIN,WORK1_END,WORK2_BEGIN,WORK2_END,WORK3_BEGIN,WORK3_END,WORK4_BEGIN,WORK4_END
        FROM V_SLANE_WORKING_TIME
        ) b,
        (SELECT  DISTINCT(MODEL), snp, DAISHA_TYPE, DAISHA_GROUP from T_SLANE_DAISHA_MASTER) c
      WHERE a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date(b.WORK1_END,'HH24:MI'),'HH24:MI:SS') AND TO_CHAR(to_date(b.WORK2_END,'HH24:MI'),'HH24:MI:SS')
      AND a.MODEL     = b.MODEL
      AND a.SHIFT     = b.SHIFT
      AND a.PLAN_DATE = a.PLAN_DATE
      AND a.MODEL     = c.MODEL
      AND a.DAISHA_TYPE = c.DAISHA_TYPE
      AND a.DAISHA_GROUP = c.DAISHA_GROUP
      GROUP BY a.FACTORY_CD,a.MODEL,a.PLAN_DATE,a.SHIFT,a.LINE_CD,a.CELL_NAME,a.DAISHA_TYPE,a.DAISHA_GROUP,c.snp
      )C
    ON a.FACTORY_CD    = C.FACTORY_CD
    AND a.MODEL        = C.MODEL
    AND a.PLAN_DATE    = C.PLAN_DATE
    AND a.SHIFT        = C.SHIFT
    AND a.LINE_CD      = C.LINE_CD
    AND a.DAISHA_TYPE  = C.DAISHA_TYPE
    AND a.DAISHA_GROUP = C.DAISHA_GROUP
    LEFT JOIN
    (SELECT a.FACTORY_CD,a.MODEL,a.PLAN_DATE,a.SHIFT,a.LINE_CD,a.CELL_NAME,a.DAISHA_TYPE,a.DAISHA_GROUP,(COUNT(*)*c.snp)AS Q3
      FROM T_SLANE_DAISHA_PROGRESSIVE a,
        (SELECT DISTINCT(MODEL),SHIFT,WORK1_BEGIN,WORK1_END,WORK2_BEGIN,WORK2_END,WORK3_BEGIN,WORK3_END,WORK4_BEGIN,
          WORK4_END
        FROM V_SLANE_WORKING_TIME
        ) b,
      (SELECT  DISTINCT(MODEL), snp, DAISHA_TYPE, DAISHA_GROUP from T_SLANE_DAISHA_MASTER) c
      WHERE a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date(b.WORK2_END,'HH24:MI'),'HH24:MI:SS') AND TO_CHAR(to_date(b.WORK3_END,'HH24:MI'),'HH24:MI:SS')
      AND a.MODEL     = b.MODEL
      AND a.SHIFT     = b.SHIFT
      AND a.PLAN_DATE = a.PLAN_DATE
       AND a.MODEL     = c.MODEL
      AND a.DAISHA_TYPE = c.DAISHA_TYPE
      AND a.DAISHA_GROUP = c.DAISHA_GROUP
      GROUP BY a.FACTORY_CD,a.MODEL,a.PLAN_DATE,a.SHIFT,a.LINE_CD,a.CELL_NAME,a.DAISHA_TYPE,a.DAISHA_GROUP,c.snp
      )D
    ON a.FACTORY_CD    = D.FACTORY_CD
    AND a.MODEL        = D.MODEL
    AND a.PLAN_DATE    = D.PLAN_DATE
    AND a.SHIFT        = D.SHIFT
    AND a.LINE_CD      = D.LINE_CD
    AND a.DAISHA_TYPE  = D.DAISHA_TYPE
    AND a.DAISHA_GROUP = D.DAISHA_GROUP
    LEFT JOIN
      (SELECT a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        (COUNT(*)*c.snp)AS Q4
      FROM T_SLANE_DAISHA_PROGRESSIVE a,
        (SELECT DISTINCT(MODEL),
          SHIFT,
          WORK1_BEGIN,
          WORK1_END,
          WORK2_BEGIN,
          WORK2_END,
          WORK3_BEGIN,
          WORK3_END,
          WORK4_BEGIN,
          WORK4_END
        FROM V_SLANE_WORKING_TIME
        ) b,
        (SELECT  DISTINCT(MODEL), snp, DAISHA_TYPE, DAISHA_GROUP from T_SLANE_DAISHA_MASTER) c
      WHERE a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date(b.WORK3_END,'HH24:MI'),'HH24:MI:SS') AND TO_CHAR(to_date(b.WORK4_END,'HH24:MI'),'HH24:MI:SS')
      AND a.MODEL     = b.MODEL
      AND a.SHIFT     = b.SHIFT
      AND a.PLAN_DATE = a.PLAN_DATE
       AND a.MODEL     = c.MODEL
      AND a.DAISHA_TYPE = c.DAISHA_TYPE
      AND a.DAISHA_GROUP = c.DAISHA_GROUP
      GROUP BY a.FACTORY_CD,a.MODEL,a.PLAN_DATE,a.SHIFT,a.LINE_CD,a.CELL_NAME,a.DAISHA_TYPE,a.DAISHA_GROUP,c.snp
      )E
    ON a.FACTORY_CD    = E.FACTORY_CD
    AND a.MODEL        = E.MODEL
    AND a.PLAN_DATE    = E.PLAN_DATE
    AND a.SHIFT        = E.SHIFT
    AND a.LINE_CD      = E.LINE_CD
    AND a.DAISHA_TYPE  = E.DAISHA_TYPE
    AND a.DAISHA_GROUP = E.DAISHA_GROUP
    LEFT JOIN
      (SELECT a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        (COUNT(*)*c.snp)AS Q5
      FROM T_SLANE_DAISHA_PROGRESSIVE a,
        (SELECT DISTINCT(MODEL),
          SHIFT,
          WORK1_BEGIN,
          WORK1_END,
          WORK2_BEGIN,
          WORK2_END,
          WORK3_BEGIN,
          WORK3_END,
          WORK4_BEGIN,
          WORK4_END ,
          OVERTIME_BEGIN,
          OVERTIME_END
        FROM V_SLANE_WORKING_TIME
        ) b,
        (SELECT  DISTINCT(MODEL), snp, DAISHA_TYPE, DAISHA_GROUP from T_SLANE_DAISHA_MASTER) c
      WHERE a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date(b.OVERTIME_BEGIN,'HH24:MI'),'HH24:MI:SS') AND TO_CHAR(to_date(b.OVERTIME_END,'HH24:MI'),'HH24:MI:SS')
      AND a.MODEL     = b.MODEL
      AND a.SHIFT     = b.SHIFT
      AND a.PLAN_DATE = a.PLAN_DATE
      AND a.MODEL     = c.MODEL
      AND a.DAISHA_TYPE = c.DAISHA_TYPE
      AND a.DAISHA_GROUP = c.DAISHA_GROUP
      GROUP BY a.FACTORY_CD,a.MODEL,a.PLAN_DATE,a.SHIFT,a.LINE_CD,a.CELL_NAME,a.DAISHA_TYPE,a.DAISHA_GROUP,c.snp
      )F
    ON a.FACTORY_CD    = F.FACTORY_CD
    AND a.MODEL        = F.MODEL
    AND a.PLAN_DATE    = F.PLAN_DATE
    AND a.SHIFT        = F.SHIFT
    AND a.LINE_CD      = F.LINE_CD
    AND a.DAISHA_TYPE  = F.DAISHA_TYPE
    AND a.DAISHA_GROUP = F.DAISHA_GROUP
    )A
  LEFT JOIN T_SLANE_DAISHA_TYPE B
  ON A.DAISHA_TYPE = B.DAISHA_TYPE
  LEFT JOIN T_SLANE_DAISHA_GROUP D
  ON A.DAISHA_GROUP = D.DAISHA_GROUP;
--------------------------------------------------------
--  DDL for View V_SLANE_PROGRESS_ORDER_DAISHA
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_PROGRESS_ORDER_DAISHA" ("FACTORY_CD", "PLAN_DATE", "MODEL", "SHIFT", "LINE_CD", "SECTION", "DAISHA_TYPE", "DAISHA_GROUP", "ROUND", "ORDER_NO", "PLAN_TIME", "ACT_TIME", "DIFF", "MIN_BLANE") AS 
  select A.FACTORY_CD,
A.PLAN_DATE,
A.MODEL,
A.SHIFT,
A.LINE_CD,
B.DAISHA_TYPE_N||C.DAISHA_GROUP_N as SECTION,
B.DAISHA_TYPE_N AS DAISHA_TYPE,
C.DAISHA_GROUP_N as DAISHA_GROUP,
A.ORDER_NO as ROUND,
A.ROUND as ORDER_NO,
SUBSTR(A.PLAN_OUT_SLANE_TM,0,5) as PLAN_TIME,
SUBSTR(A.ACT_OUT_SLANE_TM,0,5) as ACT_TIME,
CASE WHEN A.ACT_OUT_SLANE_TM <> 'xx:xx:xx' THEN 
ROUND((TO_DATE(TO_CHAR(TO_DATE(A.PLAN_OUT_SLANE_DT,'YYYYMMDD'),'DD-MM-YY')||SUBSTR(A.PLAN_OUT_SLANE_TM,0,5),'DD-MM-YYHH24:MI:SS')- 
TO_DATE(TO_CHAR(TO_DATE(A.ACT_OUT_SLANE_DT,'YYYYMMDD'),'DD-MM-YY')||SUBSTR(A.ACT_OUT_SLANE_TM,0,5),'DD-MM-YYHH24:MI:SS'))*24*60) 
ELSE null END as DIFF,
SUBSTR(A.BLANE_OUT_TM,0,5) as MIN_BLANE FROM
T_SLANE_DAISHA_PROGRESSIVE A 
LEFT JOIN T_SLANE_DAISHA_TYPE B ON A.DAISHA_TYPE = B.DAISHA_TYPE
LEFT JOIN T_SLANE_DAISHA_GROUP C ON A.DAISHA_GROUP = C.DAISHA_GROUP
where A.ORDER_NO IS not null;
--------------------------------------------------------
--  DDL for View V_SLANE_PRO_DELIVERY
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_PRO_DELIVERY" ("FACTORY_CD", "MODEL", "PLAN_DATE", "SHIFT", "LINE_CD", "CELL_NAME", "DAISHA_TYPE", "DAISHA_GROUP", "Q1", "Q2", "Q3", "Q4", "Q5") AS 
  SELECT A.FACTORY_CD,
    A.MODEL,
    A.PLAN_DATE,
    A.SHIFT,
    A.LINE_CD,
    A.CELL_NAME,
    B.DAISHA_TYPE_N  AS DAISHA_TYPE,
    D.DAISHA_GROUP_N AS DAISHA_GROUP,
    A.Q1,
    A.Q2,
    A.Q3,
    A.Q4,
    A.Q5
  FROM
    (SELECT a.FACTORY_CD,
      a.MODEL,
      a.PLAN_DATE,
      a.SHIFT,
      a.LINE_CD,
      a.CELL_NAME,
      a.DAISHA_TYPE,
      a.DAISHA_GROUP,
      B.Q1,
      C.Q2,
      D.Q3,
      E.Q4,
      F.Q5
    FROM
      (SELECT FACTORY_CD,
        MODEL,
        PLAN_DATE,
        SHIFT,
        LINE_CD,
        CELL_NAME,
        DAISHA_TYPE,
        DAISHA_GROUP
      FROM T_SLANE_DAISHA_PROGRESSIVE
      GROUP BY FACTORY_CD,
        MODEL,
        PLAN_DATE,
        SHIFT,
        LINE_CD,
        CELL_NAME,
        DAISHA_TYPE,
        DAISHA_GROUP
      )A
    LEFT JOIN
      (SELECT a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        (COUNT(*)*c.snp)AS Q1
      FROM T_SLANE_DAISHA_PROGRESSIVE a,
        (SELECT DISTINCT(MODEL),
          SHIFT,
          WORK1_BEGIN,
          WORK1_END,
          WORK2_BEGIN,
          WORK2_END,
          WORK3_BEGIN,
          WORK3_END,
          WORK4_BEGIN,
          WORK4_END
        FROM V_SLANE_WORKING_TIME
        ) b,
        (SELECT DISTINCT(MODEL),
          snp,
          DAISHA_TYPE,
          DAISHA_GROUP
        FROM T_SLANE_DAISHA_MASTER
        ) c
      WHERE a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date(b.work1_begin,'HH24:MI'),'HH24:MI:SS') AND TO_CHAR(to_date(b.WORK1_END,'HH24:MI'),'HH24:MI:SS')
      AND a.MODEL        = b.MODEL
      AND a.SHIFT        = b.SHIFT
      AND a.PLAN_DATE    = a.PLAN_DATE
      AND a.MODEL        = c.MODEL
      AND a.DAISHA_TYPE  = c.DAISHA_TYPE
      AND a.DAISHA_GROUP = c.DAISHA_GROUP
      GROUP BY a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        c.snp
      )B
    ON a.FACTORY_CD    = b.FACTORY_CD
    AND a.MODEL        = b.MODEL
    AND a.PLAN_DATE    = b.PLAN_DATE
    AND a.SHIFT        = b.SHIFT
    AND a.LINE_CD      = b.LINE_CD
    AND a.DAISHA_TYPE  = b.DAISHA_TYPE
    AND a.DAISHA_GROUP = b.DAISHA_GROUP
    LEFT JOIN
      (SELECT a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        (COUNT(*)*c.snp)AS Q2
      FROM T_SLANE_DAISHA_PROGRESSIVE a,
        (SELECT DISTINCT(MODEL),
          SHIFT,
          WORK1_BEGIN,
          WORK1_END,
          WORK2_BEGIN,
          WORK2_END,
          WORK3_BEGIN,
          WORK3_END,
          WORK4_BEGIN,
          WORK4_END
        FROM V_SLANE_WORKING_TIME
        ) b,
        (SELECT DISTINCT(MODEL),
          snp,
          DAISHA_TYPE,
          DAISHA_GROUP
        FROM T_SLANE_DAISHA_MASTER
        ) c
      WHERE a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date(b.WORK1_END,'HH24:MI'),'HH24:MI:SS') AND TO_CHAR(to_date(b.WORK2_END,'HH24:MI'),'HH24:MI:SS')
      AND a.MODEL        = b.MODEL
      AND a.SHIFT        = b.SHIFT
      AND a.PLAN_DATE    = a.PLAN_DATE
      AND a.MODEL        = c.MODEL
      AND a.DAISHA_TYPE  = c.DAISHA_TYPE
      AND a.DAISHA_GROUP = c.DAISHA_GROUP
      GROUP BY a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        c.snp
      )C
    ON a.FACTORY_CD    = C.FACTORY_CD
    AND a.MODEL        = C.MODEL
    AND a.PLAN_DATE    = C.PLAN_DATE
    AND a.SHIFT        = C.SHIFT
    AND a.LINE_CD      = C.LINE_CD
    AND a.DAISHA_TYPE  = C.DAISHA_TYPE
    AND a.DAISHA_GROUP = C.DAISHA_GROUP
    LEFT JOIN
      (SELECT a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        (COUNT(*)*c.snp)AS Q3
      FROM T_SLANE_DAISHA_PROGRESSIVE a,
        (SELECT DISTINCT(MODEL),
          SHIFT,
          WORK1_BEGIN,
          WORK1_END,
          WORK2_BEGIN,
          WORK2_END,
          WORK3_BEGIN,
          WORK3_END,
          WORK4_BEGIN,
          WORK4_END
        FROM V_SLANE_WORKING_TIME
        ) b,
        (SELECT DISTINCT(MODEL),
          snp,
          DAISHA_TYPE,
          DAISHA_GROUP
        FROM T_SLANE_DAISHA_MASTER
        ) c
      WHERE a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date(b.work3_begin,'HH24:MI'),'HH24:MI:SS') AND TO_CHAR(to_date(b.WORK3_END,'HH24:MI'),'HH24:MI:SS')
      AND a.MODEL        = b.MODEL
      AND a.SHIFT        = b.SHIFT
      AND a.PLAN_DATE    = a.PLAN_DATE
      AND a.MODEL        = c.MODEL
      AND a.DAISHA_TYPE  = c.DAISHA_TYPE
      AND a.DAISHA_GROUP = c.DAISHA_GROUP
      GROUP BY a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        c.snp
      )D
    ON a.FACTORY_CD    = D.FACTORY_CD
    AND a.MODEL        = D.MODEL
    AND a.PLAN_DATE    = D.PLAN_DATE
    AND a.SHIFT        = D.SHIFT
    AND a.LINE_CD      = D.LINE_CD
    AND a.DAISHA_TYPE  = D.DAISHA_TYPE
    AND a.DAISHA_GROUP = D.DAISHA_GROUP
    LEFT JOIN
      (SELECT a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        (COUNT(*)*c.snp)AS Q4
      FROM T_SLANE_DAISHA_PROGRESSIVE a,
        (SELECT DISTINCT(MODEL),
          SHIFT,
          WORK1_BEGIN,
          WORK1_END,
          WORK2_BEGIN,
          WORK2_END,
          WORK3_BEGIN,
          WORK3_END,
          WORK4_BEGIN,
          WORK4_END
        FROM V_SLANE_WORKING_TIME
        ) b,
        (SELECT DISTINCT(MODEL),
          snp,
          DAISHA_TYPE,
          DAISHA_GROUP
        FROM T_SLANE_DAISHA_MASTER
        ) c
      WHERE a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date(b.WORK3_END,'HH24:MI'),'HH24:MI:SS') AND TO_CHAR(to_date(b.WORK4_END,'HH24:MI'),'HH24:MI:SS')
      AND a.MODEL        = b.MODEL
      AND a.SHIFT        = b.SHIFT
      AND a.PLAN_DATE    = a.PLAN_DATE
      AND a.MODEL        = c.MODEL
      AND a.DAISHA_TYPE  = c.DAISHA_TYPE
      AND a.DAISHA_GROUP = c.DAISHA_GROUP
      GROUP BY a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        c.snp
      )E
    ON a.FACTORY_CD    = E.FACTORY_CD
    AND a.MODEL        = E.MODEL
    AND a.PLAN_DATE    = E.PLAN_DATE
    AND a.SHIFT        = E.SHIFT
    AND a.LINE_CD      = E.LINE_CD
    AND a.DAISHA_TYPE  = E.DAISHA_TYPE
    AND a.DAISHA_GROUP = E.DAISHA_GROUP
    LEFT JOIN
      (SELECT a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        case when a.SHIFT = 'D' then (COUNT(*)*c.snp) else (COUNT(*)*c.snp) end AS Q5
      FROM T_SLANE_DAISHA_PROGRESSIVE a,
        (SELECT DISTINCT(MODEL),
          SHIFT,
          WORK1_BEGIN,
          WORK1_END,
          WORK2_BEGIN,
          WORK2_END,
          WORK3_BEGIN,
          WORK3_END,
          WORK4_BEGIN,
          WORK4_END ,
          OVERTIME_BEGIN,
          OVERTIME_END
        FROM V_SLANE_WORKING_TIME
        ) b,
        (SELECT DISTINCT(MODEL),
          snp,
          DAISHA_TYPE,
          DAISHA_GROUP
        FROM T_SLANE_DAISHA_MASTER
        ) c
      WHERE (a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date('17:20','HH24:MI'),'HH24:MI:SS') 
      AND TO_CHAR(to_date('20:00','HH24:MI'),'HH24:MI:SS') OR a.ACT_OUT_SLANE_TM BETWEEN TO_CHAR(to_date('05:20','HH24:MI'),'HH24:MI:SS') 
      AND TO_CHAR(to_date('08:00','HH24:MI'),'HH24:MI:SS'))
      AND a.MODEL        = b.MODEL
      AND a.SHIFT        = b.SHIFT
      AND a.PLAN_DATE    = a.PLAN_DATE
      AND a.MODEL        = c.MODEL
      AND a.DAISHA_TYPE  = c.DAISHA_TYPE
      AND a.DAISHA_GROUP = c.DAISHA_GROUP
      AND a.ORDER_NO <> '0'
      GROUP BY a.FACTORY_CD,
        a.MODEL,
        a.PLAN_DATE,
        a.SHIFT,
        a.LINE_CD,
        a.CELL_NAME,
        a.DAISHA_TYPE,
        a.DAISHA_GROUP,
        c.snp)F
    ON a.FACTORY_CD    = F.FACTORY_CD
    AND a.MODEL        = F.MODEL
    AND a.PLAN_DATE    = F.PLAN_DATE
    AND a.SHIFT        = F.SHIFT
    AND a.LINE_CD      = F.LINE_CD
    AND a.DAISHA_TYPE  = F.DAISHA_TYPE
    AND a.DAISHA_GROUP = F.DAISHA_GROUP
    )A
  LEFT JOIN T_SLANE_DAISHA_TYPE B
  ON A.DAISHA_TYPE = B.DAISHA_TYPE
  LEFT JOIN T_SLANE_DAISHA_GROUP D
  ON A.DAISHA_GROUP = D.DAISHA_GROUP;
--------------------------------------------------------
--  DDL for View V_SLANE_WORKING_TIME
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_WORKING_TIME" ("MODEL", "PLAN_DATE", "LINE_CD", "SHIFT", "PLAN_QTY", "WORKSHIFT_CD_DAY", "OVERTIME_CD_DAY", "CYCLE_TIME", "WORK1_BEGIN", "WORK1_END", "WORK2_BEGIN", "WORK2_END", "WORK3_BEGIN", "WORK3_END", "WORK4_BEGIN", "WORK4_END", "OVERTIME_BEGIN", "OVERTIME_END", "WORKINGTIME_MIN", "OVERTIME_MIN") AS 
  SELECT a.model,
    a.plan_date,
    a.line_cd,
    a.shift,
    SUM(A.PLAN_QTY) PLAN_QTY,
    b.workshift_cd_day,
    b.overtime_cd_day,
    b.cycle_time,
    c.work1_begin,
    c.work1_end,
    c.work2_begin,
    c.work2_end,
    c.work3_begin,
    c.work3_end,
    c.work4_begin,
    c.work4_end,
    d.overtime_begin,
    d.overtime_end,
    NVL(c.workingtime_min,0) AS workingtime_min ,
    NVL(d.workingtime_min,0) AS overtime_min
  FROM t_slane_production_plan a,
    t_slane_dnm_workshift_n_cap b,
    t_slane_dnm_workshift_cd c ,
    t_slane_dnm_overtime_cd d
  WHERE a.plan_date      between to_char(sysdate-1 ,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD')
  AND a.shift            = 'D'
  AND a.plan_date        = b.plan_date(+)
  AND a.line_cd          = SUBSTR(b.line_cd(+),1,2)
  AND b.workshift_cd_day = c.workshift_cd
  AND b.overtime_cd_day  = d.overtime_cd (+)
  GROUP BY a.model,
    a.plan_date,
    a.line_cd,
    a.shift,
    b.workshift_cd_day,
    b.overtime_cd_day,
    b.cycle_time,
    c.work1_begin,
    c.work1_end,
    c.work2_begin,
    c.work2_end,
    c.work3_begin,
    c.work3_end,
    c.work4_begin,
    c.work4_end,
    d.overtime_begin,
    d.overtime_end,
    NVL(c.workingtime_min,0),
    NVL(d.workingtime_min,0)
  UNION
  SELECT a.model,
    a.plan_date,
    a.line_cd,
    a.shift,
    SUM(A.PLAN_QTY) PLAN_QTY,
    b.workshift_cd_night,
    b.overtime_cd_night,
    b.cycle_time,
    c.work1_begin,
    c.work1_end,
    c.work2_begin,
    c.work2_end,
    c.work3_begin,
    c.work3_end,
    c.work4_begin,
    c.work4_end,
    d.overtime_begin,
    d.overtime_end,
    NVL(c.workingtime_min,0) AS workingtime_min ,
    NVL(d.workingtime_min,0) AS overtime_min
  FROM t_slane_production_plan a,
    t_slane_dnm_workshift_n_cap b,
    t_slane_dnm_workshift_cd c ,
    t_slane_dnm_overtime_cd d
   WHERE a.plan_date      between to_char(sysdate-1 ,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD')
  AND a.shift              = 'N'
  AND a.plan_date          = b.plan_date(+)
  AND a.line_cd            = SUBSTR(b.line_cd(+),1,2)
  AND b.workshift_cd_night = c.workshift_cd
  AND b.overtime_cd_night  = d.overtime_cd (+)
  GROUP BY a.model,
    a.plan_date,
    a.line_cd,
    a.shift,
    b.workshift_cd_night,
    b.overtime_cd_night,
    b.cycle_time,
    c.work1_begin,
    c.work1_end,
    c.work2_begin,
    c.work2_end,
    c.work3_begin,
    c.work3_end,
    c.work4_begin,
    c.work4_end,
    d.overtime_begin,
    d.overtime_end,
    NVL(c.workingtime_min,0),
    NVL(d.workingtime_min,0);
--------------------------------------------------------
--  DDL for View V_SLANE_WORKING_TIME_TEST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SLANE_WORKING_TIME_TEST" ("MODEL", "PLAN_DATE", "LINE_CD", "SHIFT", "PLAN_QTY", "WORKSHIFT_CD_DAY", "OVERTIME_CD_DAY", "CYCLE_TIME", "WORK1_BEGIN", "WORK1_END", "BREAK1_BEGIN", "BREAK1_END", "WORK2_BEGIN", "WORK2_END", "BREAK2_BEGIN", "BREAK2_END", "WORK3_BEGIN", "WORK3_END", "BREAK3_BEGIN", "BREAK3_END", "WORK4_BEGIN", "WORK4_END", "OVERTIME_BEGIN", "OVERTIME_END", "WORKINGTIME_MIN", "OVERTIME_MIN") AS 
  SELECT a.model,
    a.plan_date,
    a.line_cd,
    a.shift,
    SUM(A.PLAN_QTY) PLAN_QTY,
    b.workshift_cd_day,
    b.overtime_cd_day,
    b.cycle_time,
    c.work1_begin,
    c.work1_end,
    c.break1_begin,
    c.break1_end,
    c.work2_begin,
    c.work2_end,
    c.break2_begin,
    c.break2_end,
    c.work3_begin,
    c.work3_end,
    c.break3_begin,
    c.break3_end,
    c.work4_begin,
    c.work4_end,
    d.overtime_begin,
    d.overtime_end,
    NVL(c.workingtime_min,0) AS workingtime_min ,
    NVL(d.workingtime_min,0) AS overtime_min
  FROM t_slane_production_plan a,
    t_slane_dnm_workshift_n_cap b,
    t_slane_dnm_workshift_cd c ,
    t_slane_dnm_overtime_cd d
  WHERE a.plan_date BETWEEN TO_CHAR(sysdate-7 ,'YYYYMMDD') AND TO_CHAR(sysdate,'YYYYMMDD')
  AND a.shift            = 'D'
  AND a.plan_date        = b.plan_date(+)
  AND a.line_cd          = SUBSTR(b.line_cd(+),1,2)
  AND b.workshift_cd_day = c.workshift_cd
  AND b.overtime_cd_day  = d.overtime_cd (+)
  GROUP BY a.model,
    a.plan_date,
    a.line_cd,
    a.shift,
    b.workshift_cd_day,
    b.overtime_cd_day,
    b.cycle_time,
    c.work1_begin,
    c.work1_end,
    c.break1_begin,
    c.break1_end,
    c.work2_begin,
    c.work2_end,
    c.break2_begin,
    c.break2_end,
    c.work3_begin,
    c.work3_end,
    c.break3_begin,
    c.break3_end,
    c.work4_begin,
    c.work4_end,
    d.overtime_begin,
    d.overtime_end,
    NVL(c.workingtime_min,0),
    NVL(d.workingtime_min,0)
  UNION
  SELECT a.model,
    a.plan_date,
    a.line_cd,
    a.shift,
    SUM(A.PLAN_QTY) PLAN_QTY,
    b.workshift_cd_night,
    b.overtime_cd_night,
    b.cycle_time,
    c.work1_begin,
    c.work1_end,
    c.break1_begin,
    c.break1_end,
    c.work2_begin,
    c.work2_end,
    c.break2_begin,
    c.break2_end,
    c.work3_begin,
    c.work3_end,
    c.break3_begin,
    c.break3_end,
    c.work4_begin,
    c.work4_end,
    d.overtime_begin,
    d.overtime_end,
    NVL(c.workingtime_min,0) AS workingtime_min ,
    NVL(d.workingtime_min,0) AS overtime_min
  FROM t_slane_production_plan a,
    t_slane_dnm_workshift_n_cap b,
    t_slane_dnm_workshift_cd c ,
    t_slane_dnm_overtime_cd d
  WHERE a.plan_date BETWEEN TO_CHAR(sysdate-7 ,'YYYYMMDD') AND TO_CHAR(sysdate,'YYYYMMDD')
  AND a.shift              = 'N'
  AND a.plan_date          = b.plan_date(+)
  AND a.line_cd            = SUBSTR(b.line_cd(+),1,2)
  AND b.workshift_cd_night = c.workshift_cd
  AND b.overtime_cd_night  = d.overtime_cd (+)
  GROUP BY a.model,
    a.plan_date,
    a.line_cd,
    a.shift,
    b.workshift_cd_night,
    b.overtime_cd_night,
    b.cycle_time,
    c.work1_begin,
    c.work1_end,
    c.break1_begin,
    c.break1_end,
    c.work2_begin,
    c.work2_end,
    c.break2_begin,
    c.break2_end,
    c.work3_begin,
    c.work3_end,
    c.break3_begin,
    c.break3_end,
    c.work4_begin,
    c.work4_end,
    d.overtime_begin,
    d.overtime_end,
    NVL(c.workingtime_min,0),
    NVL(d.workingtime_min,0);
--------------------------------------------------------
--  DDL for View V_STORE_LT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_STORE_LT" ("CD_FACT", "NO_PARTS", "NO_ADJ_DIM", "NO_INVENT_CNTL_POI", "CD_BLOCK", "RK_PRIO_DIVI", "PT_RATIO", "TM_STORE_LEAD", "DT_E_VALID") AS 
  SELECT CD_FACT,NO_PARTS,NO_ADJ_DIM,NO_INVENT_CNTL_POI,CD_BLOCK,RK_PRIO_DIVI,PT_RATIO,TM_STORE_LEAD,DT_E_VALID
 FROM NPIS.H005_BC_LEAD_TIME_MULTI_RATIO @FROM_EUC_NPIS
 WHERE DT_E_VALID = '99999999' AND CD_BLOCK <> '9000' AND PT_RATIO <> 0;
--------------------------------------------------------
--  DDL for View V_SUPP_NAME
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_SUPP_NAME" ("SUPPTYPE", "NO_ARRANGE", "NM_SPLY_ENG") AS 
  SELECT t2.supptype,t1.NO_ARRANGE,t1.NM_SPLY_ENG FROM  J000_SUPPLIER_MASTER@FROM_EUC_NPIS t1
 left outer join support_supp_type t2
 on t1.CD_SPLY_CLASS = t2.code;
--------------------------------------------------------
--  DDL for View V_UNIT_PRICE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_UNIT_PRICE" ("NO_PARTS", "NO_ADJ_DIM", "NO_INVENT_CNTL_POI", "CD_BLOCK", "DATEPRICE", "CT_ALL", "NM_PARTS_LOCAL", "CF_CHILD_BASE") AS 
  select  no_parts,
no_adj_dim,
    no_invent_cntl_poi,
    cd_block,
    TO_DATE(dt_start_ym,'YYYYMM') as dateprice ,
    ct_all ,
    nm_parts_local,
    cf_child_base from D000_UNIT_PRICE_MASTER@FROM_EUC_NPIS;
--------------------------------------------------------
--  DDL for View V_UNIT_PRICE_UPDATE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_UNIT_PRICE_UPDATE" ("NO_PARTS", "NO_ADJ_DIM", "NO_INVENT_CNTL_POI", "CD_BLOCK", "DATEPRICE", "CT_ALL", "CF_CHILD_BASE") AS 
  SELECT t1.no_parts,
    t1.no_adj_dim,
    t1.no_invent_cntl_poi,
    t1.cd_block,
    t1.dateprice,
    t1.ct_all ,
    t1.cf_child_base
  FROM v_unit_price t1
  INNER JOIN
    (SELECT no_parts,
      no_adj_dim,
      no_invent_cntl_poi,
      cd_block,
      MAX(dateprice) AS maxdate
    FROM v_unit_price
    GROUP BY no_parts,
      no_adj_dim,
      no_invent_cntl_poi,
      cd_block
    )t2
  ON t1.no_parts            = t2.no_parts
  AND t1.dateprice          = t2.maxdate
  AND t1.no_adj_dim         = t2.no_adj_dim
  AND t1.no_invent_cntl_poi = t2.no_invent_cntl_poi
  AND t1.cd_block           = t2.cd_block;
--------------------------------------------------------
--  DDL for View V_WARNNINGLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_WARNNINGLIST" ("NO_PARTS", "NO_ADJ_DIM", "CD_USE_BLOCK", "DT_DATE", "QT_ORDER", "SUM_QT_DEMAND", "QT_NET_DEMAND", "QT_EFFCTV_INVNTRY", "QT_NET_EFFCTV_INVNTRY", "PD_PO_ISSUE", "PD_PO_ISSUE_POC", "CD_SPLY", "SUPPLIER1", "SUPPLIER2", "TM_STORE_LEAD", "CF_CHILD_BASE", "ORA", "SLT", "BRA", "BBB", "DRA", "ZZZ", "ARA", "DT_DELV", "NO_PO", "MK_PO_CHK_DIGIT", "QT_ORD", "RESP_NAME_OP", "RESP_NAME_ST", "CTRL_BY") AS 
  SELECT A.NO_PARTS,
  A.NO_ADJ_DIM,
  A.CD_USE_BLOCK,
  A.DT_DATE,
  A.QT_ORDER,
  A.SUM_QT_DEMAND,
  A.QT_NET_DEMAND,
  A.QT_EFFCTV_INVNTRY,
  A.QT_NET_EFFCTV_INVNTRY,
  A.PD_PO_ISSUE,
  B.PD_PO_ISSUE as PD_PO_ISSUE_POC,
  A.CD_SPLY,
  A.CD_BLOCK as Supplier1,
  '' as Supplier2,
  A.TM_STORE_LEAD,
  A.CF_CHILD_BASE,
  A.ORA,
  A.SLT,
  A.BRA,
  A.BBB,
  A.DRA,
  A.ZZZ,
  A.ARA,
  A.DT_DELV,
  A.NO_PO,
  A.MK_PO_CHK_DIGIT,
  A.QT_ORD,
  A.RESP_NAME_OP,
  A.RESP_NAME_ST,
  A.CTRL_BY
  FROM(
SELECT A.NO_PARTS,
  A.NO_ADJ_DIM,
  A.CD_USE_BLOCK,
  A.DT_DATE,
  A.QT_ORDER,
  A.SUM_QT_DEMAND,
  A.QT_NET_DEMAND,
  A.QT_EFFCTV_INVNTRY,
  A.QT_NET_EFFCTV_INVNTRY,
  A.PD_PO_ISSUE,
  A.CD_SPLY,
  M.CD_BLOCK,
  K.TM_STORE_LEAD,
  L.CF_CHILD_BASE,
  B.CTRL_BY ,
  D.QT_QTY as ORA,
  E.QT_QTY as SLT,
  F.QT_QTY as BRA,
  G.QT_QTY as BBB,
  H.QT_QTY as DRA,
  I.QT_QTY as ZZZ,
  J.QT_QTY as ARA,
  C.DT_DELV,
  C.NO_PO,
  C.MK_PO_CHK_DIGIT,
  C.QT_ORD,
  B.RESP_NAME_OP,
  B.RESP_NAME_ST

FROM V_99LIST A LEFT JOIN LCDINFO_F1_T001_PART_LIST B 
ON A.NO_PARTS = B.PART_NO 
AND A.NO_ADJ_DIM = B.DIM_NO
AND A.CD_USE_BLOCK = B.BLOCK_CODE
LEFT JOIN (SELECT NPIS.J300_PURCHASE_ORDER_STATUS.CD_SPLY_CLASS,
 NPIS.J300_PURCHASE_ORDER_STATUS.CD_SPLY,
 NPIS.J300_PURCHASE_ORDER_STATUS.NO_PO,
 NPIS.J300_PURCHASE_ORDER_STATUS.MK_PO_CHK_DIGIT
 ,NPIS.J300_PURCHASE_ORDER_STATUS.NO_PARTS,
 NPIS.J300_PURCHASE_ORDER_STATUS.NO_ADJ_DIM,
 NPIS.J300_PURCHASE_ORDER_STATUS.DT_PO,
 NPIS.J300_PURCHASE_ORDER_STATUS.QT_ORD,
 NPIS.J300_PURCHASE_ORDER_STATUS.DT_DELV,
 NPIS.J300_PURCHASE_ORDER_STATUS.TM_DELV,
 NPIS.J300_PURCHASE_ORDER_STATUS.CD_DELV_PLACE,
 NPIS.J300_PURCHASE_ORDER_STATUS.CD_RACK_ADD,
 NPIS.J300_PURCHASE_ORDER_STATUS.CD_USE_BLOCK,
 NPIS.J300_PURCHASE_ORDER_STATUS.CD_INSP_TYPE,
 NPIS.J300_PURCHASE_ORDER_STATUS.NM_PARTS_LOCAL,
 NPIS.J300_PURCHASE_ORDER_STATUS.NM_PARTS_ENG
 FROM NPIS.J300_PURCHASE_ORDER_STATUS@FROM_EUC_NPIS
 WHERE NPIS.J300_PURCHASE_ORDER_STATUS.DT_PO = to_char(sysdate,'YYYYMMDD')
 AND NPIS.J300_PURCHASE_ORDER_STATUS.NM_ARGMET_STAT = 'DO' 
 AND NPIS.J300_PURCHASE_ORDER_STATUS.MK_SUM_FLG = '2' 
 AND NPIS.J300_PURCHASE_ORDER_STATUS.CD_RACK_ADD <> '1P00' 
 AND NPIS.J300_PURCHASE_ORDER_STATUS.CD_ORD_RESN = '1' 
 AND NPIS.J300_PURCHASE_ORDER_STATUS.NO_ORD_CLASS = '9900' 
 AND (NPIS.J300_PURCHASE_ORDER_STATUS.CD_DELV_PLACE = 'RAA1' 
 OR NPIS.J300_PURCHASE_ORDER_STATUS.CD_DELV_PLACE = 'RAS1' 
 OR NPIS.J300_PURCHASE_ORDER_STATUS.CD_DELV_PLACE = 'RAH1' 
 OR NPIS.J300_PURCHASE_ORDER_STATUS.CD_DELV_PLACE = 'RAS2' 
 OR NPIS.J300_PURCHASE_ORDER_STATUS.CD_DELV_PLACE = 'RAPC' 
 OR NPIS.J300_PURCHASE_ORDER_STATUS.CD_DELV_PLACE = 'MRH2' 
 OR NPIS.J300_PURCHASE_ORDER_STATUS.CD_DELV_PLACE = 'RAH2' 
 OR NPIS.J300_PURCHASE_ORDER_STATUS.CD_DELV_PLACE = 'MRS1' 
 OR NPIS.J300_PURCHASE_ORDER_STATUS.CD_DELV_PLACE = 'MRPC' 
 OR NPIS.J300_PURCHASE_ORDER_STATUS.CD_DELV_PLACE = 'MRH1' 
 OR NPIS.J300_PURCHASE_ORDER_STATUS.CD_DELV_PLACE = 'MRS2' 
 OR NPIS.J300_PURCHASE_ORDER_STATUS.CD_DELV_PLACE = 'MRA1' 
 OR NPIS.J300_PURCHASE_ORDER_STATUS.CD_DELV_PLACE = 'RADS' 
 OR NPIS.J300_PURCHASE_ORDER_STATUS.CD_DELV_PLACE = 'RA')) C 
ON A.NO_PARTS = C.NO_PARTS 
AND A.NO_ADJ_DIM = C.NO_ADJ_DIM
AND A.CD_USE_BLOCK = C.CD_USE_BLOCK 
LEFT JOIN (SELECT 
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_PARTS,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_ADJ_DIM,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_INVENT_CNTL_POI,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_LINE,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_BLOCK,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_USE_BLOCK,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.RK_PERSONAL_PLAN,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_PERSONAL_PLAN_CTGRY,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.DT_SHIP_ENABLE,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.QT_QTY 
 FROM NPIS.V_PAD_PRODUCTION_PLAN_DAILY@FROM_EUC_NPIS 
 WHERE NPIS.V_PAD_PRODUCTION_PLAN_DAILY.PERSONAL_PLAN_OBJ_ID = 0 
 AND NPIS.V_PAD_PRODUCTION_PLAN_DAILY.RK_PERSONAL_PLAN = 'A'
 AND NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_PERSONAL_PLAN_CTGRY = 'ORA') D 
ON A.NO_PARTS = D.NO_PARTS 
AND A.NO_ADJ_DIM = D.NO_ADJ_DIM
AND A.CD_USE_BLOCK = D.CD_USE_BLOCK
LEFT JOIN 
  (SELECT 
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_PARTS,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_ADJ_DIM,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_INVENT_CNTL_POI,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_LINE,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_BLOCK,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_USE_BLOCK,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.RK_PERSONAL_PLAN,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_PERSONAL_PLAN_CTGRY,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.DT_SHIP_ENABLE,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.QT_QTY 
 FROM NPIS.V_PAD_PRODUCTION_PLAN_DAILY@FROM_EUC_NPIS 
 WHERE NPIS.V_PAD_PRODUCTION_PLAN_DAILY.PERSONAL_PLAN_OBJ_ID = 0 
 AND NPIS.V_PAD_PRODUCTION_PLAN_DAILY.RK_PERSONAL_PLAN = 'A'
 AND NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_PERSONAL_PLAN_CTGRY = 'SLT') E
 ON A.NO_PARTS = E.NO_PARTS 
AND A.NO_ADJ_DIM = E.NO_ADJ_DIM
AND A.CD_USE_BLOCK = E.CD_USE_BLOCK
LEFT JOIN 
(SELECT 
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_PARTS,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_ADJ_DIM,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_INVENT_CNTL_POI,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_LINE,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_BLOCK,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_USE_BLOCK,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.RK_PERSONAL_PLAN,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_PERSONAL_PLAN_CTGRY,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.DT_SHIP_ENABLE,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.QT_QTY 
 FROM NPIS.V_PAD_PRODUCTION_PLAN_DAILY@FROM_EUC_NPIS 
 WHERE NPIS.V_PAD_PRODUCTION_PLAN_DAILY.PERSONAL_PLAN_OBJ_ID = 0 
 AND NPIS.V_PAD_PRODUCTION_PLAN_DAILY.RK_PERSONAL_PLAN = 'A'
 AND NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_PERSONAL_PLAN_CTGRY = 'BRA') F
 ON A.NO_PARTS = F.NO_PARTS 
AND A.NO_ADJ_DIM = F.NO_ADJ_DIM
AND A.CD_USE_BLOCK = F.CD_USE_BLOCK
LEFT JOIN
 (SELECT 
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_PARTS,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_ADJ_DIM,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_INVENT_CNTL_POI,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_LINE,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_BLOCK,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_USE_BLOCK,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.RK_PERSONAL_PLAN,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_PERSONAL_PLAN_CTGRY,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.DT_SHIP_ENABLE,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.QT_QTY 
 FROM NPIS.V_PAD_PRODUCTION_PLAN_DAILY@FROM_EUC_NPIS 
 WHERE NPIS.V_PAD_PRODUCTION_PLAN_DAILY.PERSONAL_PLAN_OBJ_ID = 0 
 AND NPIS.V_PAD_PRODUCTION_PLAN_DAILY.RK_PERSONAL_PLAN = 'A'
 AND NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_PERSONAL_PLAN_CTGRY = 'BBB') G
 ON A.NO_PARTS = G.NO_PARTS 
AND A.NO_ADJ_DIM = G.NO_ADJ_DIM
AND A.CD_USE_BLOCK = G.CD_USE_BLOCK
LEFT JOIN
(SELECT 
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_PARTS,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_ADJ_DIM,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_INVENT_CNTL_POI,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_LINE,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_BLOCK,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_USE_BLOCK,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.RK_PERSONAL_PLAN,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_PERSONAL_PLAN_CTGRY,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.DT_SHIP_ENABLE,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.QT_QTY 
 FROM NPIS.V_PAD_PRODUCTION_PLAN_DAILY@FROM_EUC_NPIS 
 WHERE NPIS.V_PAD_PRODUCTION_PLAN_DAILY.PERSONAL_PLAN_OBJ_ID = 0 
 AND NPIS.V_PAD_PRODUCTION_PLAN_DAILY.RK_PERSONAL_PLAN = 'A'
 AND NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_PERSONAL_PLAN_CTGRY = 'DRA') H
 ON A.NO_PARTS = H.NO_PARTS 
AND A.NO_ADJ_DIM = H.NO_ADJ_DIM
AND A.CD_USE_BLOCK = H.CD_USE_BLOCK
LEFT JOIN
 (SELECT 
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_PARTS,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_ADJ_DIM,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_INVENT_CNTL_POI,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_LINE,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_BLOCK,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_USE_BLOCK,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.RK_PERSONAL_PLAN,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_PERSONAL_PLAN_CTGRY,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.DT_SHIP_ENABLE,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.QT_QTY 
 FROM NPIS.V_PAD_PRODUCTION_PLAN_DAILY@FROM_EUC_NPIS 
 WHERE NPIS.V_PAD_PRODUCTION_PLAN_DAILY.PERSONAL_PLAN_OBJ_ID = 0 
 AND NPIS.V_PAD_PRODUCTION_PLAN_DAILY.RK_PERSONAL_PLAN = 'A'
 AND NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_PERSONAL_PLAN_CTGRY = 'ZZZ') I
 ON A.NO_PARTS = I.NO_PARTS 
AND A.NO_ADJ_DIM = I.NO_ADJ_DIM
AND A.CD_USE_BLOCK = I.CD_USE_BLOCK
LEFT JOIN
(SELECT 
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_PARTS,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_ADJ_DIM,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_INVENT_CNTL_POI,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.NO_LINE,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_BLOCK,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_USE_BLOCK,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.RK_PERSONAL_PLAN,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_PERSONAL_PLAN_CTGRY,
 NPIS.V_PAD_PRODUCTION_PLAN_DAILY.DT_SHIP_ENABLE,NPIS.V_PAD_PRODUCTION_PLAN_DAILY.QT_QTY 
 FROM NPIS.V_PAD_PRODUCTION_PLAN_DAILY@FROM_EUC_NPIS 
 WHERE NPIS.V_PAD_PRODUCTION_PLAN_DAILY.PERSONAL_PLAN_OBJ_ID = 0 
 AND NPIS.V_PAD_PRODUCTION_PLAN_DAILY.RK_PERSONAL_PLAN = 'A'
 AND NPIS.V_PAD_PRODUCTION_PLAN_DAILY.CD_PERSONAL_PLAN_CTGRY = 'ARA') J
 ON A.NO_PARTS = J.NO_PARTS 
AND A.NO_ADJ_DIM = J.NO_ADJ_DIM
AND A.CD_USE_BLOCK = J.CD_USE_BLOCK 

LEFT JOIN V_STORE_LT K 
ON A.NO_PARTS = K.NO_PARTS 
AND A.NO_ADJ_DIM = K.NO_ADJ_DIM 
LEFT JOIN (SELECT NPIS.G003_PARTS_MASTER.NO_PARTS,NPIS.G003_PARTS_MASTER.NO_ADJ_DIM,
NPIS.G003_PARTS_MASTER.CF_CHILD_BASE,MAX(NPIS.G003_PARTS_MASTER.NM_PARTS_LOCAL) 
FROM NPIS.G003_PARTS_MASTER@FROM_EUC_NPIS WHERE NPIS.G003_PARTS_MASTER.NO_ADJ_DIM <> '   ' 
AND NPIS.G003_PARTS_MASTER.NO_ADJ_DIM <> '00S'  
Group By NPIS.G003_PARTS_MASTER.NO_PARTS,NPIS.G003_PARTS_MASTER.NO_ADJ_DIM,NPIS.G003_PARTS_MASTER.CF_CHILD_BASE 
ORDER BY NPIS.G003_PARTS_MASTER.NO_PARTS ASC) L
ON A.NO_PARTS = L.NO_PARTS 
AND A.NO_ADJ_DIM = L.NO_ADJ_DIM 

LEFT JOIN (SELECT NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.CD_FACT,
NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.NO_PARTS,NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.NO_ADJ_DIM,
NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.NO_INVENT_CNTL_POI,NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.NO_LINE,
NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.CD_BLOCK,NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.DT_B_VALID,
NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.MK_PARA_PRODUC_DIVI,NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.RK_PRIO_DIVI,
NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.PT_RATIO,NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.QT_FIX,
NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.QT_BUNDLE,NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.TM_STORE_LEAD,
NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.PD_PROCESS,NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.TM_DIRCT_BILL_PUB_LEAD,
NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.DT_RENEW_LEAD,NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.DT_E_VALID,
NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.CD_RELEASE_NO,NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.CF_IO,
NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.MK_INDICATE_OUT,NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.MK_PILE_PRIO,
NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.CD_CAL,NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.CF_CUSTOMER_SETTING_CLSS,
NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.CD_DATA_CNTL,NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.DT_ENTRY,
NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.NM_ENTRY_PERSON,NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.DT_RENEW,
NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.NM_RENEW_PERSON,NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.CD_TRANS 
FROM NPIS.H005_BC_LEAD_TIME_MULTI_RATIO@FROM_EUC_NPIS WHERE 
NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.DT_E_VALID = '99999999' 
AND NPIS.H005_BC_LEAD_TIME_MULTI_RATIO.PT_RATIO > 0) M
ON A.NO_PARTS = M.NO_PARTS 
AND A.NO_ADJ_DIM = M.NO_ADJ_DIM 
)A LEFT JOIN (SELECT NPIS.J002_PARTS_ORDER_CONDITION.CD_DATA_CNTL,NPIS.J002_PARTS_ORDER_CONDITION.CD_FACT,
NPIS.J002_PARTS_ORDER_CONDITION.CD_SPLY,NPIS.J002_PARTS_ORDER_CONDITION.CF_INVENT_DEM,
NPIS.J002_PARTS_ORDER_CONDITION.NO_ARRANGE,NPIS.J002_PARTS_ORDER_CONDITION.CD_SPLY_FACT,
NPIS.J002_PARTS_ORDER_CONDITION.CD_GLBL_SPLY,NPIS.J002_PARTS_ORDER_CONDITION.CD_ORD_CLASS,
NPIS.J002_PARTS_ORDER_CONDITION.NO_PARTS,NPIS.J002_PARTS_ORDER_CONDITION.NO_ADJ_DIM,
NPIS.J002_PARTS_ORDER_CONDITION.PD_PO_ISSUE FROM NPIS.J002_PARTS_ORDER_CONDITION@FROM_EUC_NPIS
WHERE NPIS.J002_PARTS_ORDER_CONDITION.CD_DATA_CNTL = '0' 
) B 
ON A.NO_PARTS = B.NO_PARTS 
AND A.NO_ADJ_DIM = B.NO_ADJ_DIM
AND A.CD_BLOCK = B.CD_SPLY;
--------------------------------------------------------
--  DDL for View V_WK
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."V_WK" ("NO_PARTS", "NO_ADJ_DIM", "DAY") AS 
  SELECT t1.NO_PARTS,
    t1.NO_ADJ_DIM,
    t3.DAY
  FROM H006_SAFETY_STOCK_DEFECT_RATE@FROM_EUC_NPIS t1 ,    
  SUPPPORT_WEEK_BUNDLE_CODE t3
  WHERE ( t1.NO_PARTS        = t1.NO_PARTS 
  AND  t1.MK_DAY_INTEGRATE <> ' '
  AND t1.MK_DAY_INTEGRATE    = t3.bundle_code)
  GROUP by t1.no_parts ,t1.no_adj_dim ,t3.day;
--------------------------------------------------------
--  DDL for View WEBLCD_V002_SCHEDULE_CONTROL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "LCDRA"."WEBLCD_V002_SCHEDULE_CONTROL" ("ID", "MEETINGDATE", "STARTTIME", "FINISHTIME", "TOPIC", "ROOM", "RESPONSEBY", "FACTORY_CD") AS 
  SELECT 
    ID, 
    TO_CHAR(MEETING_DATE, 'DD-MM-YYYY') AS MEETINGDATE, 
    START_TIME AS STARTTIME, 
    FINISH_TIME AS FINISHTIME, 
    TOPIC, 
    ROOM, 
    RESPONSE_BY AS RESPONSEBY, 
    FACTORY_CD 
FROM 
    WEBLCD_T002_SCHEDULE_CONTROL 
WHERE 
    MEETING_DATE >= TRUNC(sysdate) AND MEETING_DATE <= TRUNC(sysdate + 7) 
ORDER BY 
    MEETING_DATE asc , 
    START_TIME asc , 
    FINISH_TIME asc;
--------------------------------------------------------
--  DDL for Index T_SLANE_DAISHA_MASTER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_DAISHA_MASTER_PK" ON "LCDRA"."T_SLANE_DAISHA_MASTER" ("FACTORY_CD", "MODEL_SEQ", "MODEL", "LINE_CD", "DAISHA_TYPE", "DAISHA_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index WEBLCD_T000_USER_CONTROL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."WEBLCD_T000_USER_CONTROL_PK" ON "LCDRA"."WEBLCD_T000_USER_CONTROL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_REC_EMPTY_DAISHA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_REC_EMPTY_DAISHA_PK" ON "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" ("FACTORY_CD", "MODEL", "CAL_DATE", "SHIFT", "LINE_CD", "DAISHA_TYPE", "DAISHA_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SHIP_ORD_ADDRESS_MASTER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SHIP_ORD_ADDRESS_MASTER_PK" ON "LCDRA"."T_SHIP_ORD_ADDRESS_MASTER" ("COMPANY_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_MASTER_PARTLIST_INK
--------------------------------------------------------

  CREATE INDEX "LCDRA"."T_MTDB_MASTER_PARTLIST_INK" ON "LCDRA"."T_MTDB_MASTER_PARTLIST" ("MT_MODEL", "ORDER_BY", "DIM", "DWG_NO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index WEBLCD_T002_SCHEDULE_CONT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."WEBLCD_T002_SCHEDULE_CONT_PK" ON "LCDRA"."WEBLCD_T002_SCHEDULE_CONTROL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_DNM_OVERTIME_CD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_DNM_OVERTIME_CD_PK" ON "LCDRA"."T_SLANE_DNM_OVERTIME_CD" ("FACTORY_CD", "OVERTIME_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index MINSTOCK_T002_HISTORY_CON_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."MINSTOCK_T002_HISTORY_CON_PK" ON "LCDRA"."MINSTOCK_T002_HISTORY_CONTROL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index t_slane_calculate_actual_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."t_slane_calculate_actual_PK" ON "LCDRA"."T_SLANE_CALCULATE_ACTUAL" ("FACTORY_CD", "PLAN_DATE", "MODEL", "SHIFT", "LINE_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_STATUS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_MTDB_STATUS_PK" ON "LCDRA"."T_MTDB_STATUS" ("STATUS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index EX_SLANE_PRODUCTION_PLAN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."EX_SLANE_PRODUCTION_PLAN_PK" ON "LCDRA"."EX_SLANE_PRODUCTION_PLAN" ("FACTORY_CD", "MODEL_SEQ", "PLAN_DATE", "SHIFT", "LINE_CD", "PRIORITY", "MERCHANDISE_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_CTRLDIE_TRANSFER2_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_MTDB_CTRLDIE_TRANSFER2_PK" ON "LCDRA"."T_MTDB_CTRLDIE_TRANSFER2" ("MT_MODEL", "PART_NO", "MOLD_NO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index LCDINFO_F1_T001_PART_LIST_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."LCDINFO_F1_T001_PART_LIST_PK" ON "LCDRA"."LCDINFO_F1_T001_PART_LIST" ("ID_PARTS_LIST") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_DAISHA_PROGRESSIVE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE_PK" ON "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" ("FACTORY_CD", "MODEL", "PLAN_DATE", "SHIFT", "LINE_CD", "CELL_NAME", "DAISHA_TYPE", "DAISHA_GROUP", "SEQ") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index LCDINFO_T_SUPP_NAME_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."LCDINFO_T_SUPP_NAME_PK" ON "LCDRA"."LCDINFO_F1_T002_SUPP_NAME" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_MASTER_SERIES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_MTDB_MASTER_SERIES_PK" ON "LCDRA"."T_MTDB_MASTER_SERIES" ("MT_MODEL", "MODEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_DNM_WORKSHIFT_CD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD_PK" ON "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" ("FACTORY_CD", "WORKSHIFT_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_MASTER_MT_ORDER_INDK
--------------------------------------------------------

  CREATE INDEX "LCDRA"."T_MTDB_MASTER_MT_ORDER_INDK" ON "LCDRA"."T_MTDB_MASTER_MT_ORDER" ("MT_MODEL", "PART_NO", "DIM", "DWG_NO", "GROUP_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_MASTER_PARTLIST_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_MTDB_MASTER_PARTLIST_PK" ON "LCDRA"."T_MTDB_MASTER_PARTLIST" ("MT_MODEL", "PART_NO", "DIM", "ORDER_BY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_MASTER_STATUS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_MTDB_MASTER_STATUS_PK" ON "LCDRA"."T_MTDB_MASTER_STATUS" ("STATUS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_PROGRESS_KT_DAISHA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_PROGRESS_KT_DAISHA_PK" ON "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" ("FACTORY_CD", "PLAN_DATE", "MODEL", "SHIFT", "LINE_CD", "DAISHA_TYPE", "DAISHA_GROUP", "ROUND", "ORDER_NO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_DIE_JUDGE_LT_MASTER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_MTDB_DIE_JUDGE_LT_MASTER_PK" ON "LCDRA"."T_MTDB_DS_JUDGE_LT_MASTER" ("DEPT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_EXTRA_ORDER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_MTDB_EXTRA_ORDER_PK" ON "LCDRA"."T_MTDB_EXTRA_ORDER" ("MT_MODEL", "MODEL", "MTM_NO", "SUB", "PART_NO", "SUP_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_MASTER_MT_ORDER_IND
--------------------------------------------------------

  CREATE INDEX "LCDRA"."T_MTDB_MASTER_MT_ORDER_IND" ON "LCDRA"."T_MTDB_MASTER_MT_ORDER" ("PART_NO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SHIP_ORD_ORIGIN_MASTER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SHIP_ORD_ORIGIN_MASTER_PK" ON "LCDRA"."T_SHIP_ORD_ORIGIN_MASTER" ("ORIGIN", "SUB_ORIGIN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index WEBLCD_T001_ISO_DOC_CONTR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."WEBLCD_T001_ISO_DOC_CONTR_PK" ON "LCDRA"."WEBLCD_T001_ISO_DOC_CONTROL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index TEST_USER_PK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."TEST_USER_PK1" ON "LCDRA"."TEST_USER" ("EMP_NO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_PRODUCTION_PLAN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_PRODUCTION_PLAN_PK" ON "LCDRA"."T_SLANE_PRODUCTION_PLAN" ("FACTORY_CD", "MODEL_SEQ", "MODEL", "PLAN_DATE", "SHIFT", "LINE_CD", "PRIORITY", "MERCHANDISE_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_ROLE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_MTDB_ROLE_PK" ON "LCDRA"."T_MTDB_ROLE" ("ROLE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_DELIVERY_CYCLE_MAS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_DELIVERY_CYCLE_MAS_PK" ON "LCDRA"."T_SLANE_DELIVERY_CYCLE_MASTER" ("FACTORY_CD", "MODEL", "TYPE", "ZONE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index LCDINFO_F1_T006_UPLOAD_IMA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."LCDINFO_F1_T006_UPLOAD_IMA_PK" ON "LCDRA"."LCDINFO_F1_T006_UPLOAD_IMAGE" ("ID_UPIMG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index EX_SLANE_APLAN_PLAN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."EX_SLANE_APLAN_PLAN_PK" ON "LCDRA"."EX_SLANE_APLAN_PLAN" ("FACTORY_CD", "MODEL_SEQ", "PLAN_DATE", "SHIFT", "LINE_CD", "PRIORITY", "MERCHANDISE_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_LEADTIME_DRW_MASTER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_MTDB_LEADTIME_DRW_MASTER_PK" ON "LCDRA"."T_MTDB_LEADTIME_DRW_MASTER" ("MT_MODEL", "TARGET_DS") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_USER_LOGIN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_MTDB_USER_LOGIN_PK" ON "LCDRA"."T_MTDB_USER_LOGIN" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_MASTER_MT_ORDER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_MTDB_MASTER_MT_ORDER_PK" ON "LCDRA"."T_MTDB_MASTER_MT_ORDER" ("MT_MODEL", "MODEL", "PART_NO", "DIM", "DWG_NO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_DNM_WORKSHIFT_N_CAP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_DNM_WORKSHIFT_N_CAP_PK" ON "LCDRA"."T_SLANE_DNM_WORKSHIFT_N_CAP" ("FACTORY_CD", "PLAN_DATE", "LINE_CD", "SHIFT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index TABLE1_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."TABLE1_PK" ON "LCDRA"."PODETAILFROMSIAM" ("ID", "NO_PO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_WORKING_DAY_MASTER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_MTDB_WORKING_DAY_MASTER_PK" ON "LCDRA"."T_MTDB_WORKING_DAY_MASTER" ("DT_WORK") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SLANE_METRIX_PART_MASTER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SLANE_METRIX_PART_MASTER_PK" ON "LCDRA"."T_SLANE_METRIX_PART_MASTER" ("FACTORY_CD", "MODEL", "DAISHA_TYPE", "DAISHA_GROUP", "PART_NO", "DIM_NO", "SUPP_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_CTRLDIE_TRANSFER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_MTDB_CTRLDIE_TRANSFER_PK" ON "LCDRA"."T_MTDB_CTRLDIE_TRANSFER" ("MT_MODEL", "PART_NO", "MOLD_NO", "DEPT_UPLOAD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index TABLE1_PK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."TABLE1_PK1" ON "LCDRA"."LCDINFO_F1_T003_PARTS_NAME" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index TEST_REGIS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."TEST_REGIS_PK" ON "LCDRA"."TEST_REGIS" ("EMP_NO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_MASTER_USAGE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_MTDB_MASTER_USAGE_PK" ON "LCDRA"."T_MTDB_MASTER_USAGE" ("MT_MODEL", "PART_NO", "DIM", "USAGE_TYPE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_CTRLDIE_TRANSFER_PA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_MTDB_CTRLDIE_TRANSFER_PA_PK" ON "LCDRA"."T_MTDB_CTRLDIE_TRANSFER_PART" ("MT_MODEL", "PART_NO", "DWG_NO", "GROUP_CD", "DIM") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_SHIP_ORD_COMMODITY_MAST_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_SHIP_ORD_COMMODITY_MAST_PK" ON "LCDRA"."T_SHIP_ORD_COMMODITY_MASTER" ("PART_NO", "DIM_NO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index T_MTDB_SIAM_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."T_MTDB_SIAM_PK" ON "LCDRA"."T_MTDB_SIAM" ("MT_MODEL", "PART_NO", "DIM", "DWG_NO", "GROUP_CD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  DDL for Index SMT_T001_TDID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LCDRA"."SMT_T001_TDID_PK" ON "LCDRA"."SMT_T001_TDID" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
--------------------------------------------------------
--  Constraints for Table T_MTDB_LEADTIME_DRW_MASTER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_LEADTIME_DRW_MASTER" ADD CONSTRAINT "T_MTDB_LEADTIME_DRW_MASTER_PK" PRIMARY KEY ("MT_MODEL", "TARGET_DS")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_MTDB_LEADTIME_DRW_MASTER" MODIFY ("TARGET_DS" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_LEADTIME_DRW_MASTER" MODIFY ("MT_MODEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MTDB_CTRLDIE_TRANSFER_PART
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER_PART" ADD CONSTRAINT "T_MTDB_CTRLDIE_TRANSFER_PA_PK" PRIMARY KEY ("MT_MODEL", "PART_NO", "DWG_NO", "GROUP_CD", "DIM")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER_PART" MODIFY ("DIM" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER_PART" MODIFY ("DEPT_UPLOAD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER_PART" MODIFY ("DWG_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER_PART" MODIFY ("PART_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER_PART" MODIFY ("MT_MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER_PART" MODIFY ("GROUP_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EX_SLANE_PRODUCTION_PLAN
--------------------------------------------------------

  ALTER TABLE "LCDRA"."EX_SLANE_PRODUCTION_PLAN" ADD CONSTRAINT "EX_SLANE_PRODUCTION_PLAN_PK" PRIMARY KEY ("FACTORY_CD", "MODEL_SEQ", "PLAN_DATE", "SHIFT", "LINE_CD", "PRIORITY", "MERCHANDISE_CD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."EX_SLANE_PRODUCTION_PLAN" MODIFY ("PLAN_QTY" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."EX_SLANE_PRODUCTION_PLAN" MODIFY ("MERCHANDISE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."EX_SLANE_PRODUCTION_PLAN" MODIFY ("PRIORITY" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."EX_SLANE_PRODUCTION_PLAN" MODIFY ("CELL_NAME" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."EX_SLANE_PRODUCTION_PLAN" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."EX_SLANE_PRODUCTION_PLAN" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."EX_SLANE_PRODUCTION_PLAN" MODIFY ("PLAN_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."EX_SLANE_PRODUCTION_PLAN" MODIFY ("MODEL_SEQ" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."EX_SLANE_PRODUCTION_PLAN" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WEBLCD_T000_USER_CONTROL
--------------------------------------------------------

  ALTER TABLE "LCDRA"."WEBLCD_T000_USER_CONTROL" ADD CONSTRAINT "WEBLCD_T000_USER_CONTROL_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."WEBLCD_T000_USER_CONTROL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_LCD_WARNNINGLIST
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_LCD_WARNNINGLIST" MODIFY ("CD_SPLY" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_LCD_WARNNINGLIST" MODIFY ("PD_PO_ISSUE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_LCD_WARNNINGLIST" MODIFY ("QT_NET_EFFCTV_INVNTRY" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_LCD_WARNNINGLIST" MODIFY ("QT_EFFCTV_INVNTRY" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_LCD_WARNNINGLIST" MODIFY ("QT_NET_DEMAND" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_LCD_WARNNINGLIST" MODIFY ("SUM_QT_DEMAND" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_LCD_WARNNINGLIST" MODIFY ("QT_ORDER" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_LCD_WARNNINGLIST" MODIFY ("DT_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_LCD_WARNNINGLIST" MODIFY ("CD_USE_BLOCK" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_LCD_WARNNINGLIST" MODIFY ("NO_ADJ_DIM" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_LCD_WARNNINGLIST" MODIFY ("NO_PARTS" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_DAISHA_PROGRESSIVE
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" ADD CONSTRAINT "T_SLANE_DAISHA_PROGRESSIVE_PK" PRIMARY KEY ("FACTORY_CD", "MODEL", "PLAN_DATE", "SHIFT", "LINE_CD", "CELL_NAME", "DAISHA_TYPE", "DAISHA_GROUP", "SEQ")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("DESTINATION" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("MERCHANDISE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("ROUND" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("SEQ" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("DAISHA_GROUP" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("DAISHA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("CELL_NAME" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("PLAN_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_PROGRESSIVE" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_PROGRESS_ORDER_DAISHA
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" ADD CONSTRAINT "T_SLANE_PROGRESS_KT_DAISHA_PK" PRIMARY KEY ("FACTORY_CD", "PLAN_DATE", "MODEL", "SHIFT", "LINE_CD", "DAISHA_TYPE", "DAISHA_GROUP", "ROUND", "ORDER_NO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("ORDER_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("ROUND" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("DAISHA_GROUP" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("DAISHA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("PLAN_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PROGRESS_ORDER_DAISHA" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PODETAILFROMSIAM
--------------------------------------------------------

  ALTER TABLE "LCDRA"."PODETAILFROMSIAM" ADD CONSTRAINT "TABLE1_PK" PRIMARY KEY ("ID", "NO_PO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."PODETAILFROMSIAM" MODIFY ("NO_PO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."PODETAILFROMSIAM" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LCDINFO_F1_T002_SUPP_NAME
--------------------------------------------------------

  ALTER TABLE "LCDRA"."LCDINFO_F1_T002_SUPP_NAME" ADD CONSTRAINT "LCDINFO_T_SUPP_NAME_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."LCDINFO_F1_T002_SUPP_NAME" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LCDINFO_F1_T001_PART_LIST
--------------------------------------------------------

  ALTER TABLE "LCDRA"."LCDINFO_F1_T001_PART_LIST" ADD CONSTRAINT "LCDINFO_F1_T001_PART_LIST_PK" PRIMARY KEY ("ID_PARTS_LIST")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."LCDINFO_F1_T001_PART_LIST" MODIFY ("ID_PARTS_LIST" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WEBLCD_T001_ISO_DOC_CONTROL
--------------------------------------------------------

  ALTER TABLE "LCDRA"."WEBLCD_T001_ISO_DOC_CONTROL" ADD CONSTRAINT "WEBLCD_T001_ISO_DOC_CONTR_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."WEBLCD_T001_ISO_DOC_CONTROL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LCDINFO_F1_T003_PARTS_NAME
--------------------------------------------------------

  ALTER TABLE "LCDRA"."LCDINFO_F1_T003_PARTS_NAME" ADD CONSTRAINT "LCDINFO_T003_PARTS_NAME_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."LCDINFO_F1_T003_PARTS_NAME" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MTDB_EXTRA_ORDER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_EXTRA_ORDER" ADD CONSTRAINT "T_MTDB_EXTRA_ORDER_PK" PRIMARY KEY ("MT_MODEL", "MODEL", "MTM_NO", "SUB", "PART_NO", "SUP_CD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_MTDB_EXTRA_ORDER" MODIFY ("SUP_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_EXTRA_ORDER" MODIFY ("PART_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_EXTRA_ORDER" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_EXTRA_ORDER" MODIFY ("MT_MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_EXTRA_ORDER" MODIFY ("SUB" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_EXTRA_ORDER" MODIFY ("MTM_NO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LCDINFO_F1_T006_UPLOAD_IMAGE
--------------------------------------------------------

  ALTER TABLE "LCDRA"."LCDINFO_F1_T006_UPLOAD_IMAGE" ADD CONSTRAINT "LCDINFO_F1_T006_UPLOAD_IMA_PK" PRIMARY KEY ("ID_UPIMG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."LCDINFO_F1_T006_UPLOAD_IMAGE" MODIFY ("ID_UPIMG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TEST_REGIS
--------------------------------------------------------

  ALTER TABLE "LCDRA"."TEST_REGIS" ADD CONSTRAINT "TEST_REGIS_PK" PRIMARY KEY ("EMP_NO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."TEST_REGIS" MODIFY ("EMP_NO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MTDB_DS_JUDGE_LT_MASTER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_DS_JUDGE_LT_MASTER" MODIFY ("DEPT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_DS_JUDGE_LT_MASTER" ADD CONSTRAINT "T_MTDB_DIE_JUDGE_LT_MASTER_PK" PRIMARY KEY ("DEPT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MINSTOCK_T002_HISTORY_CONTROL
--------------------------------------------------------

  ALTER TABLE "LCDRA"."MINSTOCK_T002_HISTORY_CONTROL" ADD CONSTRAINT "MINSTOCK_T002_HISTORY_CON_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."MINSTOCK_T002_HISTORY_CONTROL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SHIP_ORD_COMMODITY_MASTER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SHIP_ORD_COMMODITY_MASTER" ADD CONSTRAINT "T_SHIP_ORD_COMMODITY_MAST_PK" PRIMARY KEY ("PART_NO", "DIM_NO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SHIP_ORD_COMMODITY_MASTER" MODIFY ("DIM_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SHIP_ORD_COMMODITY_MASTER" MODIFY ("PART_NO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EX_SLANE_APLAN_PLAN
--------------------------------------------------------

  ALTER TABLE "LCDRA"."EX_SLANE_APLAN_PLAN" ADD CONSTRAINT "EX_SLANE_APLAN_PLAN_PK" PRIMARY KEY ("FACTORY_CD", "MODEL_SEQ", "PLAN_DATE", "SHIFT", "LINE_CD", "PRIORITY", "MERCHANDISE_CD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."EX_SLANE_APLAN_PLAN" MODIFY ("PLAN_QTY" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."EX_SLANE_APLAN_PLAN" MODIFY ("MERCHANDISE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."EX_SLANE_APLAN_PLAN" MODIFY ("PRIORITY" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."EX_SLANE_APLAN_PLAN" MODIFY ("CELL_NAME" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."EX_SLANE_APLAN_PLAN" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."EX_SLANE_APLAN_PLAN" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."EX_SLANE_APLAN_PLAN" MODIFY ("PLAN_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."EX_SLANE_APLAN_PLAN" MODIFY ("MODEL_SEQ" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."EX_SLANE_APLAN_PLAN" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MTDB_STATUS
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_STATUS" ADD CONSTRAINT "T_MTDB_STATUS_PK" PRIMARY KEY ("STATUS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_MTDB_STATUS" MODIFY ("STATUS_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MTDB_MASTER_STATUS
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_MASTER_STATUS" ADD CONSTRAINT "T_MTDB_MASTER_STATUS_PK" PRIMARY KEY ("STATUS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_MTDB_MASTER_STATUS" MODIFY ("STATUS_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MTDB_SIAM
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_SIAM" ADD CONSTRAINT "T_MTDB_SIAM_PK" PRIMARY KEY ("MT_MODEL", "PART_NO", "DIM", "DWG_NO", "GROUP_CD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_MTDB_SIAM" MODIFY ("GROUP_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_SIAM" MODIFY ("DWG_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_SIAM" MODIFY ("DIM" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_SIAM" MODIFY ("PART_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_SIAM" MODIFY ("MT_MODEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_DNM_WORKSHIFT_N_CAP
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_N_CAP" ADD CONSTRAINT "T_SLANE_DNM_WORKSHIFT_N_CAP_PK" PRIMARY KEY ("FACTORY_CD", "PLAN_DATE", "LINE_CD", "SHIFT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_N_CAP" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_N_CAP" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_N_CAP" MODIFY ("PLAN_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_N_CAP" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_METRIX_PART_MASTER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" ADD CONSTRAINT "T_SLANE_METRIX_PART_MASTER_PK" PRIMARY KEY ("FACTORY_CD", "MODEL", "DAISHA_TYPE", "DAISHA_GROUP", "PART_NO", "DIM_NO", "SUPP_CD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" MODIFY ("SUPP_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" MODIFY ("DIM_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" MODIFY ("PART_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" MODIFY ("DAISHA_GROUP" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" MODIFY ("DAISHA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_METRIX_PART_MASTER" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MTDB_USER_LOGIN
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_USER_LOGIN" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_USER_LOGIN" ADD CONSTRAINT "T_MTDB_USER_LOGIN_PK" PRIMARY KEY ("USER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_SLANE_REC_EMPTY_DAISHA
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" ADD CONSTRAINT "T_SLANE_REC_EMPTY_DAISHA_PK" PRIMARY KEY ("FACTORY_CD", "MODEL", "CAL_DATE", "SHIFT", "LINE_CD", "DAISHA_TYPE", "DAISHA_GROUP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" MODIFY ("TOTAL_EMPTY" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" MODIFY ("DAISHA_GROUP" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" MODIFY ("DAISHA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" MODIFY ("CAL_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_REC_EMPTY_DAISHA" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MTDB_CTRLDIE_TRANSFER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER" MODIFY ("PART_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER" MODIFY ("MT_MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER" MODIFY ("DEPT_UPLOAD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER" ADD CONSTRAINT "T_MTDB_CTRLDIE_TRANSFER_PK" PRIMARY KEY ("MT_MODEL", "PART_NO", "MOLD_NO", "DEPT_UPLOAD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER" MODIFY ("MOLD_NO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MTDB_MASTER_SERIES
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_MASTER_SERIES" MODIFY ("MT_MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_MASTER_SERIES" ADD CONSTRAINT "T_MTDB_MASTER_SERIES_PK" PRIMARY KEY ("MT_MODEL", "MODEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_MTDB_MASTER_SERIES" MODIFY ("MODEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TEST_USER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."TEST_USER" ADD CONSTRAINT "TEST_USER_PK" PRIMARY KEY ("EMP_NO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."TEST_USER" MODIFY ("EMP_NO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_CALCULATE_ACTUAL
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_CALCULATE_ACTUAL" ADD CONSTRAINT "t_slane_calculate_actual_PK" PRIMARY KEY ("FACTORY_CD", "PLAN_DATE", "MODEL", "SHIFT", "LINE_CD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_CALCULATE_ACTUAL" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_CALCULATE_ACTUAL" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_CALCULATE_ACTUAL" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_CALCULATE_ACTUAL" MODIFY ("PLAN_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_CALCULATE_ACTUAL" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_USER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_USER" MODIFY ("EMP_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_USER" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_DAISHA_MASTER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" ADD CONSTRAINT "T_SLANE_DAISHA_MASTER_PK" PRIMARY KEY ("FACTORY_CD", "MODEL_SEQ", "MODEL", "LINE_CD", "DAISHA_TYPE", "DAISHA_GROUP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" MODIFY ("MAX" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" MODIFY ("MIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" MODIFY ("DAISHA_GROUP" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" MODIFY ("DAISHA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" MODIFY ("MODEL_SEQ" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DAISHA_MASTER" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MTDB_WORKING_DAY_MASTER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_WORKING_DAY_MASTER" ADD CONSTRAINT "T_MTDB_WORKING_DAY_MASTER_PK" PRIMARY KEY ("DT_WORK")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_MTDB_WORKING_DAY_MASTER" MODIFY ("DT_WORK" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SHIP_ORD_ADDRESS_MASTER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SHIP_ORD_ADDRESS_MASTER" ADD CONSTRAINT "T_SHIP_ORD_ADDRESS_MASTER_PK" PRIMARY KEY ("COMPANY_CD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SHIP_ORD_ADDRESS_MASTER" MODIFY ("COMPANY_NM" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SHIP_ORD_ADDRESS_MASTER" MODIFY ("COMPANY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MTDB_CTRLDIE_TRANSFER2
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER2" ADD CONSTRAINT "T_MTDB_CTRLDIE_TRANSFER2_PK" PRIMARY KEY ("MT_MODEL", "PART_NO", "MOLD_NO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER2" MODIFY ("DEPT_UPLOAD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER2" MODIFY ("MOLD_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER2" MODIFY ("PART_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_CTRLDIE_TRANSFER2" MODIFY ("MT_MODEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MTDB_MASTER_MT_ORDER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_MASTER_MT_ORDER" ADD CONSTRAINT "T_MTDB_MASTER_MT_ORDER_PK" PRIMARY KEY ("MT_MODEL", "MODEL", "PART_NO", "DIM", "DWG_NO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_MTDB_MASTER_MT_ORDER" MODIFY ("DWG_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_MASTER_MT_ORDER" MODIFY ("DIM" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_MASTER_MT_ORDER" MODIFY ("PART_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_MASTER_MT_ORDER" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_MASTER_MT_ORDER" MODIFY ("MT_MODEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WEBLCD_T002_SCHEDULE_CONTROL
--------------------------------------------------------

  ALTER TABLE "LCDRA"."WEBLCD_T002_SCHEDULE_CONTROL" ADD CONSTRAINT "WEBLCD_T002_SCHEDULE_CONT_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."WEBLCD_T002_SCHEDULE_CONTROL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MTDB_ROLE
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_ROLE" ADD CONSTRAINT "T_MTDB_ROLE_PK" PRIMARY KEY ("ROLE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_MTDB_ROLE" MODIFY ("ROLE_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_DNM_OVERTIME_CD
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_DNM_OVERTIME_CD" ADD CONSTRAINT "T_SLANE_DNM_OVERTIME_CD_PK" PRIMARY KEY ("FACTORY_CD", "OVERTIME_CD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_DNM_OVERTIME_CD" MODIFY ("OVERTIME_END" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_OVERTIME_CD" MODIFY ("OVERTIME_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_OVERTIME_CD" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_OVERTIME_CD" MODIFY ("OVERTIME_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_OVERTIME_CD" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_TEMP_PROCESS
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("PROCESS_ID" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("LOCATION" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("DESTINATION" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("ROUND" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("SEQ" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("DAISHA_GROUP" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("DAISHA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("PLAN_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_TEMP_PROCESS" MODIFY ("MODEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_PRODUCTION_PLAN
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" ADD CONSTRAINT "T_SLANE_PRODUCTION_PLAN_PK" PRIMARY KEY ("FACTORY_CD", "MODEL_SEQ", "MODEL", "PLAN_DATE", "SHIFT", "LINE_CD", "PRIORITY", "MERCHANDISE_CD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("PLAN_QTY" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("MERCHANDISE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("PRIORITY" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("CELL_NAME" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("LINE_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("PLAN_DATE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("MODEL_SEQ" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_PRODUCTION_PLAN" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SHIP_ORD_ORIGIN_MASTER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SHIP_ORD_ORIGIN_MASTER" ADD CONSTRAINT "T_SHIP_ORD_ORIGIN_MASTER_PK" PRIMARY KEY ("ORIGIN", "SUB_ORIGIN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SHIP_ORD_ORIGIN_MASTER" MODIFY ("ORIGIN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SMT_T001_TDID
--------------------------------------------------------

  ALTER TABLE "LCDRA"."SMT_T001_TDID" ADD CONSTRAINT "SMT_T001_TDID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."SMT_T001_TDID" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MTDB_MASTER_USAGE
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_MASTER_USAGE" MODIFY ("USAGE_TYPE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_MASTER_USAGE" MODIFY ("DIM" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_MASTER_USAGE" MODIFY ("PART_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_MASTER_USAGE" MODIFY ("MT_MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_MASTER_USAGE" ADD CONSTRAINT "T_MTDB_MASTER_USAGE_PK" PRIMARY KEY ("MT_MODEL", "PART_NO", "DIM", "USAGE_TYPE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_SLANE_DNM_WORKSHIFT_CD
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" ADD CONSTRAINT "T_SLANE_DNM_WORKSHIFT_CD_PK" PRIMARY KEY ("FACTORY_CD", "WORKSHIFT_CD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORK4_END" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORK4_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("BREAK3_END" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("BREAK3_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORK3_END" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORK3_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("BREAK2_END" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("BREAK2_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORK2_END" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORK2_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("BREAK1_END" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("BREAK1_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORK1_END" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORK1_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("SHIFT" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("WORKSHIFT_CD" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DNM_WORKSHIFT_CD" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MTDB_DS_LEADTIME_MASTER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_DS_LEADTIME_MASTER" MODIFY ("DS_TIMES" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_DS_LEADTIME_MASTER" MODIFY ("DS_CTGY" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_MTDB_MASTER_PARTLIST
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_MTDB_MASTER_PARTLIST" ADD CONSTRAINT "T_MTDB_MASTER_PARTLIST_PK" PRIMARY KEY ("MT_MODEL", "PART_NO", "DIM", "ORDER_BY")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_MTDB_MASTER_PARTLIST" MODIFY ("ORDER_BY" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_MASTER_PARTLIST" MODIFY ("DIM" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_MASTER_PARTLIST" MODIFY ("PART_NO" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_MTDB_MASTER_PARTLIST" MODIFY ("MT_MODEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table T_SLANE_DELIVERY_CYCLE_MASTER
--------------------------------------------------------

  ALTER TABLE "LCDRA"."T_SLANE_DELIVERY_CYCLE_MASTER" ADD CONSTRAINT "T_SLANE_DELIVERY_CYCLE_MAS_PK" PRIMARY KEY ("FACTORY_CD", "MODEL", "TYPE", "ZONE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE;
  ALTER TABLE "LCDRA"."T_SLANE_DELIVERY_CYCLE_MASTER" MODIFY ("CYCLE_TIME" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DELIVERY_CYCLE_MASTER" MODIFY ("ZONE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DELIVERY_CYCLE_MASTER" MODIFY ("TYPE" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DELIVERY_CYCLE_MASTER" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "LCDRA"."T_SLANE_DELIVERY_CYCLE_MASTER" MODIFY ("FACTORY_CD" NOT NULL ENABLE);
--------------------------------------------------------
--  DDL for Function FN_UPLOAD_FILE_DIE_TRANSFER
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "LCDRA"."FN_UPLOAD_FILE_DIE_TRANSFER" (pMT_MODEL VARCHAR2,
                                     pPART_NO VARCHAR2,
                                     pDIE_MAKER VARCHAR2,
                                     pINJ_PLACE_DS VARCHAR2,
                                     pMOLD_NO VARCHAR2,
                                     pDS_FINAL_RESULT VARCHAR2,
                                     pETA_TIMES VARCHAR2,
                                     pACTUAL_DWG VARCHAR2,
                                     pPLAN_TRY_DT VARCHAR2,
                                     pPLAN_DS_DT VARCHAR2,
                                     pPTQA_REC_DT VARCHAR2,
                                     pPE_REC_DT VARCHAR2,
                                     pJUD_FN_DT VARCHAR2,
                                     pSCAN_DT VARCHAR2,
                                     pRESULT_DS VARCHAR2,
                                     pDWG_NO_DS VARCHAR2,
                                     pJUD_FN_DT_DS VARCHAR2,
                                     pSCAN_DATE_DS VARCHAR2,
                                     pDIE_NEED_TRANSFER VARCHAR2,
                                     pPLAN_ETD VARCHAR2,
                                     pPLAN_ETA VARCHAR2,
                                     pACT_ETA VARCHAR2,
                                     pTRANSFER_BY VARCHAR2,
                                     pUPDATE_BY VARCHAR2,
                                     pSTATUS_ID VARCHAR2,
                                     pDEPT_UPLOAD VARCHAR2) 
                                     RETURN VARCHAR2 AS 

  vResultReturn VARCHAR(10);
  pPTQA_REC_DT_DS     T_MTDB_CTRLDIE_TRANSFER2.PTQA_REC_DT_DS%TYPE;
  pPE_REC_DATE_DS     T_MTDB_CTRLDIE_TRANSFER2.PE_REC_DATE_DS%TYPE;
  pJUD_FN_DT_D        T_MTDB_CTRLDIE_TRANSFER2.JUD_FN_DT_D%TYPE;
  pSCAN_DT_DS         T_MTDB_CTRLDIE_TRANSFER2.SCAN_DT_DS%TYPE;
  pRESULT_DS_N1       T_MTDB_CTRLDIE_TRANSFER2.RESULT_DS_N1%TYPE;
  pDWG_NO_DS_N1       T_MTDB_CTRLDIE_TRANSFER2.DWG_NO_DS_N1%TYPE;
  pJUD_FN_DT_DS_N1    T_MTDB_CTRLDIE_TRANSFER2.JUD_FN_DT_DS_N1%TYPE;
  pSCAN_DATE_DS_N1    T_MTDB_CTRLDIE_TRANSFER2.SCAN_DATE_DS_N1%TYPE;
 
 BEGIN 
    IF pDEPT_UPLOAD = 'PTQA_DS' THEN
       IF pDS_FINAL_RESULT = 'NG' THEN 
           pPTQA_REC_DT_DS := NULL;
           pPE_REC_DATE_DS := NULL;
           pJUD_FN_DT_D := NULL;
           pSCAN_DT_DS := NULL;
           pRESULT_DS_N1 := pDS_FINAL_RESULT;
           pDWG_NO_DS_N1 := pACTUAL_DWG;
           pJUD_FN_DT_DS_N1 := pJUD_FN_DT;
           pSCAN_DATE_DS_N1 := pSCAN_DT;
       END IF;
               
       UPDATE T_MTDB_CTRLDIE_TRANSFER2 SET 
          DIE_MAKER = pDIE_MAKER,
          INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          DS_FINAL_RESULT = pDS_FINAL_RESULT,
          ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          --PLAN_TRY_DT = pPLAN_TRY_DT,
          --PLAN_DS_DT = pPLAN_DS_DT,
          PTQA_REC_DT = pPTQA_REC_DT,
            PTQA_REC_DT_DS = pPTQA_REC_DT_DS,
          PE_REC_DT = pPE_REC_DT,
            PE_REC_DATE_DS = pPE_REC_DATE_DS,
          JUD_FN_DT = pJUD_FN_DT,
            JUD_FN_DT_D = pJUD_FN_DT_D,
          SCAN_DT = pSCAN_DT,
            SCAN_DT_DS = pSCAN_DT_DS,
          RESULT_DS = pRESULT_DS,
            RESULT_DS_N1 = pRESULT_DS_N1,
          DWG_NO_DS = pDWG_NO_DS,
            DWG_NO_DS_N1 = pDWG_NO_DS_N1,
          JUD_FN_DT_DS = pJUD_FN_DT_DS,
            JUD_FN_DT_DS_N1 = pJUD_FN_DT_DS_N1,
          SCAN_DATE_DS = pSCAN_DATE_DS,
            SCAN_DATE_DS_N1 = pSCAN_DATE_DS_N1,
          -- DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          -- PLAN_ETD = pPLAN_ETD,
          -- PLAN_ETA = pPLAN_ETA,
          --ACT_ETA = pACT_ETA,
          -- TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY,
          DEPT_UPLOAD = pDEPT_UPLOAD
       WHERE MT_MODEL = pMT_MODEL
       AND PART_NO = pPART_NO 
       AND MOLD_NO = pMOLD_NO;
            
       vResultReturn := 'OK';
     
    






    END IF;
  RETURN  vResultReturn ;
END FN_UPLOAD_FILE_DIE_TRANSFER;

/
--------------------------------------------------------
--  DDL for Function GET_TIME_PICKING
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "LCDRA"."GET_TIME_PICKING" (pMODEL VARCHAR2,
                           pTYPE VARCHAR2,
                           pPLAN_DATE VARCHAR2,
                           pSHIFT VARCHAR2,
                           pCAL_TIME VARCHAR2,
                           pLINE VARCHAR2,
                           pZONE VARCHAR2)
                           RETURN VARCHAR2 AS 
                   
  REC_TIME32    V_SLANE_WORKING_TIME_TEST%ROWTYPE;
  REC_TIME24    V_SLANE_WORKING_TIME_TEST%ROWTYPE;
  vDATE         VARCHAR(8);
  --vTIME         VARCHAR(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
  vTIME    VARCHAR2(8) := '00:00:10';
  --vCHECK        NUMBER;
  vCYCLE_P      NUMBER;
  vTIME_PICK    VARCHAR(16);
  vBREAK        VARCHAR(10);
  vCAL_TIME32   VARCHAR(8);
  vBREAK2_BEGIN VARCHAR(5);
  vBREAK2_END   VARCHAR(5);
  vBREAK3_BEGIN VARCHAR(5);
  vBREAK4_BEGIN VARCHAR(5);
  vBREAK4_END   VARCHAR(5);
  vOVER_TIME    VARCHAR(5);
  
  CURSOR C1 IS SELECT DISTINCT MODEL, SHIFT,
               CASE WHEN SUBSTR(BREAK1_BEGIN,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK1_BEGIN,0,2)+24||SUBSTR(BREAK1_BEGIN,3,3)
                ELSE BREAK1_BEGIN END AS BREAK1_BEGIN,
                
               CASE WHEN SUBSTR(BREAK1_END,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK1_END,0,2)+24||SUBSTR(BREAK1_END,3,3)
                ELSE BREAK1_END END AS BREAK1_END,
                
               CASE WHEN SUBSTR(BREAK2_BEGIN,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK2_BEGIN,0,2)+24||SUBSTR(BREAK2_BEGIN,3,3)
                ELSE BREAK2_BEGIN END AS BREAK2_BEGIN,
                
               CASE WHEN SUBSTR(BREAK2_END,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK2_END,0,2)+24||SUBSTR(BREAK2_END,3,3)
                ELSE BREAK2_END END AS BREAK2_END,
                
               CASE WHEN SUBSTR(BREAK3_BEGIN,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK3_BEGIN,0,2)+24||SUBSTR(BREAK3_BEGIN,3,3)
                ELSE BREAK3_BEGIN END AS BREAK3_BEGIN,
                
               CASE WHEN SUBSTR(BREAK3_END,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK3_END,0,2)+24||SUBSTR(BREAK3_END,3,3)
                ELSE BREAK3_END END AS BREAK3_END
               FROM V_SLANE_WORKING_TIME_TEST
               WHERE MODEL = pMODEL
               AND SHIFT = pSHIFT;
               
 CURSOR C2 IS SELECT DISTINCT MODEL, SHIFT,BREAK1_BEGIN,BREAK1_END,BREAK2_BEGIN,BREAK2_END,BREAK3_BEGIN,BREAK3_END
               FROM V_SLANE_WORKING_TIME_TEST
               WHERE MODEL = pMODEL
               AND SHIFT = pSHIFT;
BEGIN
  -- Set vDATE
  IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
     vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
  ELSE
     vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
  END IF;
  
  IF pTYPE = 'KT' THEN
      SELECT CYCLE_TIME INTO vCYCLE_P
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'KITTING'
      AND ZONE = pZONE;
  ELSE
      SELECT CYCLE_TIME INTO vCYCLE_P
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'BLANE'
      AND ZONE = pZONE;
  END IF;

  /*IF pLINE IS NULL THEN
    SELECT COUNT(*) INTO vOVER_TIME
    FROM V_SLANE_WORKING_TIME_TEST
    WHERE MODEL = pMODEL
    AND PLAN_DATE = '20180716'
    AND SHIFT = pSHIFT
    AND OVERTIME_CD_DAY IS NOT NULL
    --AND LINE_CD = pLINE
    GROUP BY MODEL, OVERTIME_MIN; 
  ELSE 
    SELECT COUNT(*) INTO vOVER_TIME
    FROM V_SLANE_WORKING_TIME_TEST
    WHERE MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND SHIFT = pSHIFT
    AND OVERTIME_CD_DAY IS NOT NULL
    AND LINE_CD = pLINE
    GROUP BY OVERTIME_MIN;
  END IF;*/
  
    BEGIN
      FOR REC_TIME32 IN C1 LOOP
        
        FOR REC_TIME24 IN C2 LOOP
        
           IF SUBSTR(pCAL_TIME,0,2) BETWEEN '00' AND '07' THEN
              vCAL_TIME32 := SUBSTR(pCAL_TIME,0,2)+24||SUBSTR(pCAL_TIME,3,3);
              vBREAK3_BEGIN := TO_CHAR(TO_DATE(REC_TIME24.BREAK3_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
              
              IF REC_TIME32.BREAK2_BEGIN > '24:00' THEN
                vBREAK2_BEGIN := TO_CHAR(TO_DATE(SUBSTR(REC_TIME32.BREAK2_BEGIN,0,2)-24||SUBSTR(REC_TIME32.BREAK2_BEGIN,3,3),'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI'); 
              ELSE
                vBREAK2_BEGIN := TO_CHAR(TO_DATE(REC_TIME32.BREAK2_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
              END IF;
              
              vBREAK2_END   := REC_TIME32.BREAK2_END;
              
              vBREAK4_BEGIN := TO_CHAR(TO_DATE('05:00','HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
              vBREAK4_BEGIN := SUBSTR(vBREAK4_BEGIN,0,2)+24||SUBSTR(vBREAK4_BEGIN,3,3);
              vBREAK4_END := TO_CHAR(TO_DATE('05:20','HH24:MI'),'HH24:MI');
              vBREAK4_END := SUBSTR(vBREAK4_END,0,2)+24||SUBSTR(vBREAK4_END,3,3);
              
              IF pSHIFT = 'N' THEN
                IF SUBSTR(vBREAK3_BEGIN,0,2) BETWEEN '00' AND '07' THEN
                  vBREAK3_BEGIN := SUBSTR(vBREAK3_BEGIN,0,2)+24||SUBSTR(vBREAK3_BEGIN,3,3);
                END IF;
              END IF;
              
            ELSE
              IF pSHIFT = 'D' THEN
                vCAL_TIME32 := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS'),'HH24:MI');
                vBREAK2_BEGIN := TO_CHAR(TO_DATE(REC_TIME24.BREAK2_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
                vBREAK2_END   := TO_CHAR(TO_DATE(REC_TIME24.BREAK2_END,'HH24:MI'),'HH24:MI');
                
                vBREAK3_BEGIN := TO_CHAR(TO_DATE(REC_TIME24.BREAK3_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
                
                vBREAK4_BEGIN := TO_CHAR(TO_DATE('17:00','HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
                vBREAK4_END := TO_CHAR(TO_DATE('17:20','HH24:MI'),'HH24:MI');
              ELSE 
                vCAL_TIME32 := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS'),'HH24:MI');
                --vCAL_TIME32 := SUBSTR(pCAL_TIME,0,2)+24||SUBSTR(pCAL_TIME,3,3);
                vBREAK2_BEGIN := TO_CHAR(TO_DATE(REC_TIME24.BREAK2_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
                
                IF vBREAK2_BEGIN >= '00:00' THEN
                vBREAK2_BEGIN := SUBSTR(vBREAK2_BEGIN,0,2)+24||SUBSTR(vBREAK2_BEGIN,3,3);
                END IF;
                
                vBREAK2_END   := REC_TIME32.BREAK2_END;
                /*vBREAK2_BEGIN := TO_CHAR(TO_DATE(REC_TIME24.BREAK1_END,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
                vBREAK2_END   := REC_TIME32.BREAK2_BEGIN;*/
              END IF;
              
           END IF;
      
          IF TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS'),'HH24:MI') >= TO_CHAR(TO_DATE(REC_TIME32.BREAK1_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI') AND TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS'),'HH24:MI') < REC_TIME32.BREAK1_END THEN
            vBREAK := (TO_DATE(REC_TIME24.BREAK1_END,'HH24:MI')-TO_DATE(REC_TIME24.BREAK1_BEGIN,'HH24:MI'))*1440;
            vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS') ; 
        
          ELSIF vCAL_TIME32 >= vBREAK2_BEGIN AND vCAL_TIME32 < vBREAK2_END THEN
            IF pSHIFT = 'D' THEN
              vBREAK := (TO_DATE(REC_TIME24.BREAK2_END,'HH24:MI')-TO_DATE(REC_TIME24.BREAK2_BEGIN,'HH24:MI'))*1440;
              vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS') ; 
            ELSE
              vBREAK := (TO_DATE(TO_CHAR(sysdate+1,'YYYYMMDD')||REC_TIME24.BREAK2_END,'YYYYMMDDHH24:MI')-TO_DATE(TO_CHAR(sysdate,'YYYYMMDD')||REC_TIME24.BREAK2_BEGIN,'YYYYMMDDHH24:MI'))*1440;
              vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS') ;
            END IF;
            
          ELSIF vCAL_TIME32 >= vBREAK3_BEGIN AND vCAL_TIME32 < REC_TIME32.BREAK3_END THEN
            vBREAK := (TO_DATE(REC_TIME24.BREAK3_END,'HH24:MI')-TO_DATE(REC_TIME24.BREAK3_BEGIN,'HH24:MI'))*1440;
            vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS') ; 
          
          ELSIF vCAL_TIME32 >= vBREAK4_BEGIN AND vCAL_TIME32 < vBREAK4_END THEN
            /*IF vOVER_TIME < 0 THEN
              vBREAK := '180';
              vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS'); 
            ELSE*/
              vBREAK := '20';
              vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS'); 
           -- END IF;
          ELSE
            vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P)),'HH24:MI:SS'); 
            
          END IF;
          
           IF vTIME_PICK >= '08:00:00' and vTIME_PICK < '23:59:59' THEN
               vTIME_PICK := TO_CHAR(TO_DATE(pPLAN_DATE,'YYYYMMDD'),'YYYYMMDD')||vTIME_PICK;
                            
           ELSE
               vTIME_PICK := TO_CHAR(TO_DATE(pPLAN_DATE,'YYYYMMDD')+1,'YYYYMMDD')||vTIME_PICK;
           END IF;
  
        END LOOP;
      END LOOP;
    END;
  RETURN vTIME_PICK;
  
  /*EXCEPTION
    WHEN NO_DATA_FOUND THEN
      vOVER_TIME := 0;*/
      
END GET_TIME_PICKING;

/
--------------------------------------------------------
--  DDL for Function GET_TIME_PICKING_TEST
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "LCDRA"."GET_TIME_PICKING_TEST" (pMODEL VARCHAR2,
                           pTYPE VARCHAR2,
                           pPLAN_DATE VARCHAR2,
                           pSHIFT VARCHAR2,
                           pCAL_TIME VARCHAR2,
                           pLINE VARCHAR2,
                           pZONE VARCHAR2)
                           RETURN VARCHAR2 AS 
                   
  REC_TIME32    V_SLANE_WORKING_TIME_TEST%ROWTYPE;
  REC_TIME24    V_SLANE_WORKING_TIME_TEST%ROWTYPE;
  vDATE         VARCHAR(8);
  --vTIME         VARCHAR(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
  vTIME    VARCHAR2(8) := '00:00:00';
  --vCHECK        NUMBER;
  vCYCLE_P      NUMBER;
  vTIME_PICK    VARCHAR(8);
  vBREAK        VARCHAR(10);
  vCAL_TIME32   VARCHAR(8);
  vBREAK3_BEGIN VARCHAR(5);
  vBREAK4_BEGIN VARCHAR(5);
  vBREAK4_END   VARCHAR(5);
  vOVER_TIME    VARCHAR(5);
  
  CURSOR C1 IS SELECT DISTINCT MODEL, SHIFT,
               CASE WHEN SUBSTR(BREAK1_BEGIN,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK1_BEGIN,0,2)+24||SUBSTR(BREAK1_BEGIN,3,3)
                ELSE BREAK1_BEGIN END AS BREAK1_BEGIN,
                
               CASE WHEN SUBSTR(BREAK1_END,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK1_END,0,2)+24||SUBSTR(BREAK1_END,3,3)
                ELSE BREAK1_END END AS BREAK1_END,
                
               CASE WHEN SUBSTR(BREAK2_BEGIN,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK2_BEGIN,0,2)+24||SUBSTR(BREAK2_BEGIN,3,3)
                ELSE BREAK2_BEGIN END AS BREAK2_BEGIN,
                
               CASE WHEN SUBSTR(BREAK2_END,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK2_END,0,2)+24||SUBSTR(BREAK2_END,3,3)
                ELSE BREAK2_END END AS BREAK2_END,
                
               CASE WHEN SUBSTR(BREAK3_BEGIN,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK3_BEGIN,0,2)+24||SUBSTR(BREAK3_BEGIN,3,3)
                ELSE BREAK3_BEGIN END AS BREAK3_BEGIN,
                
               CASE WHEN SUBSTR(BREAK3_END,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK3_END,0,2)+24||SUBSTR(BREAK3_END,3,3)
                ELSE BREAK3_END END AS BREAK3_END
               FROM V_SLANE_WORKING_TIME_TEST
               WHERE MODEL = pMODEL
               AND SHIFT = pSHIFT;
               
 CURSOR C2 IS SELECT DISTINCT MODEL, SHIFT,BREAK1_BEGIN,BREAK1_END,BREAK2_BEGIN,BREAK2_END,BREAK3_BEGIN,BREAK3_END
               FROM V_SLANE_WORKING_TIME_TEST
               WHERE MODEL = pMODEL
               AND SHIFT = pSHIFT;
BEGIN
  -- Set vDATE
  IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
     vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
  ELSE
     vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
  END IF;
  
  IF pTYPE = 'KT' THEN
      SELECT CYCLE_TIME INTO vCYCLE_P
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'KITTING'
      AND ZONE = pZONE;
  ELSE
      SELECT CYCLE_TIME INTO vCYCLE_P
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'BLANE'
      AND ZONE = pZONE;
  END IF;

  
  
    BEGIN
      FOR REC_TIME32 IN C1 LOOP
        
        FOR REC_TIME24 IN C2 LOOP
        
           IF SUBSTR(pCAL_TIME,0,2) BETWEEN '00' AND '07' THEN
              vCAL_TIME32 := SUBSTR(pCAL_TIME,0,2)+24||SUBSTR(pCAL_TIME,3,3);
              vBREAK3_BEGIN := TO_CHAR(TO_DATE(REC_TIME24.BREAK3_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
              
              vBREAK4_BEGIN := TO_CHAR(TO_DATE('05:00','HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
              vBREAK4_BEGIN := SUBSTR(vBREAK4_BEGIN,0,2)+24||SUBSTR(vBREAK4_BEGIN,3,3);
              vBREAK4_END := TO_CHAR(TO_DATE('05:20','HH24:MI'),'HH24:MI');
              vBREAK4_END := SUBSTR(vBREAK4_BEGIN,0,2)+24||SUBSTR(vBREAK4_BEGIN,3,3);
              
              IF pSHIFT = 'N' THEN
                IF SUBSTR(vBREAK3_BEGIN,0,2) BETWEEN '00' AND '07' THEN
                  vBREAK3_BEGIN := SUBSTR(vBREAK3_BEGIN,0,2)+24||SUBSTR(vBREAK3_BEGIN,3,3);
                END IF;
              END IF;
            ELSE
              IF pSHIFT = 'D' THEN
              vCAL_TIME32 := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS'),'HH24:MI');
              vBREAK3_BEGIN := TO_CHAR(TO_DATE(REC_TIME24.BREAK3_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
              
              vBREAK4_BEGIN := TO_CHAR(TO_DATE('17:00','HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI');
              vBREAK4_END := TO_CHAR(TO_DATE('17:20','HH24:MI'),'HH24:MI');
              END IF;
           END IF;
      
          IF TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS'),'HH24:MI') >= TO_CHAR(TO_DATE(REC_TIME32.BREAK1_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI') AND TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS'),'HH24:MI') < REC_TIME32.BREAK1_END THEN
            vBREAK := (TO_DATE(REC_TIME24.BREAK1_END,'HH24:MI')-TO_DATE(REC_TIME24.BREAK1_BEGIN,'HH24:MI'))*1440;
            vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS') ; 
        
          ELSIF TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS'),'HH24:MI') >= TO_CHAR(TO_DATE(REC_TIME24.BREAK2_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI') AND TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS'),'HH24:MI') < REC_TIME24.BREAK2_END THEN
            IF pSHIFT = 'D' THEN
              vBREAK := (TO_DATE(REC_TIME24.BREAK2_END,'HH24:MI')-TO_DATE(REC_TIME24.BREAK2_BEGIN,'HH24:MI'))*1440;
              vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS') ; 
            ELSE
              vBREAK := (TO_DATE(TO_CHAR(sysdate+1,'YYYYMMDD')||REC_TIME24.BREAK2_END,'YYYYMMDDHH24:MI')-TO_DATE(TO_CHAR(sysdate,'YYYYMMDD')||REC_TIME24.BREAK2_BEGIN,'YYYYMMDDHH24:MI'))*1440;
              vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS') ;
            END IF;
            
          ELSIF vCAL_TIME32 >= vBREAK3_BEGIN AND vCAL_TIME32 < REC_TIME32.BREAK3_END THEN
            vBREAK := (TO_DATE(REC_TIME24.BREAK3_END,'HH24:MI')-TO_DATE(REC_TIME24.BREAK3_BEGIN,'HH24:MI'))*1440;
            vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS') ; 
          
          ELSIF vCAL_TIME32 >= vBREAK4_BEGIN AND vCAL_TIME32 < vBREAK4_END THEN
            /*IF vOVER_TIME < 0 THEN
              vBREAK := '180';
              vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS'); 
            ELSE*/
              vBREAK := '20';
              vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P+vBREAK)),'HH24:MI:SS'); 
           -- END IF;
          ELSE
            vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.0006945 * (vCYCLE_P)),'HH24:MI:SS'); 
            
          END IF;
        END LOOP;
      END LOOP;
    END;
  RETURN vTIME_PICK;
  
  /*EXCEPTION
    WHEN NO_DATA_FOUND THEN
      vOVER_TIME := 0;*/
      
END GET_TIME_PICKING_TEST;

/
--------------------------------------------------------
--  DDL for Function GET_TIME_TEST_PICKING
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "LCDRA"."GET_TIME_TEST_PICKING" (pMODEL VARCHAR2,
                           pTYPE VARCHAR2,
                           pPLAN_DATE VARCHAR2,
                           pSHIFT VARCHAR2,
                           --pCAL_TIME VARCHAR2,
                           pLINE  VARCHAR2,
                           pZONE VARCHAR2)
                           RETURN VARCHAR2 AS 
                   
  REC_TIME32    V_SLANE_WORKING_TIME_TEST%ROWTYPE;
  REC_TIME24    V_SLANE_WORKING_TIME_TEST%ROWTYPE;
  vDATE         VARCHAR(8);
  vTIME         VARCHAR(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
  vCHECK        NUMBER;
  vCYCLE_P      NUMBER;
  vBREAK        VARCHAR(20);
  vTIME_PICK    VARCHAR(5);
  vTEST         VARCHAR(5);
  pCAL_TIME     VARCHAR(10) := '10:00:55';
  CURSOR C1 IS SELECT DISTINCT MODEL, SHIFT,
               CASE WHEN SUBSTR(BREAK1_BEGIN,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK1_BEGIN,0,2)+24||SUBSTR(BREAK1_BEGIN,3,3)
                ELSE BREAK1_BEGIN END AS BREAK1_BEGIN,
                
               CASE WHEN SUBSTR(BREAK1_END,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK1_END,0,2)+24||SUBSTR(BREAK1_END,3,3)
                ELSE BREAK1_END END AS BREAK1_END,
                
               CASE WHEN SUBSTR(BREAK2_BEGIN,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK2_BEGIN,0,2)+24||SUBSTR(BREAK2_BEGIN,3,3)
                ELSE BREAK2_BEGIN END AS BREAK2_BEGIN,
                
               CASE WHEN SUBSTR(BREAK2_END,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK2_END,0,2)+24||SUBSTR(BREAK2_END,3,3)
                ELSE BREAK2_END END AS BREAK2_END,
                
               CASE WHEN SUBSTR(BREAK3_BEGIN,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK3_BEGIN,0,2)+24||SUBSTR(BREAK3_BEGIN,3,3)
                ELSE BREAK3_BEGIN END AS BREAK3_BEGIN,
                
               CASE WHEN SUBSTR(BREAK3_END,0,2) BETWEEN '00' AND '07' THEN
                SUBSTR(BREAK3_END,0,2)+24||SUBSTR(BREAK3_END,3,3)
                ELSE BREAK3_END END AS BREAK3_END
               FROM V_SLANE_WORKING_TIME_TEST
               WHERE MODEL = pMODEL
               AND SHIFT = pSHIFT;
               
 CURSOR C2 IS SELECT DISTINCT MODEL, SHIFT,BREAK1_BEGIN,BREAK1_END,BREAK2_BEGIN,BREAK2_END,BREAK3_BEGIN,BREAK3_END
               FROM V_SLANE_WORKING_TIME_TEST
               WHERE MODEL = pMODEL
               AND SHIFT = pSHIFT;
BEGIN
  -- Set vDATE
  IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
     vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
  ELSE
    vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
  END IF;
  
 
  vTEST  := SUBSTR(pCAL_TIME,0,2);
  IF pTYPE = 'KT' THEN
      SELECT CYCLE_TIME INTO vCYCLE_P
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'KITTING'
      AND ZONE = pZONE;
  ELSE
      SELECT CYCLE_TIME INTO vCYCLE_P
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'BLANE'
      AND ZONE = pZONE;
  END IF;

    BEGIN
      FOR REC_TIME32 IN C1 LOOP
        
        FOR REC_TIME24 IN C2 LOOP
        
      
          IF pCAL_TIME BETWEEN TO_CHAR(TO_DATE(REC_TIME32.BREAK1_BEGIN,'HH24:MI')-(.0006945 * vCYCLE_P),'HH24:MI') AND REC_TIME32.BREAK1_END THEN
            vBREAK := (TO_DATE(REC_TIME24.BREAK1_END,'HH24:MI:SS')-TO_DATE(REC_TIME24.BREAK1_BEGIN,'HH24:MI:SS'))*1440;
            vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI:SS')+(.000695 * (vCYCLE_P+vBREAK)),'HH24:MI') ; 
        
          ELSIF pCAL_TIME BETWEEN TO_CHAR(TO_DATE(REC_TIME32.BREAK2_BEGIN,'HH24:MI')-(.000695 * vCYCLE_P),'HH24:MI') AND REC_TIME32.BREAK2_END THEN
            IF pSHIFT = 'D' THEN
              vBREAK := (TO_DATE(REC_TIME24.BREAK2_END,'HH24:MI')-TO_DATE(REC_TIME24.BREAK2_BEGIN,'HH24:MI'))*1440;
              vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI')+(.000695 * (vCYCLE_P+vBREAK)),'HH24:MI') ; 
            ELSE
              vBREAK := (TO_DATE(TO_CHAR(sysdate+1,'YYYYMMDD')||REC_TIME24.BREAK2_END,'YYYYMMDDHH24:MI')-TO_DATE(TO_CHAR(sysdate,'YYYYMMDD')||REC_TIME24.BREAK2_BEGIN,'YYYYMMDDHH24:MI'))*1440;
              vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI')+(.000695 * (vCYCLE_P+vBREAK)),'HH24:MI') ;
            END IF;
            
          ELSIF pCAL_TIME BETWEEN TO_CHAR(TO_DATE(REC_TIME32.BREAK3_BEGIN,'HH24:MI')-(.000695 * vCYCLE_P),'HH24:MI') AND REC_TIME32.BREAK3_END THEN
            vBREAK := (TO_DATE(REC_TIME24.BREAK3_END,'HH24:MI')-TO_DATE(REC_TIME24.BREAK3_BEGIN,'HH24:MI'))*1440;
            vTIME_PICK := TO_CHAR(TO_DATE(pCAL_TIME,'HH24:MI')+(.000695 * (vCYCLE_P+vBREAK)),'HH24:MI') ; 
          END IF;
          
        END LOOP;
      END LOOP;
    END;
  RETURN vTIME_PICK;
  
END GET_TIME_TEST_PICKING;

/
--------------------------------------------------------
--  DDL for Function OSCOMMAND_RUN
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "LCDRA"."OSCOMMAND_RUN" (Command IN STRING)
RETURN VARCHAR2 IS
LANGUAGE JAVA
NAME 'OSCommand.Run(java.lang.String) return int';

/
--------------------------------------------------------
--  DDL for Package AUTOCOMPLETE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."AUTOCOMPLETE" AS 
TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE P_AUTOCOMPLETE(
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pCUERSOR OUT T_CURSOR
                                  );
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

END AUTOCOMPLETE;

/
--------------------------------------------------------
--  DDL for Package PG_DISTINCT_SELECT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_DISTINCT_SELECT" AS 
TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE P_PRD_PLAN_MODEL_MS(
                                   pFACTORY_CD VARCHAR2,
                                    pFUNC VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pMODEL VARCHAR2,
                                   pMODEL_ALL VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pCUERSOR OUT T_CURSOR
                                  );
END PG_DISTINCT_SELECT;

/
--------------------------------------------------------
--  DDL for Package PG_IT_INVOCE_DATA
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_IT_INVOCE_DATA" AS 

  PROCEDURE P_GET_SHIPPING_ORD_DATA (pFACTORY         VARCHAR2,
                                    pORDER_NO         VARCHAR2,
                                    pUser             VARCHAR2,
                                    pWC               VARCHAR2,
                                    pTYPE             VARCHAR2,
                                    pMETHOD           VARCHAR2,
                                    pSHIP_CD          VARCHAR2,
                                    pSHIP_NM          VARCHAR2,
                                    pSHIP_ATTN        VARCHAR2,
                                    pSHIP_TEL         VARCHAR2,
                                    pCONSIGNEE_CD     VARCHAR2,
                                    pCONSIGNEE_NM     VARCHAR2, 
                                    pCONSIGN_ATTN     VARCHAR2, 
                                    pCONSIGN_TEL      VARCHAR2, 
                                    pACCOUNTEE_CD     VARCHAR2, 
                                    pACCOUNTEE_NM     VARCHAR2, 
                                    pACC_ATTN         VARCHAR2, 
                                    pACC_TEL          VARCHAR2, 
                                    pCOMMODITY        VARCHAR2, 
                                    pTOTAL_PG         VARCHAR2, 
                                    pUNIT_PG          VARCHAR2, 
                                    pTOTAL_M3         VARCHAR2, 
                                    pUNIT_M3          VARCHAR2, 
                                    pTOTAL_QTY        VARCHAR2, 
                                    pQTY_UNIT         VARCHAR2, 
                                    pUNIT_PRICE       VARCHAR2, 
                                    pCURRENCY         VARCHAR2, 
                                    pTOTAL_NW         VARCHAR2, 
                                    pNW_UNIT          VARCHAR2, 
                                    pNW_UNIT_AMT      VARCHAR2, 
                                    pTOTAL_GW         VARCHAR2, 
                                    pGW_UNIT          VARCHAR2, 
                                    pGW_UNIT_AMT      VARCHAR2, 
                                    pPAYMENT_TM       VARCHAR2, 
                                    pREMIT_PAY        VARCHAR2, 
                                    pOTH_PAY          VARCHAR2, 
                                    pFRE_CHARGE       VARCHAR2, 
                                    pTRANS_CHARGE     VARCHAR2, 
                                    pFORMAL_CHARGE    VARCHAR2, 
                                    pCON_PRICE        VARCHAR2, 
                                    pREASON           VARCHAR2, 
                                    pPLAN_ETD         VARCHAR2, 
                                    pRETURN_DT        VARCHAR2, 
                                    pACTUAL_ETD       VARCHAR2,
                                    pDUTY             VARCHAR2,
                                    pDUTY_PAY         VARCHAR2,
                                    pFLAG OUT NUMBER);

END PG_IT_INVOCE_DATA;

/
--------------------------------------------------------
--  DDL for Package PG_MTDB_CTRLDIE_TRANSFER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_MTDB_CTRLDIE_TRANSFER" AS 
TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE MTDB_CTRLDIE_TRANSFER_INQ ( pDEPT       VARCHAR2,
                                      pMT_MODEL   VARCHAR2,
                                      pPART_NO    VARCHAR2,
                                      pCURSOR OUT T_CURSOR);   

PROCEDURE MTDB_CTRLDIE_TRANSFER_PART_INQ  ( pDEPT       VARCHAR2,
                                            pMT_MODEL   VARCHAR2,
                                            pPART_NO    VARCHAR2,
                                            pCURSOR OUT T_CURSOR);                                    
    
PROCEDURE MTDB_CTRLDIE_TRANSFER_INS_UPD (pMT_MODEL VARCHAR2,
              pPART_NO VARCHAR2,
              pDIE_MAKER VARCHAR2,
              pINJ_PLACE_DS VARCHAR2,
              pMOLD_NO VARCHAR2,
              pDS_FINAL_RESULT VARCHAR2,
              pETA_TIMES VARCHAR2,
              pACTUAL_DWG VARCHAR2,
              pPLAN_TRY_DT VARCHAR2,
              pPLAN_DS_DT VARCHAR2,
              pPTQA_REC_DT VARCHAR2,
              pPE_REC_DT VARCHAR2,
              pJUD_FN_DT VARCHAR2,
              pSCAN_DT VARCHAR2,
              pRESULT_DS VARCHAR2,
              pDWG_NO_DS VARCHAR2,
              pJUD_FN_DT_DS VARCHAR2,
              pSCAN_DATE_DS VARCHAR2,
              pDIE_NEED_TRANSFER VARCHAR2,
              pPLAN_ETD VARCHAR2,
              pPLAN_ETA VARCHAR2,
              pACT_ETA VARCHAR2,
              pTRANSFER_BY VARCHAR2,
              pCREATE_BY VARCHAR2,
              pUPDATE_BY VARCHAR2,
              pSTATUS_ID VARCHAR2,
              pDEPT_UPLOAD VARCHAR2,
              pMTDB OUT NUMBER);
              
PROCEDURE P_CTRLDIE_TRANSFERPART_INS_UPD(
              pMT_MODEL   VARCHAR2,
              pPART_NO   VARCHAR2,
              pDIM   VARCHAR2,
              pDWG_NO   VARCHAR2,
              pMOLD_NO   VARCHAR2,
              pSUP_CD   VARCHAR2,
              pPO_STATUS   VARCHAR2,
              pPLAN_ETD   VARCHAR2,
              pPLAN_ETA   VARCHAR2,
              pACT_ETA   VARCHAR2,
              pACT_JUD   VARCHAR2,
              pPO_NO   VARCHAR2,
              pQTY_REC   VARCHAR2,
              pQTY_APV   VARCHAR2,
              pCURRENCY   VARCHAR2,
              pUNIT_PRICE   VARCHAR2,
              pGROUP_CD   VARCHAR2,
              pCREATE_BY VARCHAR2,
              pUPDATE_BY VARCHAR2,
              pSTATUS_ID VARCHAR2,
              pDEPT_UPLOAD VARCHAR2,
              pMTDBPART OUT NUMBER);
PROCEDURE P_DATA_SIAM_PART_INS_UPD(
              pMT_MODEL        VARCHAR,
              pPART_NO        VARCHAR,
              pDIM        VARCHAR,
              pDWG_NO        VARCHAR,
              pSUP_CD        VARCHAR,
              pSTATUS        VARCHAR,
              pORDER_QTY        VARCHAR,
              pPO        VARCHAR,
              pPARTIAL        VARCHAR,
              pDEL_PART        VARCHAR,
              pACC_DT        VARCHAR,
              pACP_DT        VARCHAR,
              pACC_QT        VARCHAR,
              pACP_QT        VARCHAR,
              pCURRENCY        VARCHAR,
              pPUR_PRICE        VARCHAR,
              pGROUP_CD        VARCHAR,
              pCREATE_BY VARCHAR2,
              pUPDATE_BY VARCHAR2,
              pSTATUS_ID VARCHAR2,
              pMTDBPART_SIAM OUT NUMBER);
              
END PG_MTDB_CTRLDIE_TRANSFER;

/
--------------------------------------------------------
--  DDL for Package PG_MTDB_EXTA_ORDER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_MTDB_EXTA_ORDER" AS 
TYPE T_CURSOR IS REF CURSOR;

PROCEDURE MTDB_EXTRA_ORDER_INS_UPD (
              pMT_MODEL   Varchar,
              pCATEGORY   Varchar,
              pMODEL   Varchar,
              pMTM_NO   Varchar,
              pSUB   Varchar,
              pPART_NO   Varchar,
              pPART_NAME   Varchar,
              pUSAGE   Varchar,
              pPROCESS   Varchar,
              pSUP_CD   Varchar,
              pDETAILS   Varchar,
              pPERSON_INCHARGE   Varchar,
              pRESULT   Varchar,
              pISSUE_PR_DT   Varchar,
              pPLAN_DEL_DT   Varchar,
              pACT_REC_DT   Varchar,
              pACT_JUD_DT   Varchar,
              pPO_NO   Varchar,
              pORDER_QTY   Varchar,
              pREC_QTY   Varchar,
              pREMARK   Varchar,
              pCREATE_BY VARCHAR2,
              pUPDATE_BY VARCHAR2,
              pSTATUS_ID VARCHAR2,
              pCOUNT_ITEMS VARCHAR2,
              pEXTRA OUT NUMBER);
              
PROCEDURE MTDB_EXTRA_ORDER_DEL (
              pMT_MODEL   Varchar,
              pMODEL   Varchar,
              pPART_NO   Varchar,
              pSUP_CD   Varchar,
              pMTM_NO   Varchar,
              pSUB   Varchar,
              pEXTRA OUT NUMBER);
              
PROCEDURE MTDB_EXTRA_ORDER_SEL (
              pMT_MODEL   Varchar,
              pMODEL   Varchar,
              pPART_NO   Varchar,
              pCUERSOR OUT T_CURSOR);
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

END PG_MTDB_EXTA_ORDER;

/
--------------------------------------------------------
--  DDL for Package PG_MTDB_MAINTENANCE_USER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_MTDB_MAINTENANCE_USER" AS 
TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE MTDB_LOGIN_USER_SEL (
              
              pUSER_ID   Varchar,
              pPASSWORD   Varchar,
              pNAME varchar,
              pSURNAME varchar,
              pDEPT varchar,
              pROLE varchar,
              pCUERSOR OUT T_CURSOR);
 PROCEDURE MTDB_LOGIN_USER_INUP (
              
              pUSER_ID   Varchar,
              pPASSWORD   Varchar,
              pNAME varchar,
              pSURNAME varchar,
              pDEPT varchar,
              pROLE varchar,
              pEMAIL varchar,
              pCREATE_BY VARCHAR2,
              pUPDATE_BY VARCHAR2,
              pUSER OUT NUMBER);
PROCEDURE MTDB_LOGIN_USER_DEL (
              
              pUSER_ID   Varchar,
              pUSER OUT NUMBER);
              
              
END PG_MTDB_MAINTENANCE_USER;

/
--------------------------------------------------------
--  DDL for Package PG_MTDB_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_MTDB_MASTER" AS 
TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE MTDB_USAGE_MASTER_UPD ( pMT_MODEL     VARCHAR2,
                                  pPART_NO      VARCHAR2,
                                  pDIM          VARCHAR2,          
                                  pSUP_CD       VARCHAR2,
                                  pUSAGE        VARCHAR2,
                                  pUSAGE_TYPE   VARCHAR2,
                                  pCREATE_BY    VARCHAR2,
                                  --pUPDATE_BY    VARCHAR2,
                                  pMTDB  OUT    NUMBER);   
                                  
PROCEDURE MTDB_USAGE_MASTER_INQ ( pMT_MODEL   VARCHAR2,
                                  pPART_NO    VARCHAR2,
                                  pDIM        VARCHAR2,
                                  pSUP_CD     VARCHAR2,
                                  pUSAGE_TYPE VARCHAR2,
                                  pCURSOR OUT T_CURSOR);      
                                  
PROCEDURE MTDB_ORDER_MASTER_UPD ( pMT_MODEL         VARCHAR2,
                                  pMODEL            VARCHAR2,
                                  pPART_NO          VARCHAR2,
                                  pDIM              VARCHAR2,          
                                  pDWG_NO           VARCHAR2,
                                  pIN_HOUSE_OD_NO   VARCHAR2,
                                  pQTY_ORDER        VARCHAR2,
                                  pGROUP_CD         VARCHAR2,
                                  pCREATE_BY        VARCHAR2,
                                  --pUPDATE_BY        VARCHAR2,
                                  pMTDB  OUT    NUMBER);   
                                  
PROCEDURE MTDB_ORDER_MASTER_INQ ( pMT_MODEL   VARCHAR2,
                                  pMODEL      VARCHAR2,
                                  pPART_NO    VARCHAR2,
                                  pDIM        VARCHAR2,
                                  pDWG_NO     VARCHAR2,
                                  pCURSOR OUT T_CURSOR);    
                                  
PROCEDURE MTDB_WORKING_DAY_MASTER_INQ ( pDATE_FROM  VARCHAR2,
                                        pDATE_TO    VARCHAR2,
                                        pCURSOR OUT T_CURSOR);      
                                        
PROCEDURE MTDB_PARTLIST_MASTER_INQ  ( pMT_MODEL   VARCHAR2,
                                      pCTGY       VARCHAR2,
                                      pPART_NO    VARCHAR2,
                                      pDIM        VARCHAR2,
                                      pDWG_NO     VARCHAR2,
                                      pMOLD_NO    VARCHAR2,
                                      pCURSOR OUT T_CURSOR);                                          

PROCEDURE MTDB_PARTLIST_MASTER_UPD  (   pMT_MODEL       VARCHAR2,
                                        pCOMMON_LIST    VARCHAR2,
                                        pCOUNT_DS       VARCHAR2,
                                        pCOUNT_PART_NO  VARCHAR2,
                                        pSTATUS         VARCHAR2,
                                        pCOLOR          VARCHAR2,
                                        pCATEGORY       VARCHAR2,
                                        pORDER_BY       VARCHAR2,
                                        pASSY_PLACE     VARCHAR2,
                                        pMAIN_SUB       VARCHAR2,
                                        pINPUT_PHASE    VARCHAR2,
                                        pLV_INP_DE      VARCHAR2,
                                        pLV_INP_MT      VARCHAR2,
                                        pUNIT_NO        VARCHAR2,
                                        pUNIT_NAME      VARCHAR2,
                                        pPART_NO        VARCHAR2,
                                        pDIM            VARCHAR2,
                                        pPART_NAME      VARCHAR2,
                                        pDWG_NO         VARCHAR2,
                                        pECN_NO         VARCHAR2,
                                        pECN_REC_DT     VARCHAR2,
                                        pECN_PHASE      VARCHAR2,
                                        pECN_DETAIL     VARCHAR2,
                                        pPROCESS        VARCHAR2,
                                        pTEXTURE        VARCHAR2,
                                        pMIRROR         VARCHAR2,
                                        pSCREEN         VARCHAR2,
                                        pSPRAY          VARCHAR2,
                                        pCAVITY         VARCHAR2,
                                        pSUP_CODE       VARCHAR2,
                                        pINJ_SUPPLIER   VARCHAR2,
                                        pDIE_SUPPLIER   VARCHAR2,
                                        pDIE_CONTROL    VARCHAR2,
                                        pDIE_JUDGE_RESP VARCHAR2,
                                        pMOLD_NO        VARCHAR2,
                                        pPART_CM_MO_FM  VARCHAR2,
                                        pCOUNTRY        VARCHAR2,
                                        pCONTROL        VARCHAR2,
                                        pMP_DWG_ISU_JP  VARCHAR2,
                                        pDS_PLAN_DT     VARCHAR2,
                                        pETM_DS_OK_TM   VARCHAR2,
                                        pINJ_PLACE      VARCHAR2,
                                        pREC_DT         VARCHAR2,
                                        pREMARK_DS      VARCHAR2,
                                        pACT_ETD        VARCHAR2,
                                        pISU_PR_DT      VARCHAR2,
                                        pISU_PR_DWG     VARCHAR2,
                                        pREMARK         VARCHAR2,
                                        pCREATE_BY      VARCHAR2,
                                        pMTDB  OUT    NUMBER);

PROCEDURE MTDB_PARTLIST_ALL_INQ     ( pMT_MODEL   VARCHAR2,
                                      pCTGY       VARCHAR2,
                                      pPART_NO    VARCHAR2,
                                      pDIM        VARCHAR2,
                                      pDWG_NO     VARCHAR2,
                                      pMOLD_NO     VARCHAR2,
                                      pFREE       VARCHAR2,
                                      pCURSOR OUT T_CURSOR);
                           
END PG_MTDB_MASTER;

/
--------------------------------------------------------
--  DDL for Package PG_PRD_PLAN_A3_ASSY_PLAN
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_PRD_PLAN_A3_ASSY_PLAN" AS 
TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE P_PRD_PLAN_A3_ASSY_PLAN_SEL(
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pPLAN_DATE VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pCUERSOR OUT T_CURSOR
                                  );
                                  
PROCEDURE P_PRD_PLAN_A3_ASSY_PLAN_UP(
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pPLAN_DATE VARCHAR2,
                                   pSHIFT VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pPRIORITY VARCHAR2,
                                   pMERCHANDISE_CD VARCHAR2,
                                   pPLAN_QTY NUMBER,
                                   pSLANE OUT NUMBER
                                  );                                  
END PG_PRD_PLAN_A3_ASSY_PLAN;

/
--------------------------------------------------------
--  DDL for Package PG_RUN_SEQ_DAISHA
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_RUN_SEQ_DAISHA" AS 

 PROCEDURE P_SEQ_PLAN_DAISHA ( pOUTPUT_FLAG OUT NUMBER);
 PROCEDURE P_CALCULATE_PLAN ( pFACTORY_CD   VARCHAR2) ;
                              -- pPLAN_DATE     VARCHAR2) AS
                               --pOUTPUT_FLAG OUT NUMBER) AS
END PG_RUN_SEQ_DAISHA;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_CYCLE_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_CYCLE_MASTER" AS 
TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE P_SLANE_CYCLE_MASTER_INS_UPD ( 
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pTYPE VARCHAR2,
                                        pZONE VARCHAR2,
                                        pCYCLE_TIME NUMBER,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pSLANE OUT NUMBER);
PROCEDURE P_SLANE_CYCLE_MASTER_DEL (    
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pTYPE VARCHAR2,
                                        pZONE VARCHAR2,
                                        pSLANE OUT NUMBER);
PROCEDURE P_SLANE_CYCLE_MASTER_SEL (  
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pTYPE VARCHAR2,
                                        pZONE VARCHAR2,
                                        pCREATE_DATE VARCHAR2,
                                        pDATE_FROM VARCHAR2,
                                        pDATE_TO VARCHAR2,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pCUERSOR OUT T_CURSOR);
END PG_SLANE_CYCLE_MASTER;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_DAISHA_CONT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_DAISHA_CONT" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE P_SLANE_DAISHA_CONT;  

END PG_SLANE_DAISHA_CONT;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_DAISHA_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_DAISHA_MASTER" AS 
TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE SLANE_DAISHA_MASTER_INS_UPD ( pFACTORY_CD   VARCHAR2,
                                        pMODEL_SEQ    VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pMODEL_ALL    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pMIN          NUMBER,
                                        pMAX          NUMBER,
                                        pCREATE_BY    VARCHAR2,
                                        pUPDATE_BY    VARCHAR2,
                                        pSNP          NUMBER,
                                        pSLANE  OUT   NUMBER);
                                        
PROCEDURE SLANE_DAISHA_MASTER_DEL (     pFACTORY_CD VARCHAR2,
                                        pMODEL_SEQ VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pLINE_CD VARCHAR2,
                                        pDAISHA_TYPE VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pSLANE OUT NUMBER);
                                        
PROCEDURE SLANE_DAISHA_MASTER_SEL (     pFACTORY_CD   VARCHAR2,
                                        pMODEL_SEQ    VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pMODEL_ALL    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pCREATE_DATE  VARCHAR2,
                                        pDATE_FROM    VARCHAR2,
                                        pDATE_TO      VARCHAR2,
                                        pCREATE_BY    VARCHAR2,
                                        pUPDATE_BY    VARCHAR2,
                                        pSNP          VARCHAR2,
                                        pCUERSOR OUT T_CURSOR);                                    
END PG_SLANE_DAISHA_MASTER;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_DAISHA_PROGRESSIVE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_DAISHA_PROGRESSIVE" AS 
TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE P_SLANE_DAISHA_PROGRESSIVE_SEL (
                                        pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pCUERSOR      OUT T_CURSOR);
                                        
PROCEDURE P_STORE_OUT_SLANE_INQ (       pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pCURSOR      OUT T_CURSOR);                                        
                                        
PROCEDURE P_STORE_OUT_SLANE_KT (        pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        --pSHIFT        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER); 
                                        
PROCEDURE P_STORE_OUT_SLANE (           pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        --pSHIFT        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER); 
                                        
PROCEDURE P_PICKING_IN (                pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pCUERSOR      OUT T_CURSOR);    
                                        
PROCEDURE P_PICKING_IN_INQ (            pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pCURSOR      OUT T_CURSOR);                                         
                                        
PROCEDURE P_PICKING_IN_UPD (            pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                       -- pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER);   
                                        
PROCEDURE P_STORE_IN (                  pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pCUERSOR      OUT T_CURSOR);   

PROCEDURE P_STORE_IN_INQ (              pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pCURSOR      OUT T_CURSOR);                                         
                                        
PROCEDURE P_STORE_IN_UPD (              pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        --pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER); 
                                        
 PROCEDURE P_SIGNAL_IN_KT (             pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER);
                                        
 PROCEDURE P_SIGNAL_MIN_KT (            pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pCOLOR        VARCHAR2,
                                        pSLANE        OUT NUMBER);
 
 PROCEDURE P_SIGNAL_IN_BLANE (          pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER);                                       
                                        
 PROCEDURE P_SIGNAL_OUT_BLANE (         pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER);     
                                         
END PG_SLANE_DAISHA_PROGRESSIVE;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_DNM_RLTMPLANBYSHF_W
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_DNM_RLTMPLANBYSHF_W" AS 

 PROCEDURE MAIN;
 PROCEDURE P_SLANE_DNM_RLTMPLANBYSHF_W ;
 PROCEDURE P_CALCULATE_ACTUAL ;
 PROCEDURE P_GETDATA_FROM_DNM;

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

END PG_SLANE_DNM_RLTMPLANBYSHF_W;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_INITIAL_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_INITIAL_MASTER" AS 
TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
 PROCEDURE P_INITIAL_DATA_INQ      (pFACTORY_CD     VARCHAR2,
                                    pMODEL          VARCHAR2,
                                    pSHIFT          VARCHAR2,
                                    pLINE_CD        VARCHAR2,
                                    pDAISHA_TYPE    VARCHAR2,
                                    pDAISHA_GROUP   VARCHAR2,
                                    pLOCATION       VARCHAR2,
                                    pROUND          VARCHAR2,
                                    pCURSOR         OUT T_CURSOR); 
                                    
 PROCEDURE P_INITIAL_DATA_KITTING  (pFACTORY_CD     VARCHAR2,
                                    pMODEL          VARCHAR2,
                                    pSHIFT          VARCHAR2,
                                    pLINE_CD        VARCHAR2,
                                    pCELL_NAME      VARCHAR2,
                                    pDAISHA_TYPE    VARCHAR2,
                                    pDAISHA_GROUP   VARCHAR2,
                                    pLOCATION       VARCHAR2,
                                    pROUND          VARCHAR2,
                                    pSLANE          OUT NUMBER); 
 
  PROCEDURE P_INITIAL_DATA_BLANE   (pFACTORY_CD     VARCHAR2,
                                    pMODEL          VARCHAR2,
                                    pSHIFT          VARCHAR2,
                                    pLINE_CD        VARCHAR2,
                                    pCELL_NAME      VARCHAR2,
                                    pDAISHA_TYPE    VARCHAR2,
                                    pDAISHA_GROUP   VARCHAR2,
                                    pLOCATION       VARCHAR2,
                                    pROUND          VARCHAR2,
                                    pSLANE          OUT NUMBER); 
                                    
  PROCEDURE P_INITIAL_DATA_UPD     (pFACTORY_CD     VARCHAR2,
                                    pMODEL          VARCHAR2,
                                    pSHIFT          VARCHAR2,
                                    pLINE_CD        VARCHAR2,
                                    pCELL_NAME      VARCHAR2,
                                    pDAISHA_TYPE    VARCHAR2,
                                    pDAISHA_GROUP   VARCHAR2,
                                    pLOCATION       VARCHAR2,
                                    pROUND          VARCHAR2,
                                    pSLANE          OUT NUMBER);                                   
END PG_SLANE_INITIAL_MASTER;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_ORDER_MATRIX_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_ORDER_MATRIX_MASTER" AS 
TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE SLANE_ORDER_MATRIX_MASTER_IU (
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pDAISHA_TYPE VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pPART_NO VARCHAR2,
                                        pDIM_NO VARCHAR2,
                                        pPART_NAME VARCHAR2,
                                        pSUPP_CD VARCHAR2,
                                        pSUPP_NAME VARCHAR2,
                                        pFLG_DIFF VARCHAR2,
                                        pCOLOR VARCHAR2,
                                        pSNP NUMBER,
                                        pQTY VARCHAR2,
                                        pORDER_01 NUMBER,
                                        pORDER_02 NUMBER,
                                        pORDER_03 NUMBER,
                                        pORDER_04 NUMBER,
                                        pORDER_05 NUMBER,
                                        pORDER_06 NUMBER,
                                        pORDER_07 NUMBER,
                                        pORDER_08 NUMBER,
                                        pORDER_09 NUMBER,
                                        pORDER_10 NUMBER,
                                        pORDER_11 NUMBER,
                                        pORDER_12 NUMBER,
                                        pORDER_13 NUMBER,
                                        pORDER_14 NUMBER,
                                        pORDER_15 NUMBER,
                                        pORDER_16 NUMBER,
                                        pORDER_17 NUMBER,
                                        pORDER_18 NUMBER,
                                        pORDER_19 NUMBER,
                                        pORDER_20 NUMBER,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pSLANE OUT NUMBER);
  
PROCEDURE SLANE_ORDER_MATRIX_MASTER_SEL (
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pDAISHA_TYPE VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pPART_NO VARCHAR2,
                                        pFLG_DIFF VARCHAR2,
                                        pSNP NUMBER,
                                        pSNP_NO VARCHAR2,
                                        pQTY VARCHAR2,
                                        --pQTY_NO VARCHAR2,
                                        pCREATE_DATE VARCHAR2,
                                        pDATE_FROM VARCHAR2,
                                        pDATE_TO VARCHAR2,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pCUERSOR2 OUT T_CURSOR);  

PROCEDURE SLANE_ORDER_MATRIX_MASTER_DEL (     
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pDAISHA_TYPE VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pPART_NO VARCHAR2,
                                        pDIM_NO VARCHAR2,
                                        pSUPP_CD VARCHAR2,
                                        pSLANE OUT NUMBER);
                                        
END PG_SLANE_ORDER_MATRIX_MASTER;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_PLAN_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_PLAN_MASTER" AS 
TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE P_SLANE_PLAN_MASTER_SEL(
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pMODEL VARCHAR2,
                                   
                                   pCUERSOR OUT T_CURSOR
                                  );
END PG_SLANE_PLAN_MASTER;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_PRODUCTION_PLAN
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_PRODUCTION_PLAN" AS 
TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE P_SLANE_PRODUCTION_PLAN_SEL(
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pPLAN_DATE VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pCUERSOR OUT T_CURSOR
                                  );
END PG_SLANE_PRODUCTION_PLAN;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_REC_EMPTY_DAISHA
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_REC_EMPTY_DAISHA" AS 
TYPE T_CURSOR IS REF CURSOR;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE P_SLANE_REC_EMP_DAISHA_INSUP (      pFACTORY_CD     VARCHAR2,
                                              pMODEL          VARCHAR2,
                                              pLINE_CD        VARCHAR2,
                                              pCELL_NAME      VARCHAR2,
                                              pDAISHA_TYPE    VARCHAR2,
                                              pDAISHA_GROUP   VARCHAR2,
                                              pROUND          NUMBER,
                                              pTOTAL_EMPTY    VARCHAR2,
                                              pSLANE          OUT NUMBER);
                                              
PROCEDURE P_SLANE_REC_EMP_DAISHA_SEL (        pFACTORY_CD     VARCHAR2,
                                          
                                              pMODEL          VARCHAR2,
                                              pLINE_CD        VARCHAR2,

                                              pCELL_NAME      VARCHAR2,
                                              pDAISHA_TYPE    VARCHAR2,
                                              pDAISHA_GROUP   VARCHAR2,
                                              pROUND        NUMBER,
                                              pCUERSOR        OUT T_CURSOR);
                                              
  PROCEDURE P_SLANE_REC_EMP_DAISHA_MAX_SEL (  pFACTORY_CD     VARCHAR2,
                                              pMODEL          VARCHAR2,
                                              pLINE_CD        VARCHAR2,
                                              pDAISHA_TYPE    VARCHAR2,
                                              pDAISHA_GROUP   VARCHAR2,
                                              pCUERSOR        OUT T_CURSOR);
END PG_SLANE_REC_EMPTY_DAISHA;

/
--------------------------------------------------------
--  DDL for Package PG_SLANE_SIGNAL
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."PG_SLANE_SIGNAL" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */
  PROCEDURE P_FIX_STORE_OUT (           pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER);
                                        
  PROCEDURE P_SIGNAL_IN_KT (            pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER);
                                        
  PROCEDURE P_SIGNAL_MIN_KT (           pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pCOLOR        VARCHAR2,
                                        pSLANE        OUT NUMBER);
 
 PROCEDURE P_SIGNAL_IN_BLANE (          pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER);                                       
                                        
 PROCEDURE P_SIGNAL_OUT_BLANE (         pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pCOLOR        VARCHAR2,
                                        pDES          VARCHAR2,
                                        pSLANE        OUT NUMBER); 
                                        
 
                                        
END PG_SLANE_SIGNAL;

/
--------------------------------------------------------
--  DDL for Package STATUS_DAISHA
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."STATUS_DAISHA" AS 

  PROCEDURE P_STORE_OUT_SLANE_KT (pFACTORY_CD VARCHAR2,
                                  pMODEL      VARCHAR2,
                                  pLINE_CD    VARCHAR2,
                                  pTYPE       VARCHAR2,
                                  pGROUP      VARCHAR2,
                                  pROUND      VARCHAR2);
                                  
  PROCEDURE P_STORE_OUT_SLANE    (pFACTORY_CD VARCHAR2,
                                  pMODEL      VARCHAR2,
                                  pLINE_CD    VARCHAR2,
                                  pTYPE       VARCHAR2,
                                  pGROUP      VARCHAR2,
                                  pROUND      VARCHAR2);
                               

END STATUS_DAISHA;

/
--------------------------------------------------------
--  DDL for Package TEST
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "LCDRA"."TEST" AS 
  
  PROCEDURE P_INITIAL_DATA_KITTING  (pFACTORY_CD     VARCHAR2,
                                    pMODEL          VARCHAR2,
                                    pSHIFT          VARCHAR2,
                                    pLINE_CD        VARCHAR2,
                                    pDAISHA_TYPE    VARCHAR2,
                                    pDAISHA_GROUP   VARCHAR2,
                                    pLOCATION       VARCHAR2,
                                    pROUND          VARCHAR2); 
                                    
  PROCEDURE P_INITIAL_DATA_BLANE (pFACTORY_CD     VARCHAR2,
                                      pMODEL          VARCHAR2,
                                      pSHIFT          VARCHAR2,
                                      pLINE_CD        VARCHAR2,
                                      pDAISHA_TYPE    VARCHAR2,
                                      pDAISHA_GROUP   VARCHAR2,
                                      pLOCATION       VARCHAR2,
                                      pROUND          VARCHAR2); 
  PROCEDURE P_CALCULATE_ACTUAL ;                            
END TEST;

/
--------------------------------------------------------
--  DDL for Package Body AUTOCOMPLETE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."AUTOCOMPLETE" AS

  PROCEDURE P_AUTOCOMPLETE(
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pCUERSOR OUT T_CURSOR
                                  ) AS
          wk_select    Varchar2(1000);         
           wk_where     Varchar2(1000);
      
    BEGIN
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD LIKE '||''''||pFACTORY_CD||'''';
   			End IF;
         IF pMODEL_SEQ is not null then
    	 				wk_where :=  wk_where||' AND MODEL_SEQ LIKE '||''''||pMODEL_SEQ||'''';
   			End IF;
    	 IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD LIKE '||''''||pLINE_CD||'''';
   			End IF;
        if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
        
   					wk_select := 'SELECT FACTORY_CD,MODEL_SEQ,LINE_CD,CELL_NAME,SHIFT FROM V_PRD_PLAN_A3_MODEL_MS '||wk_where||' ORDER BY MODEL_SEQ';
            
   OPEN pCUERSOR FOR wk_select;
  END P_AUTOCOMPLETE;

END AUTOCOMPLETE;

/
--------------------------------------------------------
--  DDL for Package Body PG_DISTINCT_SELECT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_DISTINCT_SELECT" AS

  PROCEDURE P_PRD_PLAN_MODEL_MS(   pFACTORY_CD VARCHAR2,
                                   pFUNC VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pMODEL VARCHAR2,
                                   pMODEL_ALL VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pCUERSOR OUT T_CURSOR) IS
                                   
           wk_select    Varchar2(1000);         
           wk_where     Varchar2(1000);
      
    BEGIN
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
         IF pMODEL_SEQ is not null then
    	 				wk_where :=  wk_where||' AND MODEL_SEQ = '||''''||pMODEL_SEQ||'''';
   			End IF;
    		IF pMODEL is not null then
    	 				wk_where := wk_where||' AND MODEL = '||''''||pMODEL||'''';
    		End IF;
        IF pMODEL_ALL is not null then
    	 				wk_where := wk_where||' AND MODEL_ALL = '||''''||pMODEL_ALL||'''';
    		End IF;
         IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
         if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
        
   					wk_select := 'SELECT DISTINCT '||''||pFUNC||''||' FROM V_PRD_PLAN_A3_MODEL_MS ' ||wk_where||' ORDER BY '||''||pFUNC||''||' ';
            
   OPEN pCUERSOR FOR wk_select;
  END P_PRD_PLAN_MODEL_MS;

END PG_DISTINCT_SELECT;

/
--------------------------------------------------------
--  DDL for Package Body PG_MTDB_CTRLDIE_TRANSFER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_MTDB_CTRLDIE_TRANSFER" AS

PROCEDURE MTDB_CTRLDIE_TRANSFER_INQ ( pDEPT        VARCHAR2,
                                      pMT_MODEL    VARCHAR2,
                                      pPART_NO     VARCHAR2,
                                      pCURSOR OUT T_CURSOR) IS
                                  
          wk_select    					Varchar2(1000); 
   				wk_where              Varchar2(1000);
          --*** Check condition for search
    BEGIN
     	  
        IF pDEPT is not null then
    	 				wk_where :=  wk_where||' AND DEPT_UPLOAD = '||''''||pDEPT||'''';
   			End IF;
    		IF pMT_MODEL is not null then
    	 				wk_where :=  wk_where||' AND MT_MODEL = '||''''||pMT_MODEL||'''';
   			End IF;
        IF pPART_NO is not null then
    	 				wk_where :=  wk_where||' AND PART_NO LIKE ''%'||pPART_NO||'%''';
   			End IF;
    	        
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT * FROM T_MTDB_CTRLDIE_TRANSFER ' ||wk_where||' ORDER BY MT_MODEL, PART_NO';
   
  		--*** Execute cursor
   			OPEN pCURSOR FOR wk_select;
                                        
    END MTDB_CTRLDIE_TRANSFER_INQ;  
-------------------------------------------------------------------------------
PROCEDURE MTDB_CTRLDIE_TRANSFER_PART_INQ (pDEPT        VARCHAR2,
                                          pMT_MODEL    VARCHAR2,
                                          pPART_NO     VARCHAR2,
                                          pCURSOR OUT T_CURSOR) IS
                                  
          wk_select    					Varchar2(1000); 
   				wk_where              Varchar2(1000);
          --*** Check condition for search
    BEGIN
     	  
        IF pDEPT is not null then
    	 				wk_where :=  wk_where||' AND DEPT_UPLOAD = '||''''||pDEPT||'''';
   			End IF;
    		IF pMT_MODEL is not null then
    	 				wk_where :=  wk_where||' AND MT_MODEL = '||''''||pMT_MODEL||'''';
   			End IF;
        IF pPART_NO is not null then
    	 				wk_where :=  wk_where||' AND PART_NO LIKE ''%'||pPART_NO||'%''';
   			End IF;
    	        
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT * FROM T_MTDB_CTRLDIE_TRANSFER_PART ' ||wk_where||' ORDER BY MT_MODEL, PART_NO';
   
  		--*** Execute cursor
   			OPEN pCURSOR FOR wk_select;
                                        
    END MTDB_CTRLDIE_TRANSFER_PART_INQ;  
-------------------------------------------------------------------------------
PROCEDURE MTDB_CTRLDIE_TRANSFER_INS_UPD(pMT_MODEL VARCHAR2,
                                        pPART_NO VARCHAR2,
                                        pDIE_MAKER VARCHAR2,
                                        pINJ_PLACE_DS VARCHAR2,
                                        pMOLD_NO VARCHAR2,
                                        pDS_FINAL_RESULT VARCHAR2,
                                        pETA_TIMES VARCHAR2,
                                        pACTUAL_DWG VARCHAR2,
                                        pPLAN_TRY_DT VARCHAR2,
                                        pPLAN_DS_DT VARCHAR2,
                                        pPTQA_REC_DT VARCHAR2,
                                        pPE_REC_DT VARCHAR2,
                                        pJUD_FN_DT VARCHAR2,
                                        pSCAN_DT VARCHAR2,
                                        pRESULT_DS VARCHAR2,
                                        pDWG_NO_DS VARCHAR2,
                                        pJUD_FN_DT_DS VARCHAR2,
                                        pSCAN_DATE_DS VARCHAR2,
                                        pDIE_NEED_TRANSFER VARCHAR2,
                                        pPLAN_ETD VARCHAR2,
                                        pPLAN_ETA VARCHAR2,
                                        pACT_ETA VARCHAR2,
                                        pTRANSFER_BY VARCHAR2,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pSTATUS_ID VARCHAR2,
                                        pDEPT_UPLOAD VARCHAR2,
                                        pMTDB OUT NUMBER) AS
  
  pPTQA_REC_DT_DS     T_MTDB_CTRLDIE_TRANSFER2.PTQA_REC_DT_DS%TYPE;
  pPE_REC_DATE_DS     T_MTDB_CTRLDIE_TRANSFER2.PE_REC_DATE_DS%TYPE;
  pJUD_FN_DT_D        T_MTDB_CTRLDIE_TRANSFER2.JUD_FN_DT_D%TYPE;
  pSCAN_DT_DS         T_MTDB_CTRLDIE_TRANSFER2.SCAN_DT_DS%TYPE;
  pRESULT_DS_N1       T_MTDB_CTRLDIE_TRANSFER2.RESULT_DS_N1%TYPE;
  pDWG_NO_DS_N1       T_MTDB_CTRLDIE_TRANSFER2.DWG_NO_DS_N1%TYPE;
  pJUD_FN_DT_DS_N1    T_MTDB_CTRLDIE_TRANSFER2.JUD_FN_DT_DS_N1%TYPE;
  pSCAN_DATE_DS_N1    T_MTDB_CTRLDIE_TRANSFER2.SCAN_DATE_DS_N1%TYPE;
  
  BEGIN
  INSERT INTO T_MTDB_CTRLDIE_TRANSFER ( MT_MODEL,
                                        PART_NO,
                                        DIE_MAKER,
                                        INJ_PLACE_DS,
                                        MOLD_NO,
                                        DS_FINAL_RESULT,
                                        ETA_TIMES,
                                        ACTUAL_DWG,
                                        PLAN_TRY_DT,
                                        PLAN_DS_DT,
                                        PTQA_REC_DT,
                                        PE_REC_DT,
                                        JUD_FN_DT,
                                        SCAN_DT,
                                        RESULT_DS,
                                        DWG_NO_DS,
                                        JUD_FN_DT_DS,
                                        SCAN_DATE_DS,
                                        DIE_NEED_TRANSFER,
                                        PLAN_ETD,
                                        PLAN_ETA,
                                        ACT_ETA,
                                        TRANSFER_BY,
                                        CREATE_DT,
                                        CREATE_BY,
                                        UPDATE_DT,
                                        UPDATE_BY,
                                        STATUS_ID,
                                        DEPT_UPLOAD) 
                               VALUES ( pMT_MODEL,
                                        pPART_NO,
                                        pDIE_MAKER,
                                        pINJ_PLACE_DS,
                                        pMOLD_NO,
                                        pDS_FINAL_RESULT,
                                        pETA_TIMES,
                                        pACTUAL_DWG,
                                        pPLAN_TRY_DT,
                                        pPLAN_DS_DT,
                                        pPTQA_REC_DT,
                                        pPE_REC_DT,
                                        pJUD_FN_DT,
                                        pSCAN_DT,
                                        pRESULT_DS,
                                        pDWG_NO_DS,
                                        pJUD_FN_DT_DS,
                                        pSCAN_DATE_DS,
                                        pDIE_NEED_TRANSFER,
                                        pPLAN_ETD,
                                        pPLAN_ETA,
                                        pACT_ETA,
                                        pTRANSFER_BY,
                                        sysdate,
                                        pCREATE_BY,
                                        NULL,
                                        NULL,
                                        pSTATUS_ID,
                                        pDEPT_UPLOAD);
  COMMIT;
  INSERT INTO T_MTDB_CTRLDIE_TRANSFER2 ( MT_MODEL,
                                        PART_NO,
                                        DIE_MAKER,
                                        INJ_PLACE_DS,
                                        MOLD_NO,
                                        DS_FINAL_RESULT,
                                        ETA_TIMES,
                                        ACTUAL_DWG,
                                        PLAN_TRY_DT,
                                        PLAN_DS_DT,
                                        PTQA_REC_DT,
                                        PTQA_REC_DT_DS,
                                        PE_REC_DT,
                                        PE_REC_DATE_DS,
                                        JUD_FN_DT,
                                        JUD_FN_DT_D,
                                        SCAN_DT,
                                        SCAN_DT_DS,
                                        RESULT_DS,
                                        RESULT_DS_N1,
                                        DWG_NO_DS,
                                        DWG_NO_DS_N1,
                                        JUD_FN_DT_DS,
                                        JUD_FN_DT_DS_N1,
                                        SCAN_DATE_DS,
                                        SCAN_DATE_DS_N1,
                                        DIE_NEED_TRANSFER,
                                        PLAN_ETD,
                                        PLAN_ETA,
                                        ACT_ETA,
                                        TRANSFER_BY,
                                        CREATE_DT,
                                        CREATE_BY,
                                        UPDATE_DT,
                                        UPDATE_BY,
                                        STATUS_ID,
                                        DEPT_UPLOAD) 
                               VALUES ( pMT_MODEL,
                                        pPART_NO,
                                        pDIE_MAKER,
                                        pINJ_PLACE_DS,
                                        pMOLD_NO,
                                        pDS_FINAL_RESULT,
                                        pETA_TIMES,
                                        pACTUAL_DWG,
                                        pPLAN_TRY_DT,
                                        pPLAN_DS_DT,
                                        pPTQA_REC_DT,
                                        NULL,
                                        pPE_REC_DT,
                                        NULL,
                                        pJUD_FN_DT,
                                        NULL,
                                        pSCAN_DT,
                                        NULL,
                                        pRESULT_DS,
                                        NULL,
                                        pDWG_NO_DS,
                                        NULL,
                                        pJUD_FN_DT_DS,
                                        NULL,
                                        pSCAN_DATE_DS,
                                        NULL,
                                        pDIE_NEED_TRANSFER,
                                        pPLAN_ETD,
                                        pPLAN_ETA,
                                        pACT_ETA,
                                        pTRANSFER_BY,
                                        sysdate,
                                        pCREATE_BY,
                                        NULL,
                                        NULL,
                                        pSTATUS_ID,
                                        pDEPT_UPLOAD);
  COMMIT;
  pMTDB := 1;
    
  EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
   
     IF pDEPT_UPLOAD = 'EPE' THEN
     
         UPDATE T_MTDB_CTRLDIE_TRANSFER2 SET 
          -- DIE_MAKER = pDIE_MAKER,
          -- INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          DS_FINAL_RESULT = pDS_FINAL_RESULT,
          -- ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          -- PLAN_TRY_DT = pPLAN_TRY_DT,
          -- PLAN_DS_DT = pPLAN_DS_DT,
          PTQA_REC_DT = pPTQA_REC_DT,
            PTQA_REC_DT_DS = pPTQA_REC_DT,
          PE_REC_DT = pPE_REC_DT,
            PE_REC_DATE_DS = pPE_REC_DT,
          JUD_FN_DT = pJUD_FN_DT,
            JUD_FN_DT_D = pJUD_FN_DT,
          SCAN_DT = pSCAN_DT,
            SCAN_DT_DS = pJUD_FN_DT,
       /* RESULT_DS = pRESULT_DS,
            RESULT_DS_N1 = NULL,
          DWG_NO_DS = pDWG_NO_DS,
            DWG_NO_DS_N1 = NULL,
          JUD_FN_DT_DS = pJUD_FN_DT_DS,
            JUD_FN_DT_DS_N1 = NULL,
          SCAN_DATE_DS = pSCAN_DATE_DS,
            SCAN_DATE_DS_N1 = NULL, */
          -- DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          -- PLAN_ETD = pPLAN_ETD,
          -- PLAN_ETA = pPLAN_ETA,
          --ACT_ETA = pACT_ETA,
          -- TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY,
          DEPT_UPLOAD = pDEPT_UPLOAD
         WHERE MT_MODEL = pMT_MODEL
         AND PART_NO = pPART_NO 
         AND MOLD_NO = pMOLD_NO;
         
         UPDATE T_MTDB_CTRLDIE_TRANSFER SET 
            -- DIE_MAKER = pDIE_MAKER,
            -- INJ_PLACE_DS = pINJ_PLACE_DS,
            MOLD_NO = pMOLD_NO,
            DS_FINAL_RESULT = pDS_FINAL_RESULT,
            -- ETA_TIMES = pETA_TIMES,
            ACTUAL_DWG = pACTUAL_DWG,
            -- PLAN_TRY_DT = pPLAN_TRY_DT,
            -- PLAN_DS_DT = pPLAN_DS_DT,
            PTQA_REC_DT = pPTQA_REC_DT,
            PE_REC_DT = pPE_REC_DT,
            JUD_FN_DT = pJUD_FN_DT,
            SCAN_DT = pSCAN_DT,
            --RESULT_DS = pRESULT_DS,
            --DWG_NO_DS = pDWG_NO_DS,
            --JUD_FN_DT_DS = pJUD_FN_DT_DS,
            --SCAN_DATE_DS = pSCAN_DATE_DS,
            -- DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
            -- PLAN_ETD = pPLAN_ETD,
            -- PLAN_ETA = pPLAN_ETA,
            -- ACT_ETA = pACT_ETA,
            -- TRANSFER_BY = pTRANSFER_BY,
            UPDATE_DT = SYSDATE,
            UPDATE_BY = pUPDATE_BY
         WHERE MT_MODEL = pMT_MODEL
         AND PART_NO = pPART_NO 
         AND MOLD_NO = pMOLD_NO
         AND DEPT_UPLOAD = pDEPT_UPLOAD;
         COMMIT;
     
     ELSIF pDEPT_UPLOAD = 'IDPE' THEN
       IF pDS_FINAL_RESULT = 'PE' OR pDS_FINAL_RESULT = 'MTOK' OR pDS_FINAL_RESULT = 'OK' THEN
        pPE_REC_DATE_DS := pPLAN_DS_DT;
       ELSE 
        pPE_REC_DATE_DS := NULL;
       END IF; 
       
       IF pDS_FINAL_RESULT = 'MTOK' OR pDS_FINAL_RESULT = 'OK' THEN
        pJUD_FN_DT_D := pJUD_FN_DT;
        pSCAN_DT_DS := pJUD_FN_DT;
       ELSE 
        pJUD_FN_DT_D := NULL;
        pSCAN_DT_DS := NULL;
       END IF;
       
       UPDATE T_MTDB_CTRLDIE_TRANSFER2 SET 
          DIE_MAKER = pDIE_MAKER,
          -- INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          DS_FINAL_RESULT = pDS_FINAL_RESULT,
          -- ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          PLAN_TRY_DT = pPLAN_TRY_DT,
          PLAN_DS_DT = pPLAN_DS_DT,
          --PTQA_REC_DT = pPTQA_REC_DT,
            PTQA_REC_DT_DS = pPTQA_REC_DT,
          --PE_REC_DT = pPE_REC_DT,
            PE_REC_DATE_DS = pPE_REC_DATE_DS,
          JUD_FN_DT = pJUD_FN_DT,
            JUD_FN_DT_D = pJUD_FN_DT_D,
          SCAN_DT = pSCAN_DT,
            SCAN_DT_DS = pSCAN_DT_DS,
         /* RESULT_DS = pRESULT_DS,
            RESULT_DS_N1 = NULL,
          DWG_NO_DS = pDWG_NO_DS,
            DWG_NO_DS_N1 = NULL,
          JUD_FN_DT_DS = pJUD_FN_DT_DS,
            JUD_FN_DT_DS_N1 = NULL,
          SCAN_DATE_DS = pSCAN_DATE_DS,
            SCAN_DATE_DS_N1 = NULL,*/
          -- DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          -- PLAN_ETD = pPLAN_ETD,
          -- PLAN_ETA = pPLAN_ETA,
          ACT_ETA = pACT_ETA,
          -- TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY,
          DEPT_UPLOAD = pDEPT_UPLOAD
         WHERE MT_MODEL = pMT_MODEL
         AND PART_NO = pPART_NO 
         AND MOLD_NO = pMOLD_NO;
         
       UPDATE T_MTDB_CTRLDIE_TRANSFER SET 
          DIE_MAKER = pDIE_MAKER,
          -- INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          DS_FINAL_RESULT = pDS_FINAL_RESULT,
          -- ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          PLAN_TRY_DT = pPLAN_TRY_DT,
          PLAN_DS_DT = pPLAN_DS_DT,
          -- PTQA_REC_DT = pPTQA_REC_DT,
          -- PE_REC_DT = pPE_REC_DT,
          JUD_FN_DT = pJUD_FN_DT,
          SCAN_DT = pSCAN_DT,
          --RESULT_DS = pRESULT_DS,
          --DWG_NO_DS = pDWG_NO_DS,
          --JUD_FN_DT_DS = pJUD_FN_DT_DS,
          --SCAN_DATE_DS = pSCAN_DATE_DS,
          -- DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          -- PLAN_ETD = pPLAN_ETD,
          -- PLAN_ETA = pPLAN_ETA,
          ACT_ETA = pACT_ETA,
          -- TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY
       WHERE MT_MODEL = pMT_MODEL
       AND PART_NO = pPART_NO 
       AND MOLD_NO = pMOLD_NO
       AND DEPT_UPLOAD = pDEPT_UPLOAD;
       COMMIT; 
     
     ELSIF pDEPT_UPLOAD = 'RA_MO' THEN
        IF pDS_FINAL_RESULT = 'PE' OR pDS_FINAL_RESULT = 'MTOK' OR pDS_FINAL_RESULT = 'OK' THEN
          pPE_REC_DATE_DS := pPLAN_DS_DT;
        ELSE
          pPE_REC_DATE_DS := NULL;
        END IF;
        
        IF pDS_FINAL_RESULT = 'MTOK' OR pDS_FINAL_RESULT = 'OK' THEN
          pJUD_FN_DT_D := pJUD_FN_DT;
          pSCAN_DT_DS := pJUD_FN_DT;
        ELSE
          pJUD_FN_DT_D := NULL;
          pSCAN_DT_DS := NULL;
        END IF;
        
        UPDATE T_MTDB_CTRLDIE_TRANSFER2 SET 
          DIE_MAKER = pDIE_MAKER,
          -- INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          DS_FINAL_RESULT = pDS_FINAL_RESULT,
          -- ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          PLAN_TRY_DT = pPLAN_TRY_DT,
          PLAN_DS_DT = pPLAN_DS_DT,
          --PTQA_REC_DT = pPTQA_REC_DT,
            PTQA_REC_DT_DS = pPTQA_REC_DT,
          --PE_REC_DT = pPE_REC_DT,
            PE_REC_DATE_DS = pPE_REC_DATE_DS,
          JUD_FN_DT = pJUD_FN_DT,
            JUD_FN_DT_D = pJUD_FN_DT_D,
          SCAN_DT = pSCAN_DT,
            SCAN_DT_DS = pSCAN_DT_DS,
          RESULT_DS = pRESULT_DS,
            RESULT_DS_N1 = pRESULT_DS,
          DWG_NO_DS = pDWG_NO_DS,
            DWG_NO_DS_N1 = pDWG_NO_DS,
          JUD_FN_DT_DS = pJUD_FN_DT_DS,
            JUD_FN_DT_DS_N1 = pJUD_FN_DT_DS,
          SCAN_DATE_DS = pSCAN_DATE_DS,
            SCAN_DATE_DS_N1 = pSCAN_DATE_DS,
          -- DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          -- PLAN_ETD = pPLAN_ETD,
          -- PLAN_ETA = pPLAN_ETA,
          ACT_ETA = pACT_ETA,
          -- TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY,
          DEPT_UPLOAD = pDEPT_UPLOAD
         WHERE MT_MODEL = pMT_MODEL
         AND PART_NO = pPART_NO 
         AND MOLD_NO = pMOLD_NO;
         
       UPDATE T_MTDB_CTRLDIE_TRANSFER SET 
          DIE_MAKER = pDIE_MAKER,
          -- INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          DS_FINAL_RESULT = pDS_FINAL_RESULT,
          -- ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          PLAN_TRY_DT = pPLAN_TRY_DT,
          PLAN_DS_DT = pPLAN_DS_DT,
          -- PTQA_REC_DT = pPTQA_REC_DT,
          -- PE_REC_DT = pPE_REC_DT,
          JUD_FN_DT = pJUD_FN_DT,
          SCAN_DT = pSCAN_DT,
          RESULT_DS = pRESULT_DS,
          DWG_NO_DS = pDWG_NO_DS,
          JUD_FN_DT_DS = pJUD_FN_DT_DS,
          SCAN_DATE_DS = pSCAN_DATE_DS,
          -- DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          -- PLAN_ETD = pPLAN_ETD,
          -- PLAN_ETA = pPLAN_ETA,
          ACT_ETA = pACT_ETA,
          -- TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY
       WHERE MT_MODEL = pMT_MODEL
       AND PART_NO = pPART_NO 
       AND MOLD_NO = pMOLD_NO
       AND DEPT_UPLOAD = pDEPT_UPLOAD;
       COMMIT;
    
      ELSIF pDEPT_UPLOAD = 'HT_PX' THEN
        IF pDS_FINAL_RESULT = 'PE' OR pDS_FINAL_RESULT = 'MTOK' OR pDS_FINAL_RESULT = 'OK' THEN
          pPE_REC_DATE_DS := pPE_REC_DT;
        ELSE 
          pPE_REC_DATE_DS := NULL;
        END IF;  
          
        IF pDS_FINAL_RESULT = 'MTOK' OR pDS_FINAL_RESULT = 'OK' THEN
          pJUD_FN_DT_D := pJUD_FN_DT;
          pSCAN_DT_DS := pJUD_FN_DT;
        ELSE 
          pJUD_FN_DT_D := NULL;
          pSCAN_DT_DS := NULL;
        END IF;
      
        UPDATE T_MTDB_CTRLDIE_TRANSFER2 SET 
          DIE_MAKER = pDIE_MAKER,
          -- INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          DS_FINAL_RESULT = pDS_FINAL_RESULT,
          -- ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          --PLAN_TRY_DT = pPLAN_TRY_DT,
          PLAN_DS_DT = pPLAN_DS_DT,
          -- PTQA_REC_DT = pPTQA_REC_DT,
          --  PTQA_REC_DT_DS = pPTQA_REC_DT,
          PE_REC_DT = pPE_REC_DT,
            PE_REC_DATE_DS = pPE_REC_DATE_DS,
          JUD_FN_DT = pJUD_FN_DT,
            JUD_FN_DT_D = pJUD_FN_DT_D,
          SCAN_DT = pSCAN_DT,
            SCAN_DT_DS = pSCAN_DT_DS,
          RESULT_DS = pRESULT_DS,
            RESULT_DS_N1 = pRESULT_DS,
          DWG_NO_DS = pDWG_NO_DS,
            DWG_NO_DS_N1 = pDWG_NO_DS,
          JUD_FN_DT_DS = pJUD_FN_DT_DS,
            JUD_FN_DT_DS_N1 = pJUD_FN_DT_DS,
          SCAN_DATE_DS = pSCAN_DATE_DS,
            SCAN_DATE_DS_N1 = pSCAN_DATE_DS,
          -- DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          -- PLAN_ETD = pPLAN_ETD,
          -- PLAN_ETA = pPLAN_ETA,
          ACT_ETA = pACT_ETA,
          -- TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY,
          DEPT_UPLOAD = pDEPT_UPLOAD
         WHERE MT_MODEL = pMT_MODEL
         AND PART_NO = pPART_NO 
         AND MOLD_NO = pMOLD_NO;
         
       UPDATE T_MTDB_CTRLDIE_TRANSFER SET 
          DIE_MAKER = pDIE_MAKER,
          -- INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          DS_FINAL_RESULT = pDS_FINAL_RESULT,
          -- ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          --PLAN_TRY_DT = pPLAN_TRY_DT,
          PLAN_DS_DT = pPLAN_DS_DT,
          -- PTQA_REC_DT = pPTQA_REC_DT,
          PE_REC_DT = pPE_REC_DT,
          JUD_FN_DT = pJUD_FN_DT,
          SCAN_DT = pSCAN_DT,
          RESULT_DS = pRESULT_DS,
          DWG_NO_DS = pDWG_NO_DS,
          JUD_FN_DT_DS = pJUD_FN_DT_DS,
          SCAN_DATE_DS = pSCAN_DATE_DS,
          -- DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          -- PLAN_ETD = pPLAN_ETD,
          -- PLAN_ETA = pPLAN_ETA,
          ACT_ETA = pACT_ETA,
          -- TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY
       WHERE MT_MODEL = pMT_MODEL
       AND PART_NO = pPART_NO 
       AND MOLD_NO = pMOLD_NO
       AND DEPT_UPLOAD = pDEPT_UPLOAD;
       COMMIT;  
       
       ELSIF pDEPT_UPLOAD = 'RA_PX' THEN
        IF pDS_FINAL_RESULT = 'PE' OR pDS_FINAL_RESULT = 'MTOK' OR pDS_FINAL_RESULT = 'OK' THEN
          pPE_REC_DATE_DS := pPLAN_DS_DT;
        ELSE
          pPE_REC_DATE_DS := NULL;
        END IF;
        
        IF pDS_FINAL_RESULT = 'MTOK' OR pDS_FINAL_RESULT = 'OK' THEN
          pJUD_FN_DT_D := pJUD_FN_DT;
          pSCAN_DT_DS := pJUD_FN_DT;
        ELSE
          pJUD_FN_DT_D := NULL;
          pSCAN_DT_DS := NULL; 
        END IF;
      
        UPDATE T_MTDB_CTRLDIE_TRANSFER2 SET 
          DIE_MAKER = pDIE_MAKER,
          -- INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          DS_FINAL_RESULT = pDS_FINAL_RESULT,
          -- ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          PLAN_TRY_DT = pPLAN_TRY_DT,
          PLAN_DS_DT = pPLAN_DS_DT,
          -- PTQA_REC_DT = pPTQA_REC_DT,
          --  PTQA_REC_DT_DS = pPTQA_REC_DT,
          PE_REC_DT = pPE_REC_DT,
            PE_REC_DATE_DS = pPE_REC_DATE_DS,
          JUD_FN_DT = pJUD_FN_DT,
            JUD_FN_DT_D = pJUD_FN_DT_D,
          SCAN_DT = pSCAN_DT,
            SCAN_DT_DS = pSCAN_DT_DS,
          /*RESULT_DS = pRESULT_DS,
            RESULT_DS_N1 = NULL,
          DWG_NO_DS = pDWG_NO_DS,
            DWG_NO_DS_N1 = NULL,
          JUD_FN_DT_DS = pJUD_FN_DT_DS,
            JUD_FN_DT_DS_N1 = NULL,
          SCAN_DATE_DS = pSCAN_DATE_DS,
            SCAN_DATE_DS_N1 = NULL,*/
          -- DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          -- PLAN_ETD = pPLAN_ETD,
          -- PLAN_ETA = pPLAN_ETA,
          ACT_ETA = pACT_ETA,
          -- TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY,
          DEPT_UPLOAD = pDEPT_UPLOAD
         WHERE MT_MODEL = pMT_MODEL
         AND PART_NO = pPART_NO 
         AND MOLD_NO = pMOLD_NO;
         
       UPDATE T_MTDB_CTRLDIE_TRANSFER SET 
          DIE_MAKER = pDIE_MAKER,
          -- INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          DS_FINAL_RESULT = pDS_FINAL_RESULT,
          -- ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          PLAN_TRY_DT = pPLAN_TRY_DT,
          PLAN_DS_DT = pPLAN_DS_DT,
          -- PTQA_REC_DT = pPTQA_REC_DT,
          --PE_REC_DT = pPE_REC_DT,
          JUD_FN_DT = pJUD_FN_DT,
          SCAN_DT = pSCAN_DT,
          --RESULT_DS = pRESULT_DS,
          --DWG_NO_DS = pDWG_NO_DS,
          --JUD_FN_DT_DS = pJUD_FN_DT_DS,
          --SCAN_DATE_DS = pSCAN_DATE_DS,
          -- DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          -- PLAN_ETD = pPLAN_ETD,
          -- PLAN_ETA = pPLAN_ETA,
          ACT_ETA = pACT_ETA,
          -- TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY
       WHERE MT_MODEL = pMT_MODEL
       AND PART_NO = pPART_NO 
       AND MOLD_NO = pMOLD_NO
       AND DEPT_UPLOAD = pDEPT_UPLOAD;
       COMMIT;
       
       ELSIF pDEPT_UPLOAD = 'PTQA_DS' THEN
        IF pDS_FINAL_RESULT = 'NG' THEN 
           pPTQA_REC_DT_DS := NULL;
           pPE_REC_DATE_DS := NULL;
           pJUD_FN_DT_D := NULL;
           pSCAN_DT_DS := NULL;
           pRESULT_DS_N1 := pDS_FINAL_RESULT;
           pDWG_NO_DS_N1 := pACTUAL_DWG;
           pJUD_FN_DT_DS_N1 := pJUD_FN_DT;
           pSCAN_DATE_DS_N1 := pSCAN_DT;
        ELSE
           pPTQA_REC_DT_DS := pPTQA_REC_DT;
           pPE_REC_DATE_DS := pPE_REC_DT;
           pJUD_FN_DT_D := pJUD_FN_DT;
           pSCAN_DT_DS := pSCAN_DT;
           pRESULT_DS_N1 := pDS_FINAL_RESULT;
           pDWG_NO_DS_N1 := pACTUAL_DWG;
           pJUD_FN_DT_DS_N1 := pJUD_FN_DT_DS;
           pSCAN_DATE_DS_N1 := pSCAN_DT_DS;
        END IF;
        
         UPDATE T_MTDB_CTRLDIE_TRANSFER SET 
            DIE_MAKER = pDIE_MAKER,
            INJ_PLACE_DS = pINJ_PLACE_DS,
            MOLD_NO = pMOLD_NO,
            DS_FINAL_RESULT = pDS_FINAL_RESULT,
            ETA_TIMES = pETA_TIMES,
            ACTUAL_DWG = pACTUAL_DWG,
            --PLAN_TRY_DT = pPLAN_TRY_DT,
            --PLAN_DS_DT = pPLAN_DS_DT,
            PTQA_REC_DT = pPTQA_REC_DT,
            PE_REC_DT = pPE_REC_DT,
            JUD_FN_DT = pJUD_FN_DT,
            SCAN_DT = pSCAN_DT,
            RESULT_DS = pRESULT_DS,
            DWG_NO_DS = pDWG_NO_DS,
            JUD_FN_DT_DS = pJUD_FN_DT_DS,
            SCAN_DATE_DS = pSCAN_DATE_DS,
            -- DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
            -- PLAN_ETD = pPLAN_ETD,
            -- PLAN_ETA = pPLAN_ETA,
            --ACT_ETA = pACT_ETA,
            -- TRANSFER_BY = pTRANSFER_BY,
            UPDATE_DT = SYSDATE,
            UPDATE_BY = pUPDATE_BY
         WHERE MT_MODEL = pMT_MODEL
         AND PART_NO = pPART_NO 
         AND MOLD_NO = pMOLD_NO
         AND DEPT_UPLOAD = pDEPT_UPLOAD;
         
         UPDATE T_MTDB_CTRLDIE_TRANSFER2 SET 
          DIE_MAKER = pDIE_MAKER,
          INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          DS_FINAL_RESULT = pDS_FINAL_RESULT,
          ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          --PLAN_TRY_DT = pPLAN_TRY_DT,
          --PLAN_DS_DT = pPLAN_DS_DT,
          PTQA_REC_DT = pPTQA_REC_DT,
            PTQA_REC_DT_DS = pPTQA_REC_DT_DS,
          PE_REC_DT = pPE_REC_DT,
            PE_REC_DATE_DS = pPE_REC_DATE_DS,
          JUD_FN_DT = pJUD_FN_DT,
            JUD_FN_DT_D = pJUD_FN_DT_D,
          SCAN_DT = pSCAN_DT,
            SCAN_DT_DS = pSCAN_DT_DS,
          RESULT_DS = pRESULT_DS,
            RESULT_DS_N1 = pRESULT_DS_N1,
          DWG_NO_DS = pDWG_NO_DS,
            DWG_NO_DS_N1 = pDWG_NO_DS_N1,
          JUD_FN_DT_DS = pJUD_FN_DT_DS,
            JUD_FN_DT_DS_N1 = pJUD_FN_DT_DS_N1,
          SCAN_DATE_DS = pSCAN_DATE_DS,
            SCAN_DATE_DS_N1 = pSCAN_DATE_DS_N1,
          -- DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          -- PLAN_ETD = pPLAN_ETD,
          -- PLAN_ETA = pPLAN_ETA,
          --ACT_ETA = pACT_ETA,
          -- TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY,
          DEPT_UPLOAD = pDEPT_UPLOAD
         WHERE MT_MODEL = pMT_MODEL
         AND PART_NO = pPART_NO 
         AND MOLD_NO = pMOLD_NO;
         COMMIT;
       
       ELSIF pDEPT_UPLOAD = 'PTQA_PACKING_DS' THEN
       
       UPDATE T_MTDB_CTRLDIE_TRANSFER2 SET 
          DIE_MAKER = pDIE_MAKER,
          INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          DS_FINAL_RESULT = pDS_FINAL_RESULT,
          ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          --PLAN_TRY_DT = pPLAN_TRY_DT,
          --PLAN_DS_DT = pPLAN_DS_DT,
          PTQA_REC_DT = pPTQA_REC_DT,
            PTQA_REC_DT_DS = pPTQA_REC_DT,
          PE_REC_DT = pPE_REC_DT,
            PE_REC_DATE_DS = pPE_REC_DT,
          JUD_FN_DT = pJUD_FN_DT,
            JUD_FN_DT_D = pJUD_FN_DT,
          SCAN_DT = pSCAN_DT,
            SCAN_DT_DS = pSCAN_DT,
          /*RESULT_DS = pRESULT_DS,
            RESULT_DS_N1 = pRESULT_DS_N1,
          DWG_NO_DS = pDWG_NO_DS,
            DWG_NO_DS_N1 = pDWG_NO_DS_N1,
          JUD_FN_DT_DS = pJUD_FN_DT_DS,
            JUD_FN_DT_DS_N1 = pJUD_FN_DT_DS_N1,
          SCAN_DATE_DS = pSCAN_DATE_DS,
            SCAN_DATE_DS_N1 = pSCAN_DATE_DS_N1,*/
          -- DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          -- PLAN_ETD = pPLAN_ETD,
          -- PLAN_ETA = pPLAN_ETA,
          --ACT_ETA = pACT_ETA,
          -- TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY,
          DEPT_UPLOAD = pDEPT_UPLOAD
         WHERE MT_MODEL = pMT_MODEL
         AND PART_NO = pPART_NO 
         AND MOLD_NO = pMOLD_NO;
         COMMIT;
       
       UPDATE T_MTDB_CTRLDIE_TRANSFER SET 
          DIE_MAKER = pDIE_MAKER,
          INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          DS_FINAL_RESULT = pDS_FINAL_RESULT,
          ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          --PLAN_TRY_DT = pPLAN_TRY_DT,
          --PLAN_DS_DT = pPLAN_DS_DT,
          PTQA_REC_DT = pPTQA_REC_DT,
          PE_REC_DT = pPE_REC_DT,
          JUD_FN_DT = pJUD_FN_DT,
          SCAN_DT = pSCAN_DT,
          --RESULT_DS = pRESULT_DS,
          --DWG_NO_DS = pDWG_NO_DS,
          --JUD_FN_DT_DS = pJUD_FN_DT_DS,
          --SCAN_DATE_DS = pSCAN_DATE_DS,
          -- DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          -- PLAN_ETD = pPLAN_ETD,
          -- PLAN_ETA = pPLAN_ETA,
          --ACT_ETA = pACT_ETA,
          -- TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY
       WHERE MT_MODEL = pMT_MODEL
       AND PART_NO = pPART_NO 
       AND MOLD_NO = pMOLD_NO
       AND DEPT_UPLOAD = pDEPT_UPLOAD;
       COMMIT;
              
       ELSIF pDEPT_UPLOAD = 'PUR1_CHTCTRL_DS' THEN
        IF pDS_FINAL_RESULT = 'PE' OR pDS_FINAL_RESULT = 'MTOK' OR pDS_FINAL_RESULT = 'OK' THEN
          pPE_REC_DATE_DS := pPLAN_DS_DT;
        ELSE
          pPE_REC_DATE_DS := NULL;
        END IF;
        
        IF pDS_FINAL_RESULT = 'MTOK' OR pDS_FINAL_RESULT = 'OK' THEN
          pJUD_FN_DT_D := pPLAN_DS_DT;
          pSCAN_DT_DS := pPLAN_DS_DT;
        ELSE
          pJUD_FN_DT_D := NULL;
          pSCAN_DT_DS := NULL; 
        END IF;
        
        UPDATE T_MTDB_CTRLDIE_TRANSFER2 SET 
          DIE_MAKER = pDIE_MAKER,
          INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          DS_FINAL_RESULT = pDS_FINAL_RESULT,
          --ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          PLAN_TRY_DT = pPLAN_TRY_DT,
          PLAN_DS_DT = pPLAN_DS_DT,
          PTQA_REC_DT = pPTQA_REC_DT,
            PTQA_REC_DT_DS = pPTQA_REC_DT,
          PE_REC_DT = pPE_REC_DT,
            PE_REC_DATE_DS = pPE_REC_DATE_DS,
          JUD_FN_DT = pJUD_FN_DT,
            JUD_FN_DT_D = pJUD_FN_DT_D,
          SCAN_DT = pSCAN_DT,
            SCAN_DT_DS = pSCAN_DT_DS,
          RESULT_DS = pRESULT_DS,
            RESULT_DS_N1 = pRESULT_DS,
          DWG_NO_DS = pDWG_NO_DS,
            DWG_NO_DS_N1 = pDWG_NO_DS,
          JUD_FN_DT_DS = pJUD_FN_DT_DS,
            JUD_FN_DT_DS_N1 = pJUD_FN_DT_DS,
          SCAN_DATE_DS = pSCAN_DATE_DS,
            SCAN_DATE_DS_N1 = pSCAN_DATE_DS,
          DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          PLAN_ETD = pPLAN_ETD,
          PLAN_ETA = pPLAN_ETA,
          --ACT_ETA = pACT_ETA,
          TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY,
          DEPT_UPLOAD = pDEPT_UPLOAD
         WHERE MT_MODEL = pMT_MODEL
         AND PART_NO = pPART_NO 
         AND MOLD_NO = pMOLD_NO;
         COMMIT;
         
       UPDATE T_MTDB_CTRLDIE_TRANSFER SET 
          DIE_MAKER = pDIE_MAKER,
          INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          DS_FINAL_RESULT = pDS_FINAL_RESULT,
          --ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          PLAN_TRY_DT = pPLAN_TRY_DT,
          PLAN_DS_DT = pPLAN_DS_DT,
          --PTQA_REC_DT = pPTQA_REC_DT,
          --PE_REC_DT = pPE_REC_DT,
          --JUD_FN_DT = pJUD_FN_DT,
          --SCAN_DT = pSCAN_DT,
          RESULT_DS = pRESULT_DS,
          DWG_NO_DS = pDWG_NO_DS,
          JUD_FN_DT_DS = pJUD_FN_DT_DS,
          SCAN_DATE_DS = pSCAN_DATE_DS,
          DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          PLAN_ETD = pPLAN_ETD,
          PLAN_ETA = pPLAN_ETA,
          --ACT_ETA = pACT_ETA,
          TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY
       WHERE MT_MODEL = pMT_MODEL
       AND PART_NO = pPART_NO 
       AND MOLD_NO = pMOLD_NO
       AND DEPT_UPLOAD = pDEPT_UPLOAD;
       COMMIT;
       
       ELSIF pDEPT_UPLOAD = 'PUR1_SUPPCTRL_DS' THEN
       
        UPDATE T_MTDB_CTRLDIE_TRANSFER2 SET 
          DIE_MAKER = pDIE_MAKER,
          --INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          --DS_FINAL_RESULT = pDS_FINAL_RESULT,
          --ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          PLAN_TRY_DT = pPLAN_TRY_DT,
          PLAN_DS_DT = pPLAN_DS_DT,
          PTQA_REC_DT = pPTQA_REC_DT,
            PTQA_REC_DT_DS = pPTQA_REC_DT,
          PE_REC_DT = pPE_REC_DT,
            PE_REC_DATE_DS = NULL,
          JUD_FN_DT = pJUD_FN_DT,
            JUD_FN_DT_D = NULL,
          SCAN_DT = pSCAN_DT,
            SCAN_DT_DS = NULL,
          RESULT_DS = pRESULT_DS,
            RESULT_DS_N1 = NULL,
          DWG_NO_DS = pDWG_NO_DS,
            DWG_NO_DS_N1 = NULL,
          JUD_FN_DT_DS = pJUD_FN_DT_DS,
            JUD_FN_DT_DS_N1 = NULL,
          SCAN_DATE_DS = pSCAN_DATE_DS,
            SCAN_DATE_DS_N1 = NULL,
          DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          PLAN_ETD = pPLAN_ETD,
          PLAN_ETA = pPLAN_ETA,
          ACT_ETA = pACT_ETA,
          TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY,
          DEPT_UPLOAD = pDEPT_UPLOAD
         WHERE MT_MODEL = pMT_MODEL
         AND PART_NO = pPART_NO 
         AND MOLD_NO = pMOLD_NO;
         COMMIT;
         
       UPDATE T_MTDB_CTRLDIE_TRANSFER SET 
          DIE_MAKER = pDIE_MAKER,
          --INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          --DS_FINAL_RESULT = pDS_FINAL_RESULT,
          --ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          PLAN_TRY_DT = pPLAN_TRY_DT,
          PLAN_DS_DT = pPLAN_DS_DT,
          --PTQA_REC_DT = pPTQA_REC_DT,
          --PE_REC_DT = pPE_REC_DT,
          --JUD_FN_DT = pJUD_FN_DT,
          --SCAN_DT = pSCAN_DT,
          --RESULT_DS = pRESULT_DS,
          --DWG_NO_DS = pDWG_NO_DS,
          --JUD_FN_DT_DS = pJUD_FN_DT_DS,
          --SCAN_DATE_DS = pSCAN_DATE_DS,
          DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          PLAN_ETD = pPLAN_ETD,
          PLAN_ETA = pPLAN_ETA,
          ACT_ETA = pACT_ETA,
          TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY
       WHERE MT_MODEL = pMT_MODEL
       AND PART_NO = pPART_NO 
       AND MOLD_NO = pMOLD_NO
       AND DEPT_UPLOAD = pDEPT_UPLOAD;
       COMMIT;
       
       ELSIF pDEPT_UPLOAD = 'PUR1_PACKING_SUPPCTRL_DS' THEN
       
        UPDATE T_MTDB_CTRLDIE_TRANSFER2 SET 
          DIE_MAKER = pDIE_MAKER,
          --INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          --DS_FINAL_RESULT = pDS_FINAL_RESULT,
          --ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          PLAN_TRY_DT = pPLAN_TRY_DT,
          PLAN_DS_DT = pPLAN_DS_DT,
         /* PTQA_REC_DT = pPTQA_REC_DT,
            PTQA_REC_DT_DS = pPTQA_REC_DT,
          PE_REC_DT = pPE_REC_DT,
            PE_REC_DATE_DS = NULL,
          JUD_FN_DT = pJUD_FN_DT,
            JUD_FN_DT_D = NULL,
          SCAN_DT = pSCAN_DT,
            SCAN_DT_DS = NULL,
          RESULT_DS = pRESULT_DS,
            RESULT_DS_N1 = NULL,
          DWG_NO_DS = pDWG_NO_DS,
            DWG_NO_DS_N1 = NULL,
          JUD_FN_DT_DS = pJUD_FN_DT_DS,
            JUD_FN_DT_DS_N1 = NULL,
          SCAN_DATE_DS = pSCAN_DATE_DS,
            SCAN_DATE_DS_N1 = NULL,*/
          --DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          --PLAN_ETD = pPLAN_ETD,
          --PLAN_ETA = pPLAN_ETA,
          --ACT_ETA = pACT_ETA,
          --TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY,
          DEPT_UPLOAD = pDEPT_UPLOAD
         WHERE MT_MODEL = pMT_MODEL
         AND PART_NO = pPART_NO 
         AND MOLD_NO = pMOLD_NO;
         COMMIT;
         
       UPDATE T_MTDB_CTRLDIE_TRANSFER SET 
          DIE_MAKER = pDIE_MAKER,
          --INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          --DS_FINAL_RESULT = pDS_FINAL_RESULT,
          --ETA_TIMES = pETA_TIMES,
          ACTUAL_DWG = pACTUAL_DWG,
          PLAN_TRY_DT = pPLAN_TRY_DT,
          PLAN_DS_DT = pPLAN_DS_DT,
          --PTQA_REC_DT = pPTQA_REC_DT,
          --PE_REC_DT = pPE_REC_DT,
          --JUD_FN_DT = pJUD_FN_DT,
          --SCAN_DT = pSCAN_DT,
          --RESULT_DS = pRESULT_DS,
          --DWG_NO_DS = pDWG_NO_DS,
          --JUD_FN_DT_DS = pJUD_FN_DT_DS,
          --SCAN_DATE_DS = pSCAN_DATE_DS,
          --DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          --PLAN_ETD = pPLAN_ETD,
          --PLAN_ETA = pPLAN_ETA,
          --ACT_ETA = pACT_ETA,
          --TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY
       WHERE MT_MODEL = pMT_MODEL
       AND PART_NO = pPART_NO 
       AND MOLD_NO = pMOLD_NO
       AND DEPT_UPLOAD = pDEPT_UPLOAD;
       COMMIT;
       
       ELSIF pDEPT_UPLOAD = 'PUR2' THEN
       UPDATE T_MTDB_CTRLDIE_TRANSFER SET 
          --DIE_MAKER = pDIE_MAKER,
          --INJ_PLACE_DS = pINJ_PLACE_DS,
          MOLD_NO = pMOLD_NO,
          --DS_FINAL_RESULT = pDS_FINAL_RESULT,
          --ETA_TIMES = pETA_TIMES,
          --ACTUAL_DWG = pACTUAL_DWG,
          --PLAN_TRY_DT = pPLAN_TRY_DT,
          PLAN_DS_DT = pPLAN_DS_DT,
          --PTQA_REC_DT = pPTQA_REC_DT,
          --PE_REC_DT = pPE_REC_DT,
          --JUD_FN_DT = pJUD_FN_DT,
          --SCAN_DT = pSCAN_DT,
          --RESULT_DS = pRESULT_DS,
          --DWG_NO_DS = pDWG_NO_DS,
          --JUD_FN_DT_DS = pJUD_FN_DT_DS,
          --SCAN_DATE_DS = pSCAN_DATE_DS,
          --DIE_NEED_TRANSFER = pDIE_NEED_TRANSFER,
          --PLAN_ETD = pPLAN_ETD,
          --PLAN_ETA = pPLAN_ETA,
          --ACT_ETA = pACT_ETA,
          --TRANSFER_BY = pTRANSFER_BY,
          UPDATE_DT = SYSDATE,
          UPDATE_BY = pUPDATE_BY
       WHERE MT_MODEL = pMT_MODEL
       AND PART_NO = pPART_NO 
       AND MOLD_NO = pMOLD_NO
       AND DEPT_UPLOAD = pDEPT_UPLOAD;
       COMMIT;
       
       
       
    END IF;
    pMTDB := 1;
  END MTDB_CTRLDIE_TRANSFER_INS_UPD;
--------------------------------------------------------------------------------
PROCEDURE P_CTRLDIE_TRANSFERPART_INS_UPD(
              pMT_MODEL   VARCHAR2,
              pPART_NO   VARCHAR2,
              pDIM   VARCHAR2,
              pDWG_NO   VARCHAR2,
              pMOLD_NO   VARCHAR2,
              pSUP_CD   VARCHAR2,
              pPO_STATUS   VARCHAR2,
              pPLAN_ETD   VARCHAR2,
              pPLAN_ETA   VARCHAR2,
              pACT_ETA   VARCHAR2,
              pACT_JUD   VARCHAR2,
              pPO_NO   VARCHAR2,
              pQTY_REC   VARCHAR2,
              pQTY_APV   VARCHAR2,
              pCURRENCY   VARCHAR2,
              pUNIT_PRICE   VARCHAR2,
              pGROUP_CD   VARCHAR2,
              pCREATE_BY VARCHAR2,
              pUPDATE_BY VARCHAR2,
              pSTATUS_ID VARCHAR2,
              pDEPT_UPLOAD VARCHAR2,
              pMTDBPART OUT NUMBER)AS
    BEGIN
INSERT INTO T_MTDB_CTRLDIE_TRANSFER_PART  ( MT_MODEL,
                                            PART_NO,
                                            DIM,
                                            DWG_NO,
                                            MOLD_NO,
                                            SUP_CD,
                                            PO_STATUS,
                                            PLAN_ETD,
                                            PLAN_ETA,
                                            ACT_ETA,
                                            ACT_JUD,
                                            PO_NO,
                                            QTY_REC,
                                            QTY_APV,
                                            CURRENCY,
                                            UNIT_PRICE,
                                            GROUP_CD,
                                            CREATE_DT,
                                            CREATE_BY,
                                            UPDATE_DT,
                                            UPDATE_BY,
                                            STATUS_ID,
                                            DEPT_UPLOAD)
                                   VALUES ( pMT_MODEL,
                                            pPART_NO,
                                            pDIM,
                                            pDWG_NO,
                                            pMOLD_NO,
                                            pSUP_CD,
                                            pPO_STATUS,
                                            pPLAN_ETD,
                                            pPLAN_ETA,
                                            pACT_ETA,
                                            pACT_JUD,
                                            pPO_NO,
                                            pQTY_REC,
                                            pQTY_APV,
                                            pCURRENCY,
                                            pUNIT_PRICE,
                                            pGROUP_CD,
                                            sysdate,
                                            pCREATE_BY,
                                            NULL,
                                            NULL,
                                            NULL,
                                            pDEPT_UPLOAD);
                          COMMIT;                                      
                                 pMTDBPART := 1;
    
  EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
    IF pDEPT_UPLOAD = 'PUR1_CHTCTRL_PART' THEN
       UPDATE T_MTDB_CTRLDIE_TRANSFER_PART SET 
       --DIM  =  pDIM,
       --MOLD_NO  =  pMOLD_NO,
       SUP_CD  =  pSUP_CD,
       --PO_STATUS  =  pPO_STATUS,
       PLAN_ETD  =  pPLAN_ETD,
       PLAN_ETA  =  pPLAN_ETA,
       --ACT_ETA  =  pACT_ETA,
       --ACT_JUD  =  pACT_JUD,
       PO_NO  =  pPO_NO,
       --QTY_REC  =  pQTY_REC,
       --QTY_APV  =  pQTY_APV,
       --CURRENCY  =  pCURRENCY,
       --UNIT_PRICE  =  pUNIT_PRICE,
       UPDATE_DT = SYSDATE,
       UPDATE_BY = pUPDATE_BY,
       --STATUS_ID = pSTATUS_ID
       DEPT_UPLOAD = pDEPT_UPLOAD                                   
       WHERE MT_MODEL = pMT_MODEL
       AND PART_NO = pPART_NO 
       --AND DEPT_UPLOAD = pDEPT_UPLOAD
       AND DIM  =  pDIM
       AND DWG_NO  =  pDWG_NO
       AND GROUP_CD  =  pGROUP_CD;
       COMMIT;
       
    ELSIF pDEPT_UPLOAD = 'PUR1_SUPPCTRL_PART' THEN
       UPDATE T_MTDB_CTRLDIE_TRANSFER_PART SET 
       --DIM  =  pDIM,
       --MOLD_NO  =  pMOLD_NO,
       SUP_CD  =  pSUP_CD,
       --PO_STATUS  =  pPO_STATUS,
       --PLAN_ETD  =  pPLAN_ETD,
       PLAN_ETA  =  pPLAN_ETA,
       --ACT_ETA  =  pACT_ETA,
       --ACT_JUD  =  pACT_JUD,
       PO_NO  =  pPO_NO,
       --QTY_REC  =  pQTY_REC,
       --QTY_APV  =  pQTY_APV,
       --CURRENCY  =  pCURRENCY,
       --UNIT_PRICE  =  pUNIT_PRICE,
       UPDATE_DT = SYSDATE,
       UPDATE_BY = pUPDATE_BY,
       --STATUS_ID = pSTATUS_ID
       DEPT_UPLOAD = pDEPT_UPLOAD                                   
       WHERE MT_MODEL = pMT_MODEL
       AND PART_NO = pPART_NO 
       --AND DEPT_UPLOAD = pDEPT_UPLOAD
       AND DIM  =  pDIM
       AND DWG_NO  =  pDWG_NO
       AND GROUP_CD  =  pGROUP_CD;
       COMMIT;    
       
       ELSIF pDEPT_UPLOAD = 'PUR2' THEN
       UPDATE T_MTDB_CTRLDIE_TRANSFER_PART SET 
       --DIM  =  pDIM,
       MOLD_NO  =  pMOLD_NO,
       SUP_CD  =  pSUP_CD,
       --PO_STATUS  =  pPO_STATUS,
       --PLAN_ETD  =  pPLAN_ETD,
       PLAN_ETA  =  pPLAN_ETA,
       --ACT_ETA  =  pACT_ETA,
       --ACT_JUD  =  pACT_JUD,
       PO_NO  =  pPO_NO,
       --QTY_REC  =  pQTY_REC,
       --QTY_APV  =  pQTY_APV,
       --CURRENCY  =  pCURRENCY,
       --UNIT_PRICE  =  pUNIT_PRICE,
       UPDATE_DT = SYSDATE,
       UPDATE_BY = pUPDATE_BY,
       --STATUS_ID = pSTATUS_ID
       DEPT_UPLOAD = pDEPT_UPLOAD                                   
       WHERE MT_MODEL = pMT_MODEL
       AND PART_NO = pPART_NO 
       --AND DEPT_UPLOAD = pDEPT_UPLOAD
       AND DIM  =  pDIM
       AND DWG_NO  =  pDWG_NO
       AND GROUP_CD  =  pGROUP_CD;
       COMMIT;
       
       
       
    END IF;   
    pMTDBPART := 1; 
    END P_CTRLDIE_TRANSFERPART_INS_UPD;
---------------------------------------------------------------------------
PROCEDURE P_DATA_SIAM_PART_INS_UPD(
              pMT_MODEL        VARCHAR,
              pPART_NO        VARCHAR,
              pDIM        VARCHAR,
              pDWG_NO        VARCHAR,
              pSUP_CD        VARCHAR,
              pSTATUS        VARCHAR,
              pORDER_QTY        VARCHAR,
              pPO        VARCHAR,
              pPARTIAL        VARCHAR,
              pDEL_PART        VARCHAR,
              pACC_DT        VARCHAR,
              pACP_DT        VARCHAR,
              pACC_QT        VARCHAR,
              pACP_QT        VARCHAR,
              pCURRENCY        VARCHAR,
              pPUR_PRICE        VARCHAR,
              pGROUP_CD        VARCHAR,
              pCREATE_BY VARCHAR2,
              pUPDATE_BY VARCHAR2,
              pSTATUS_ID VARCHAR2,
              pMTDBPART_SIAM OUT NUMBER)AS
    BEGIN
          INSERT INTO T_MTDB_SIAM ( MT_MODEL,
                                    PART_NO,
                                    DIM,
                                    DWG_NO,
                                    SUP_CD,
                                    STATUS,
                                    ORDER_QTY,
                                    PO,
                                    PARTIAL,
                                    DEL_PART,
                                    ACC_DT,
                                    ACP_DT,
                                    ACC_QT,
                                    ACP_QT,
                                    CURRENCY,
                                    PUR_PRICE,
                                    GROUP_CD,
                                    CREATE_DT,
                                    CREATE_BY,
                                    UPDATE_DT,
                                    UPADTE_BY,
                                    STATUS_ID)
                             VALUES(pMT_MODEL,
                                    pPART_NO,
                                    pDIM,
                                    pDWG_NO,
                                    pSUP_CD,
                                    pSTATUS,
                                    pORDER_QTY,
                                    pPO,
                                    pPARTIAL,
                                    pDEL_PART,
                                    pACC_DT,
                                    pACP_DT,
                                    pACC_QT,
                                    pACP_QT,
                                    pCURRENCY,
                                    pPUR_PRICE,
                                    pGROUP_CD,
                                    sysdate,
                                    pCREATE_BY,
                                    NULL,
                                    NULL,
                                    pSTATUS_ID);    
                 pMTDBPART_SIAM := 1;
                 COMMIT;
   EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
   UPDATE T_MTDB_SIAM SET 
           SUP_CD     = pSUP_CD,
           STATUS     = pSTATUS,
           ORDER_QTY  = pORDER_QTY,
           PO         = pPO,
           PARTIAL    = pPARTIAL,
           DEL_PART   = pDEL_PART,
           ACC_DT     = pACC_DT,
           ACP_DT     = pACP_DT,
           ACC_QT     = pACC_QT,
           ACP_QT     = pACP_QT,
           CURRENCY   = pCURRENCY,
           PUR_PRICE  = pPUR_PRICE,
           UPDATE_DT  = sysdate,
           UPADTE_BY  = pUPDATE_BY,
           STATUS_ID  = pSTATUS_ID
           WHERE 
            MT_MODEL = pMT_MODEL
            AND PART_NO = pPART_NO
            AND DIM = pDIM
            AND DWG_NO  = pDWG_NO
            AND GROUP_CD = pGROUP_CD;
            COMMIT;

  pMTDBPART_SIAM := 1;
  END P_DATA_SIAM_PART_INS_UPD;
--------------------------------------------------------------------------------
END PG_MTDB_CTRLDIE_TRANSFER;

/
--------------------------------------------------------
--  DDL for Package Body PG_MTDB_EXTA_ORDER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_MTDB_EXTA_ORDER" AS

  PROCEDURE MTDB_EXTRA_ORDER_INS_UPD (
              pMT_MODEL   Varchar,
              pCATEGORY   Varchar,
              pMODEL   Varchar,
              pMTM_NO   Varchar,
              pSUB   Varchar,
              pPART_NO   Varchar,
              pPART_NAME   Varchar,
              pUSAGE   Varchar,
              pPROCESS   Varchar,
              pSUP_CD   Varchar,
              pDETAILS   Varchar,
              pPERSON_INCHARGE   Varchar,
              pRESULT   Varchar,
              pISSUE_PR_DT   Varchar,
              pPLAN_DEL_DT   Varchar,
              pACT_REC_DT   Varchar,
              pACT_JUD_DT   Varchar,
              pPO_NO   Varchar,
              pORDER_QTY   Varchar,
              pREC_QTY   Varchar,
              pREMARK   Varchar,
              pCREATE_BY VARCHAR2,
              pUPDATE_BY VARCHAR2,
              pSTATUS_ID VARCHAR2,
              pCOUNT_ITEMS VARCHAR2,
              pEXTRA OUT NUMBER) AS
  BEGIN
    -- TODO: Implementation required for PROCEDURE PG_MTDB_EXTA_ORDER.MTDB_EXTRA_ORDER_INS_UPD
    INSERT INTO T_MTDB_EXTRA_ORDER
                              ( MT_MODEL,
                                CATEGORY,
                                MODEL,
                                MTM_NO,
                                SUB,
                                PART_NO,
                                PART_NAME,
                                USAGE,
                                PROCESS,
                                SUP_CD,
                                DETAILS,
                                PERSON_INCHARGE,
                                RESULT,
                                ISSUE_PR_DT,
                                PLAN_DEL_DT,
                                ACT_REC_DT,
                                ACT_JUD_DT,
                                PO_NO,
                                ORDER_QTY,
                                REC_QTY,
                                REMARK,
                                CREATE_DT,
                                CREATE_BY,
                                UPDATE_DT,
                                UPDATE_BY,
                                STATUS_ID,
                                COUNT_ITEMS )
                        VALUES (pMT_MODEL,
                                pCATEGORY,
                                pMODEL,
                                pMTM_NO,
                                pSUB,
                                pPART_NO,
                                pPART_NAME,
                                pUSAGE,
                                pPROCESS,
                                pSUP_CD,
                                pDETAILS,
                                pPERSON_INCHARGE,
                                pRESULT,
                                pISSUE_PR_DT,
                                pPLAN_DEL_DT,
                                pACT_REC_DT,
                                pACT_JUD_DT,
                                pPO_NO,
                                pORDER_QTY,
                                pREC_QTY,
                                pREMARK,
                                sysdate,
                                pCREATE_BY,
                                NULL,
                                NULL,
                                pSTATUS_ID,
                                pCOUNT_ITEMS );
                              pEXTRA := 1;
                              COMMIT;
   EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
   UPDATE T_MTDB_EXTRA_ORDER
      SET 
      CATEGORY   =   pCATEGORY,
      MTM_NO   =   pMTM_NO,
      SUB   =   pSUB,
      PART_NAME   =   pPART_NAME,
      USAGE   =   pUSAGE,
      PROCESS   =   pPROCESS,
      DETAILS   =   pDETAILS,
      PERSON_INCHARGE   =   pPERSON_INCHARGE,
      RESULT   =   pRESULT,
      ISSUE_PR_DT   =   pISSUE_PR_DT,
      PLAN_DEL_DT   =   pPLAN_DEL_DT,
      ACT_REC_DT   =   pACT_REC_DT,
      ACT_JUD_DT   =   pACT_JUD_DT,
      PO_NO   =   pPO_NO,
      ORDER_QTY   =   pORDER_QTY,
      REC_QTY   =   pREC_QTY,
      REMARK   =   pREMARK,
      UPDATE_DT   =   sysdate,
      UPDATE_BY   =   pUPDATE_BY,
      STATUS_ID   =   pSTATUS_ID,
      COUNT_ITEMS = pCOUNT_ITEMS 
    WHERE MT_MODEL = pMT_MODEL
    AND MODEL = pMODEL
    AND PART_NO = pPART_NO
    AND MTM_NO = pMTM_NO
    AND SUB = pSUB;
    COMMIT;
    pEXTRA := 1;
  END MTDB_EXTRA_ORDER_INS_UPD;
--------------------------------------------------------------------------------
  PROCEDURE MTDB_EXTRA_ORDER_DEL (
              pMT_MODEL Varchar,
              pMODEL    Varchar,
              pPART_NO  Varchar,
              pSUP_CD   Varchar,
              pMTM_NO   Varchar,
              pSUB      Varchar,
              pEXTRA OUT NUMBER) AS
  BEGIN
    -- TODO: Implementation required for PROCEDURE PG_MTDB_EXTA_ORDER.MTDB_EXTRA_ORDER_SEL
    DELETE FROM T_MTDB_EXTRA_ORDER
    WHERE MT_MODEL = pMT_MODEL
    AND MODEL = pMODEL
    AND PART_NO = pPART_NO
    AND MTM_NO = pMTM_NO
    AND SUB = pSUB;
    pEXTRA := 1;
  END MTDB_EXTRA_ORDER_DEL;
-------------------------------------------------------------------------------
  PROCEDURE MTDB_EXTRA_ORDER_SEL (
              pMT_MODEL   Varchar,
              pMODEL   Varchar,
              pPART_NO   Varchar,
              pCUERSOR OUT T_CURSOR) AS
    -- TODO: Implementation required for PROCEDURE PG_MTDB_EXTA_ORDER.MTDB_EXTRA_ORDER_DEL
        wk_select    					Varchar2(1000); 
        wk_where              Varchar2(1000);
          --*** Check condition for search
    BEGIN
     	  IF pMT_MODEL is not null then
    	 				wk_where := ' AND MT_MODEL = '||''''||pMT_MODEL||'''';
   			End IF;
        IF pMODEL is not null then
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
    		IF pPART_NO is not null then
    	 				wk_where :=  wk_where||' AND PART_NO = '||''''||pPART_NO||'''';
   			End IF;
        
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT MT_MODEL,COUNT_ITEMS,CATEGORY,MODEL,MTM_NO,SUB,PART_NO,PART_NAME,USAGE,PROCESS,SUP_CD,DETAILS,PERSON_INCHARGE,RESULT,TO_CHAR(ISSUE_PR_DT,''DD-MON-YY'') as ISSUE_PR_DT,TO_CHAR(PLAN_DEL_DT,''DD-MON-YY'') as PLAN_DEL_DT,TO_CHAR(ACT_REC_DT,''DD-MON-YY'') as ACT_REC_DT,TO_CHAR(ACT_JUD_DT,''DD-MON-YY'') as ACT_JUD_DT,PO_NO,ORDER_QTY,REC_QTY,NVL(REC_QTY,0)-NVL(ORDER_QTY,0) as DIFF,REMARK,TO_CHAR(CREATE_DT,''DD-MON-YY'') as CREATE_DT,CREATE_BY,TO_CHAR(UPDATE_DT,''DD-MON-YY'') as UPDATE_DT,UPDATE_BY,STATUS_ID FROM T_MTDB_EXTRA_ORDER ' ||wk_where||' ORDER BY MT_MODEL, PART_NO ';
   
  		--*** Execute cursor
   			OPEN pCUERSOR FOR wk_select;

  END MTDB_EXTRA_ORDER_SEL;

END PG_MTDB_EXTA_ORDER;

/
--------------------------------------------------------
--  DDL for Package Body PG_MTDB_MAINTENANCE_USER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_MTDB_MAINTENANCE_USER" AS

  PROCEDURE MTDB_LOGIN_USER_SEL (
              
              pUSER_ID   Varchar,
              pPASSWORD   Varchar,
              pNAME varchar,
              pSURNAME varchar,
              pDEPT varchar,
              pROLE varchar,
              pCUERSOR OUT T_CURSOR) AS
        wk_select    					Varchar2(1000); 
        wk_where              Varchar2(1000);
          --*** Check condition for search
    BEGIN
     	  IF pUSER_ID is not null then
    	 				wk_where := ' AND USER_ID = '||''''||pUSER_ID||'''';
   			End IF;
        IF pPASSWORD is not null then
    	 				wk_where :=  wk_where||' AND PASSWORD = '||''''||pPASSWORD||'''';
   			End IF;
    		IF pNAME is not null then
    	 				wk_where :=  wk_where||' AND NAME = '||''''||pNAME||'''';
   			End IF;
        IF pSURNAME is not null then
    	 				wk_where :=  wk_where||' AND SURNAME = '||''''||pSURNAME||'''';
   			End IF;
        IF pDEPT is not null then
    	 				wk_where :=  wk_where||' AND DEPT = '||''''||pDEPT||'''';
   			End IF;
        IF pROLE is not null then
    	 				wk_where :=  wk_where||' AND ROLE = '||''''||pROLE||'''';
   			End IF;
        
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT USER_ID,NAME,SURNAME,PASSWORD,DEPT,ROLE,EMAIL,TO_CHAR(CREATE_DT,''DD-MON-YY'') as CREATE_DT,CREATE_BY,TO_CHAR(UPDATE_DT,''DD-MON-YY'') as UPDATE_DT,UPDATE_BY FROM T_MTDB_USER_LOGIN ' ||wk_where||' ORDER BY USER_ID ASC';
   
  		--*** Execute cursor
   			OPEN pCUERSOR FOR wk_select;
  END MTDB_LOGIN_USER_SEL;
-------------------------------------------------------------------------------- 
PROCEDURE MTDB_LOGIN_USER_INUP (
              
              pUSER_ID   Varchar,
              pPASSWORD   Varchar,
              pNAME varchar,
              pSURNAME varchar,
              pDEPT varchar,
              pROLE varchar,
              pEMAIL varchar,
              pCREATE_BY VARCHAR2,
              pUPDATE_BY VARCHAR2,
              pUSER OUT NUMBER)AS
    BEGIN
    INSERT INTO T_MTDB_USER_LOGIN
  (
    USER_ID,
    NAME,
    SURNAME,
    PASSWORD,
    DEPT,
    ROLE,
    EMAIL,
    CREATE_DT,
    CREATE_BY,
    UPDATE_DT,
    UPDATE_BY
  )
  VALUES
  (
    pUSER_ID,
    pNAME,
    pSURNAME,
    pPASSWORD,
    pDEPT,
    pROLE,
    pEMAIL,
    sysdate,
    pCREATE_BY,
    NULL,
    NULL
  );
    
pUSER := 1;
 EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
   UPDATE T_MTDB_USER_LOGIN
      SET NAME = pNAME,
          SURNAME = pSURNAME,
          DEPT = pDEPT,
          ROLE = pROLE,
          EMAIL = pEMAIL,
          UPDATE_DT = sysdate,
          UPDATE_BY = pUPDATE_BY
     WHERE USER_ID = pUSER_ID
  ;
    pUSER := 2;
END MTDB_LOGIN_USER_INUP;
PROCEDURE MTDB_LOGIN_USER_DEL (
              
              pUSER_ID   Varchar,
              pUSER OUT NUMBER)AS
      BEGIN
DELETE FROM T_MTDB_USER_LOGIN
WHERE USER_ID = pUSER_ID;

pUSER := 1;
END MTDB_LOGIN_USER_DEL;
END PG_MTDB_MAINTENANCE_USER;

/
--------------------------------------------------------
--  DDL for Package Body PG_MTDB_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_MTDB_MASTER" AS

  PROCEDURE MTDB_USAGE_MASTER_UPD ( pMT_MODEL     VARCHAR2,
                                    pPART_NO      VARCHAR2,
                                    pDIM          VARCHAR2,
                                    pSUP_CD       VARCHAR2,
                                    pUSAGE        VARCHAR2,
                                    pUSAGE_TYPE   VARCHAR2,
                                    pCREATE_BY    VARCHAR2,
                                    --pUPDATE_BY    VARCHAR2,
                                    pMTDB  OUT  NUMBER) AS         
  BEGIN
    /* TODO implementation required */
    INSERT INTO T_MTDB_MASTER_USAGE  (MT_MODEL, 
                                      PART_NO, 
                                      DIM, 
                                      SUP_CD, 
                                      USAGE, 
                                      USAGE_TYPE, 
                                      CREATE_DT, 
                                      CREATE_BY,
                                      UPDATE_DT,
                                      UPDATE_BY)
                              VALUES (pMT_MODEL,
                                      pPART_NO,
                                      pDIM,
                                      pSUP_CD,
                                      pUSAGE,
                                      pUSAGE_TYPE,
                                      SYSDATE,
                                      pCREATE_BY,
                                      NULL,
                                      NULL);
        COMMIT;
    pMTDB := 1;
   EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
   UPDATE T_MTDB_MASTER_USAGE SET 
   SUP_CD = pSUP_CD,
   USAGE = pUSAGE,
   UPDATE_DT = SYSDATE,
   UPDATE_BY = pCREATE_BY
   WHERE MT_MODEL = pMT_MODEL 
   AND PART_NO = pPART_NO 
   AND DIM = pDIM 
   --AND SUP_CD = pSUP_CD 
   AND USAGE_TYPE = pUSAGE_TYPE;
    pMTDB := 1; 
    COMMIT;
  END MTDB_USAGE_MASTER_UPD;
-------------------------------------------------------------------------------
  PROCEDURE MTDB_USAGE_MASTER_INQ ( pMT_MODEL   VARCHAR2,
                                    pPART_NO    VARCHAR2,
                                    pDIM        VARCHAR2,
                                    pSUP_CD     VARCHAR2,
                                    pUSAGE_TYPE VARCHAR2, 
                                    pCURSOR OUT T_CURSOR) IS
                                  
          wk_select    					Varchar2(2000); 
   				wk_where              Varchar2(1000);
          --*** Check condition for search
    BEGIN
     	  
        IF pMT_MODEL is not null then
    	 				wk_where :=  wk_where||' AND MT_MODEL = '||''''||pMT_MODEL||'''';
   			End IF;
    		IF pPART_NO is not null then
    	 				wk_where :=  wk_where||' AND PART_NO LIKE ''%'||pPART_NO||'%''';
   			End IF;
        IF pDIM is not null then
    	 				wk_where :=  wk_where||' AND DIM = '||''''||pDIM||'''';
   			End IF;
    		IF pSUP_CD is not null then
    	 				wk_where := wk_where||' AND SUP_CD = '||''''||pSUP_CD||'''';
    		End IF;
    		IF pUSAGE_TYPE is not null then
    	 				wk_where := wk_where||' AND USAGE_TYPE = '||''''||pUSAGE_TYPE||'''';
    		End IF;
        
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT MT_MODEL, PART_NO, DIM, SUP_CD, USAGE, USAGE_TYPE, TO_CHAR(CREATE_DT,''DD-MON-YY'') AS CREATE_DT, CREATE_BY, TO_CHAR(UPDATE_DT,''DD-MON-YY'') AS UPDATE_DT, UPDATE_BY FROM T_MTDB_MASTER_USAGE ' ||wk_where||' ORDER BY MT_MODEL, PART_NO';
   
  		--*** Execute cursor
   			OPEN pCURSOR FOR wk_select;
                                        
    END MTDB_USAGE_MASTER_INQ;  
-------------------------------------------------------------------------------
  PROCEDURE MTDB_ORDER_MASTER_UPD ( pMT_MODEL         VARCHAR2,
                                    pMODEL            VARCHAR2,
                                    pPART_NO          VARCHAR2,
                                    pDIM              VARCHAR2,          
                                    pDWG_NO           VARCHAR2,
                                    pIN_HOUSE_OD_NO   VARCHAR2,
                                    pQTY_ORDER        VARCHAR2,
                                    pGROUP_CD         VARCHAR2,
                                    pCREATE_BY        VARCHAR2,
                                    --pUPDATE_BY        VARCHAR2,
                                    pMTDB  OUT  NUMBER) AS  
  BEGIN
  INSERT INTO T_MTDB_MASTER_MT_ORDER (MT_MODEL, 
                                      MODEL, 
                                      PART_NO, 
                                      DIM, 
                                      DWG_NO, 
                                      IN_HOUSE_OD_NO,
                                      QTY_ORDER,
                                      GROUP_CD, 
                                      CREATE_DT,
                                      CREATE_BY,
                                      UPDATE_DT,
                                      UPDATE_BY,
                                      STATUS_ID)
                              VALUES (pMT_MODEL,
                                      pMODEL,
                                      pPART_NO,
                                      pDIM,
                                      pDWG_NO,
                                      pIN_HOUSE_OD_NO,
                                      pQTY_ORDER,
                                      pGROUP_CD,
                                      SYSDATE,
                                      pCREATE_BY,
                                      NULL,
                                      NULL,
                                      NULL);
        COMMIT;
    pMTDB := 1;
   EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
   UPDATE T_MTDB_MASTER_MT_ORDER SET 
   IN_HOUSE_OD_NO = pIN_HOUSE_OD_NO,
   QTY_ORDER = pQTY_ORDER,
   GROUP_CD = pGROUP_CD,
   UPDATE_DT = SYSDATE,
   UPDATE_BY = pCREATE_BY
   WHERE MT_MODEL = pMT_MODEL 
   AND MODEL = pMODEL
   AND PART_NO = pPART_NO 
   AND DIM = pDIM 
   AND DWG_NO = pDWG_NO;
   COMMIT;
    pMTDB := 1; 
    
END MTDB_ORDER_MASTER_UPD;    
-------------------------------------------------------------------------------
  PROCEDURE MTDB_ORDER_MASTER_INQ ( pMT_MODEL   VARCHAR2,
                                    pMODEL      VARCHAR2, 
                                    pPART_NO    VARCHAR2,
                                    pDIM        VARCHAR2,
                                    pDWG_NO     VARCHAR2,
                                    pCURSOR OUT T_CURSOR) IS
                                  
        wk_select    					Varchar2(2000); 
   			wk_where              Varchar2(1000);
          --*** Check condition for search
    BEGIN
     	  
        IF pMT_MODEL is not null then
    	 				wk_where :=  wk_where||' AND MT_MODEL = '||''''||pMT_MODEL||'''';
   			End IF;
        IF pMODEL is not null then
    	 				wk_where := wk_where||' AND MODEL = '||''''||pMODEL||'''';
    		End IF;
    		IF pPART_NO is not null then
    	 				wk_where :=  wk_where||' AND PART_NO LIKE ''%'||pPART_NO||'%''';
   			End IF;
        IF pDIM is not null then
    	 				wk_where :=  wk_where||' AND DIM = '||''''||pDIM||'''';
   			End IF;
    		IF pDWG_NO is not null then
    	 				wk_where := wk_where||' AND DWG_NO = '||''''||pDWG_NO||'''';
    		End IF;
    		        
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT MT_MODEL, MODEL, PART_NO, DIM, DWG_NO, IN_HOUSE_OD_NO, QTY_ORDER, GROUP_CD, TO_CHAR(CREATE_DT,''DD-MON-YY'') AS CREATE_DT, CREATE_BY, TO_CHAR(UPDATE_DT,''DD-MON-YY'') AS UPDATE_DT, UPDATE_BY FROM T_MTDB_MASTER_MT_ORDER ' ||wk_where||' ORDER BY MT_MODEL, MODEL';
   
  		--*** Execute cursor
   			OPEN pCURSOR FOR wk_select;
                                        
    END MTDB_ORDER_MASTER_INQ;
-------------------------------------------------------------------------------
  PROCEDURE MTDB_WORKING_DAY_MASTER_INQ ( pDATE_FROM  VARCHAR2,
                                        pDATE_TO    VARCHAR2,
                                        pCURSOR OUT T_CURSOR) IS
                                  
        wk_select    					Varchar2(2000); 
   			wk_where              Varchar2(1000);
          --*** Check condition for search
    BEGIN
    
       IF pDATE_FROM IS NOT NULL AND pDATE_TO IS NOT NULL THEN
               wk_select := 'SELECT YEAR, DAY, DT_WORK, MK_WORK, TO_CHAR(CREATE_DT,''DD-MON-YY'') AS CREATE_DT, CREATE_BY, TO_CHAR(UPDATE_DT,''DD-MON-YY'') AS UPDATE_DT, UPDATE_BY FROM T_MTDB_WORKING_DAY_MASTER WHERE DT_WORK
               BETWEEN TO_CHAR(TO_DATE('||''''||pDATE_FROM||''''||','||''''||'dd-MON-yyyy'||''''||'),'||''''||'YYYYMMDD'||''''||')
               AND TO_CHAR(TO_DATE('||''''||pDATE_TO||''''||','||''''||'dd-MON-yyyy'||''''||'),'||''''||'YYYYMMDD'||''''||') ORDER BY DT_WORK';
               
        ELSIF pDATE_FROM IS NOT NULL AND pDATE_TO IS NULL THEN
    	 				wk_select := 'SELECT YEAR, DAY, DT_WORK, MK_WORK, TO_CHAR(CREATE_DT,''DD-MON-YY'') AS CREATE_DT, CREATE_BY, TO_CHAR(UPDATE_DT,''DD-MON-YY'') AS UPDATE_DT, UPDATE_BY FROM T_MTDB_WORKING_DAY_MASTER WHERE DT_WORK >= TO_CHAR(TO_DATE('||''''||pDATE_FROM||''''||','||''''||'dd-MON-yyyy'||''''||'),'||''''||'YYYYMMDD'||''''||') ORDER BY DT_WORK';
              
        ELSE
              wk_select := 'SELECT YEAR, DAY, DT_WORK, MK_WORK, TO_CHAR(CREATE_DT,''DD-MON-YY'') AS CREATE_DT, CREATE_BY, TO_CHAR(UPDATE_DT,''DD-MON-YY'') AS UPDATE_DT, UPDATE_BY FROM T_MTDB_WORKING_DAY_MASTER ORDER BY DT_WORK';
    		End IF;
    
    --*** Execute cursor
   			OPEN pCURSOR FOR wk_select;
                                        
    END MTDB_WORKING_DAY_MASTER_INQ;  
-------------------------------------------------------------------------------
  PROCEDURE MTDB_PARTLIST_MASTER_INQ  ( pMT_MODEL   VARCHAR2,
                                        pCTGY       VARCHAR2, 
                                        pPART_NO    VARCHAR2,
                                        pDIM        VARCHAR2,
                                        pDWG_NO     VARCHAR2,
                                        pMOLD_NO     VARCHAR2,
                                        pCURSOR OUT T_CURSOR) IS
                                  
        wk_select    					Varchar2(3000); 
   			wk_where              Varchar2(1000);
          --*** Check condition for search
    BEGIN
     	 
        IF pMT_MODEL IS NOT NULL OR pMT_MODEL != '' THEN
    	 				wk_where :=  wk_where||' AND MT_MODEL = '||''''||pMT_MODEL||'''';
   			End IF;
        IF pCTGY IS NOT NULL AND pCTGY != ' ' THEN 
    	 				wk_where := wk_where||' AND CATEGORY = '||''''||pCTGY||'''';
        ELSIF pCTGY IS NULL THEN 
              wk_where := wk_where||' AND CATEGORY IS NULL';
    		End IF;
        
    		IF pPART_NO is not null then
    	 				wk_where :=  wk_where||' AND PART_NO LIKE ''%'||pPART_NO||'%''';
   			End IF;
        IF pDIM is not null then
    	 				wk_where :=  wk_where||' AND DIM = '||''''||pDIM||'''';
   			End IF;
    		IF pDWG_NO is not null then
    	 				wk_where := wk_where||' AND DWG_NO = '||''''||pDWG_NO||'''';
    		End IF;
    		IF pMOLD_NO is not null then
    	 				wk_where := wk_where||' AND MOLD_NO = '||''''||pMOLD_NO||'''';
    		End IF;
        
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT MT_MODEL, COMMON_LIST, COUNT_DS, COUNT_PART_NO, STATUS, COLOR, CATEGORY, ORDER_BY,ASSY_PLACE, MAIN_SUB, INPUT_PHASE, LV_INP_DE ,LV_INP_MT ,UNIT_NO, UNIT_NAME, PART_NO, DIM, PART_NAME, DWG_NO, ECN_NO,
                          TO_CHAR(ECN_REC_DT,''DD-MON-YY'') AS ECN_REC_DT, ECN_PHASE, ECN_DETAIL, PROCESS, TEXTURE, MIRROR, SCREEN, SPRAY, CAVITY, SUP_CODE, INJ_SUPPLIER, DIE_SUPPLIER, DIE_CONTROL, DIE_JUDGE_RESP, MOLD_NO, PART_CM_MO_FM, 
                          COUNTRY, CONTROL, TO_CHAR(MP_DWG_ISU_JP,''DD-MON-YY'') AS MP_DWG_ISU_JP, TO_CHAR(DS_PLAN_DT,''DD-MON-YY'') AS DS_PLAN_DT, ETM_DS_OK_TM, INJ_PLACE, TO_CHAR(REC_DT,''DD-MON-YY'') AS REC_DT,
                          REMARK_DS, TO_CHAR(ACT_ETD,''DD-MON-YY'') AS ACT_ETD, TO_CHAR(ISU_PR_DT,''DD-MON-YY'') AS ISU_PR_DT, ISU_PR_DWG, REMARK, TO_CHAR(CREATE_DT,''DD-MON-YY'') AS CREATE_DT, CREATE_BY,
                          TO_CHAR(UPDATE_DT,''DD-MON-YY'') AS UPDATE_DT, UPDATE_BY, STATUS_ID FROM T_MTDB_MASTER_PARTLIST ' ||wk_where||' ORDER BY MT_MODEL, PART_NO';
   
  		--*** Execute cursor
   			OPEN pCURSOR FOR wk_select;
                                        
    END MTDB_PARTLIST_MASTER_INQ;
-------------------------------------------------------------------------------
  PROCEDURE MTDB_PARTLIST_MASTER_UPD  ( pMT_MODEL       VARCHAR2,
                                        pCOMMON_LIST    VARCHAR2,
                                        pCOUNT_DS       VARCHAR2,
                                        pCOUNT_PART_NO  VARCHAR2,
                                        pSTATUS         VARCHAR2,
                                        pCOLOR          VARCHAR2,
                                        pCATEGORY       VARCHAR2,
                                        pORDER_BY       VARCHAR2,
                                        pASSY_PLACE     VARCHAR2,
                                        pMAIN_SUB       VARCHAR2,
                                        pINPUT_PHASE    VARCHAR2,
                                        pLV_INP_DE      VARCHAR2,
                                        pLV_INP_MT      VARCHAR2,
                                        pUNIT_NO        VARCHAR2,
                                        pUNIT_NAME      VARCHAR2,
                                        pPART_NO        VARCHAR2,
                                        pDIM            VARCHAR2,
                                        pPART_NAME      VARCHAR2,
                                        pDWG_NO         VARCHAR2,
                                        pECN_NO         VARCHAR2,
                                        pECN_REC_DT     VARCHAR2,
                                        pECN_PHASE      VARCHAR2,
                                        pECN_DETAIL     VARCHAR2,
                                        pPROCESS        VARCHAR2,
                                        pTEXTURE        VARCHAR2,
                                        pMIRROR         VARCHAR2,
                                        pSCREEN         VARCHAR2,
                                        pSPRAY          VARCHAR2,
                                        pCAVITY         VARCHAR2,
                                        pSUP_CODE       VARCHAR2,
                                        pINJ_SUPPLIER   VARCHAR2,
                                        pDIE_SUPPLIER   VARCHAR2,
                                        pDIE_CONTROL    VARCHAR2,
                                        pDIE_JUDGE_RESP VARCHAR2,
                                        pMOLD_NO        VARCHAR2,
                                        pPART_CM_MO_FM  VARCHAR2,
                                        pCOUNTRY        VARCHAR2,
                                        pCONTROL        VARCHAR2,
                                        pMP_DWG_ISU_JP  VARCHAR2,
                                        pDS_PLAN_DT     VARCHAR2,
                                        pETM_DS_OK_TM   VARCHAR2,
                                        pINJ_PLACE      VARCHAR2,
                                        pREC_DT         VARCHAR2,
                                        pREMARK_DS      VARCHAR2,
                                        pACT_ETD        VARCHAR2,
                                        pISU_PR_DT      VARCHAR2,
                                        pISU_PR_DWG     VARCHAR2,
                                        pREMARK         VARCHAR2,
                                        pCREATE_BY      VARCHAR2,
                                        pMTDB  OUT  NUMBER) AS
  BEGIN
  INSERT INTO T_MTDB_MASTER_PARTLIST (MT_MODEL,
                                      MIRROR,
                                      STATUS,
                                      SCREEN,
                                      COLOR,
                                      SPRAY,
                                      CATEGORY,
                                      CAVITY,
                                      ORDER_BY,
                                      SUP_CODE,
                                      ASSY_PLACE,
                                      INJ_SUPPLIER ,
                                      MAIN_SUB,
                                      DIE_SUPPLIER ,
                                      INPUT_PHASE,
                                      DIE_CONTROL,
                                      LV_INP_DE,
                                      DIE_JUDGE_RESP,
                                      LV_INP_MT,
                                      MOLD_NO,
                                      UNIT_NO,
                                      PART_CM_MO_FM,
                                      UNIT_NAME,
                                      COUNTRY,
                                      PART_NO,
                                      CONTROL,
                                      DIM,
                                      MP_DWG_ISU_JP,
                                      PART_NAME,
                                      DS_PLAN_DT,
                                      DWG_NO,
                                      ETM_DS_OK_TM,
                                      ECN_NO,
                                      INJ_PLACE,
                                      ECN_REC_DT,
                                      REC_DT ,
                                      ECN_PHASE,
                                      REMARK_DS,
                                      ECN_DETAIL,
                                      ACT_ETD,
                                      PROCESS,
                                      ISU_PR_DT,
                                      TEXTURE,
                                      ISU_PR_DWG,
                                      REMARK,
                                      CREATE_DT,
                                      CREATE_BY,
                                      UPDATE_DT,
                                      UPDATE_BY,
                                      STATUS_ID,
                                      COMMON_LIST,
                                      COUNT_DS,
                                      COUNT_PART_NO)
                              VALUES (pMT_MODEL,
                                      pMIRROR,
                                      pSTATUS,
                                      pSCREEN,
                                      pCOLOR,
                                      pSPRAY,
                                      pCATEGORY,
                                      pCAVITY,
                                      pORDER_BY,
                                      pSUP_CODE,
                                      pASSY_PLACE,
                                      pINJ_SUPPLIER,
                                      pMAIN_SUB,
                                      pDIE_SUPPLIER,
                                      pINPUT_PHASE,
                                      pDIE_CONTROL,
                                      pLV_INP_DE,
                                      pDIE_JUDGE_RESP,
                                      pLV_INP_MT,
                                      pMOLD_NO,
                                      pUNIT_NO,
                                      pPART_CM_MO_FM,
                                      pUNIT_NAME,
                                      pCOUNTRY,
                                      pPART_NO,
                                      pCONTROL,
                                      pDIM,
                                      pMP_DWG_ISU_JP,
                                      pPART_NAME,
                                      pDS_PLAN_DT,
                                      pDWG_NO,
                                      pETM_DS_OK_TM,
                                      pECN_NO,
                                      pINJ_PLACE,
                                      pECN_REC_DT,
                                      pREC_DT ,
                                      pECN_PHASE,
                                      pREMARK_DS,
                                      pECN_DETAIL,
                                      pACT_ETD,
                                      pPROCESS,
                                      pISU_PR_DT,
                                      pTEXTURE,
                                      pISU_PR_DWG,
                                      pREMARK,
                                      SYSDATE,
                                      pCREATE_BY,
                                      NULL,
                                      NULL,
                                      NULL,
                                      pCOMMON_LIST,
                                      pCOUNT_DS,
                                      pCOUNT_PART_NO);
        COMMIT;
    pMTDB := 1;
   EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
    UPDATE T_MTDB_MASTER_PARTLIST SET 
    MT_MODEL = pMT_MODEL,                                      
    MIRROR = pMIRROR,
    STATUS = pSTATUS,
    SCREEN = pSCREEN,
    COLOR = pCOLOR,
    SPRAY = pSPRAY,
    CATEGORY = pCATEGORY,
    CAVITY = pCAVITY,
    ORDER_BY = pORDER_BY,
    SUP_CODE = pSUP_CODE,
    ASSY_PLACE = pASSY_PLACE,
    INJ_SUPPLIER = pINJ_SUPPLIER ,
    MAIN_SUB = pMAIN_SUB,
    DIE_SUPPLIER = pDIE_SUPPLIER ,
    INPUT_PHASE = pINPUT_PHASE,
    DIE_CONTROL = pDIE_CONTROL,
    LV_INP_DE = pLV_INP_DE,
    DIE_JUDGE_RESP = pDIE_JUDGE_RESP,
    LV_INP_MT = pLV_INP_MT,
    MOLD_NO = pMOLD_NO,
    UNIT_NO = pUNIT_NO,
    PART_CM_MO_FM = pPART_CM_MO_FM,
    UNIT_NAME = pUNIT_NAME,
    COUNTRY = pCOUNTRY,
    PART_NO = pPART_NO,
    CONTROL = pCONTROL,
    DIM = pDIM,
    MP_DWG_ISU_JP = pMP_DWG_ISU_JP,
    PART_NAME = pPART_NAME,
    DS_PLAN_DT = pDS_PLAN_DT,
    DWG_NO = pDWG_NO,
    ETM_DS_OK_TM = pETM_DS_OK_TM,
    ECN_NO = pECN_NO,
    INJ_PLACE = pINJ_PLACE,
    ECN_REC_DT = pECN_REC_DT,
    REC_DT = pREC_DT ,
    ECN_PHASE = pECN_PHASE,
    REMARK_DS = pREMARK_DS,
    ECN_DETAIL = pECN_DETAIL,
    ACT_ETD = pACT_ETD,
    PROCESS = pPROCESS,
    ISU_PR_DT = pISU_PR_DT,
    TEXTURE = pTEXTURE,
    ISU_PR_DWG = pISU_PR_DWG,
    REMARK = pREMARK,
    UPDATE_DT = SYSDATE,
    UPDATE_BY = pCREATE_BY,
    COMMON_LIST = pCOMMON_LIST,
    COUNT_DS = pCOUNT_DS,
    COUNT_PART_NO = pCOUNT_PART_NO
    WHERE MT_MODEL = pMT_MODEL 
    AND PART_NO = pPART_NO 
    AND DIM = pDIM 
    AND ORDER_BY = pORDER_BY;
    
      COMMIT;
    pMTDB := 1; 
   
   
  END MTDB_PARTLIST_MASTER_UPD;
-------------------------------------------------------------------------------
  PROCEDURE MTDB_PARTLIST_ALL_INQ  ( pMT_MODEL   VARCHAR2,
                                     pCTGY       VARCHAR2, 
                                     pPART_NO    VARCHAR2,
                                     pDIM        VARCHAR2,
                                     pDWG_NO     VARCHAR2,
                                     pMOLD_NO    VARCHAR2,
                                     pFREE       VARCHAR2,
                                     pCURSOR OUT T_CURSOR) IS
                                  
        wk_select    					Varchar2(3000); 
   			wk_where              Varchar2(2000);
          --*** Check condition for search
    BEGIN
     	  
        IF pMT_MODEL IS NOT NULL OR pMT_MODEL != '' THEN
    	 				wk_where :=  wk_where||' AND MT_MODEL = '||''''||pMT_MODEL||'''';
      --  ELSIF pMT_MODEL IS NULL THEN
             -- wk_where := wk_where||' AND MT_MODEL IS NULL';
   			End IF;
        
        IF pCTGY IS NOT NULL AND pCTGY != ' ' THEN --AND pCTGY != ' '
    	 				wk_where := wk_where||' AND CATEGORY = '||''''||pCTGY||'''';
        ELSIF pCTGY IS NULL THEN --pMT_MODEL IS NOT NULL AND pMT_MODEL != '' AND pCTGY IS NOT NULL
              wk_where := wk_where||' AND CATEGORY IS NULL';
    		End IF;
        
    		IF pPART_NO is not null then
    	 				wk_where :=  wk_where||' AND PART_NO LIKE ''%'||pPART_NO||'%''';
   			End IF;
        IF pDIM is not null then
    	 				wk_where :=  wk_where||' AND DIM LIKE ''%'||pDIM||'%''';
   			End IF;
    		IF pDWG_NO is not null then
    	 				wk_where := wk_where||' AND DWG_NO LIKE ''%'||pDWG_NO||'%''';
    		End IF;
    		IF pMOLD_NO is not null then
    	 				wk_where := wk_where||' AND MOLD_NO LIKE ''%'||pMOLD_NO||'%''';
    		End IF;
        
        IF pFREE is not null then
    	 				wk_where := wk_where||' AND '||pFREE||'';
    		End IF;
        
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT * FROM V_MTDB_PARTLIST_ALL ' ||wk_where||' ORDER BY MT_MODEL, PART_NO, DIM';
   
  		--*** Execute cursor
   			OPEN pCURSOR FOR wk_select;
                                        
    END MTDB_PARTLIST_ALL_INQ;
-------------------------------------------------------------------------------

END PG_MTDB_MASTER;

/
--------------------------------------------------------
--  DDL for Package Body PG_PRD_PLAN_A3_ASSY_PLAN
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_PRD_PLAN_A3_ASSY_PLAN" AS

  PROCEDURE P_PRD_PLAN_A3_ASSY_PLAN_SEL(
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pPLAN_DATE VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pCUERSOR OUT T_CURSOR) IS
                                   
           wk_select    Varchar2(1000);         
           wk_where     Varchar2(1000);
      
    BEGIN
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
         IF pMODEL_SEQ is not null then
    	 				wk_where :=  wk_where||' AND MODEL_SEQ = '||''''||pMODEL_SEQ||'''';
   			End IF;
    		IF pPLAN_DATE is not null then
    	 				wk_where := wk_where||' AND PLAN_DATE = '||''''||pPLAN_DATE||'''';
    		End IF;
         IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
        if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
        
   					wk_select := 'SELECT FACTORY_CD, MODEL_SEQ, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, PRIORITY, MERCHANDISE_CD, PLAN_QTY FROM T_PRD_PLAN_A3_ASSY_PLAN@FROM_EUCTEST_CHTINQ ' ||wk_where||' ORDER BY MODEL_SEQ,SHIFT,LINE_CD,PRIORITY';
            
   OPEN pCUERSOR FOR wk_select;
  END P_PRD_PLAN_A3_ASSY_PLAN_SEL;

PROCEDURE P_PRD_PLAN_A3_ASSY_PLAN_UP (
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pPLAN_DATE VARCHAR2,
                                   pSHIFT VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pPRIORITY VARCHAR2,
                                   pMERCHANDISE_CD VARCHAR2,
                                   pPLAN_QTY NUMBER,
                                   pSLANE OUT NUMBER)AS
  BEGIN
    -- TODO: Implementation required for PROCEDURE PG_PRD_PLAN_A3_ASSY_PLAN.P_PRD_PLAN_A3_ASSY_PLAN_UP
              INSERT
              INTO T_SLANE_PRODUCTION_PLAN
                (
                  FACTORY_CD,
                  MODEL_SEQ,
                  PLAN_DATE,
                  SHIFT,
                  LINE_CD,
                  PRIORITY,
                  MERCHANDISE_CD,
                  PLAN_QTY
                )
                VALUES
                (
                  pFACTORY_CD,
                  pMODEL_SEQ,
                  pPLAN_DATE,
                  pSHIFT,
                  pLINE_CD,
                  pPRIORITY,
                  pMERCHANDISE_CD,
                  pPLAN_QTY
                );
                 
                  pSLANE := 1;
                   EXCEPTION
                   WHEN DUP_VAL_ON_INDEX THEN
                   UPDATE T_SLANE_PRODUCTION_PLAN SET 
                   MERCHANDISE_CD = pMERCHANDISE_CD,
                   PLAN_QTY = pPLAN_QTY
                   WHERE
                   FACTORY_CD = pFACTORY_CD
                   AND MODEL_SEQ = pMODEL_SEQ 
                   AND PLAN_DATE = pPLAN_DATE 
                   AND SHIFT = pSHIFT 
                   AND LINE_CD = pLINE_CD
                   AND PRIORITY = pPRIORITY;
                   
                    pSLANE := 2; 
  END P_PRD_PLAN_A3_ASSY_PLAN_UP;


END PG_PRD_PLAN_A3_ASSY_PLAN;

/
--------------------------------------------------------
--  DDL for Package Body PG_RUN_SEQ_DAISHA
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_RUN_SEQ_DAISHA" AS

   PROCEDURE P_SEQ_PLAN_DAISHA ( pOUTPUT_FLAG OUT NUMBER) AS
   
  vDATE VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
  vTIME VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
/*BEGIN
  IF vTIME > '07:59:59' AND vTIME < '19:59:59' THEN
        vSHIFT := 'D';
        vDATE := vDATE
      ELSE
        vSHIFT := 'N';
        vDATE := vDATE-1
      END IF; 
      END;*/
   CURSOR C2 IS SELECT  MODEL_SEQ,LINE_CD,PLAN_DATE FROM EX_SLANE_PRODUCTION_PLAN 
                 WHERE FACTORY_CD = 'RA' 
                 AND PLAN_DATE = vDATE 
                 GROUP BY MODEL_SEQ,LINE_CD,PLAN_DATE 
                 ORDER BY  MODEL_SEQ,LINE_CD,PLAN_DATE;
   REC2     C2%ROWTYPE;
   
 CURSOR C1 IS SELECT * FROM T_SLANE_PRODUCTION_PLAN
                WHERE FACTORY_CD = 'RA'
                AND LINE_CD = REC2.LINE_CD
                AND PLAN_DATE = REC2.PLAN_DATE
                --AND SHIFT = 'N'
                ORDER BY FACTORY_CD,LINE_CD,PLAN_DATE,SHIFT,PRIORITY ASC;
                
   REC1     C1%ROWTYPE;
   vSEQ           T_SLANE_PRODUCTION_PLAN_DAISHA.SEQ%TYPE;
   VMODEL         T_SLANE_PRODUCTION_PLAN_DAISHA.MODEL%TYPE;
   vDEST           T_SLANE_PRODUCTION_PLAN_DAISHA.DESTINATION%TYPE;
   vCOLOR         T_SLANE_PRODUCTION_PLAN_DAISHA.COLOR%TYPE;
   vROUND         T_SLANE_PRODUCTION_PLAN_DAISHA.ROUND%TYPE;
   vROUND_START   T_SLANE_PRODUCTION_PLAN_DAISHA.ROUND%TYPE := 1;
   vSEQ_START     T_SLANE_PRODUCTION_PLAN_DAISHA.SEQ%TYPE := 1;
   vSEQ_ALL       T_SLANE_PRODUCTION_PLAN_DAISHA.SEQ%TYPE := 0;
  
  BEGIN
 FOR REC2 IN C2 LOOP
        --Get Max SEQ
        SELECT NVL(MAX(SEQ),0) + 1 INTO vSEQ_START
        FROM T_SLANE_PRODUCTION_PLAN_DAISHA
        WHERE FACTORY_CD = REC1.FACTORY_CD
        AND PLAN_DATE = REC2.PLAN_DATE
        AND LINE_CD = REC2.LINE_CD;
        --Get Max ROUND
      SELECT NVL(MAX(ROUND),0) + 1 INTO vROUND_START
      FROM T_SLANE_PRODUCTION_PLAN_DAISHA
      WHERE FACTORY_CD = REC1.FACTORY_CD
      AND PLAN_DATE = REC2.PLAN_DATE
      AND LINE_CD = REC2.LINE_CD
      AND SEQ = vSEQ_START - 1;
       
   FOR REC1 IN C1 LOOP
   
     /* vROUND_START := vROUND_START + vSEQ_ALL;
      vSEQ_START := vSEQ_START + vSEQ_ALL;
      vROUND := vROUND_START;
      -- SET START SEQUENT FOR INSERT
      vSEQ := vSEQ_START;*/
      
       -- Get MODEL
        SELECT DISTINCT MODEL INTO vMODEL
        FROM T_SLANE_DAISHA_MASTER
        WHERE FACTORY_CD = 'RA'
        AND MODEL_SEQ = 'AG';
        
      --Get Destination, Color
      SELECT DESTINATION, COLOR INTO vDEST, vCOLOR
      FROM T_PAD_HEI_MERCHANDISE_MS@FROM_EUCTEST_CHTINQ
      WHERE MERCHANDISE_CODE = REC1.MERCHANDISE_CD;
    
      vSEQ_ALL := 0;
      -- FIND ALL SEQUENT OF FACTORY_CD,LINE_CD,PLAN_DATE,PRIORITY
      vSEQ_ALL := CEIL(REC1.PLAN_QTY/20);
    
      FOR vCOUNT_LOOP IN 1..vSEQ_ALL LOOP
      IF vROUND_START > 20 THEN
         vROUND_START := 1;
      END IF;
     
        INSERT INTO T_SLANE_PRODUCTION_PLAN_DAISHA (FACTORY_CD,
                                                    MODEL,
                                                    PLAN_DATE,
                                                    SHIFT,
                                                    LINE_CD,
                                                    CELL_NAME,
                                                    SEQ,
                                                    MERCHANDISE_CD,
                                                    DESTINATION,
                                                    COLOR,
                                                    ROUND,
                                                    FLAG,
                                                    CREATE_DATE,
                                                    CREATE_BY,
                                                    UPDATE_DATE,
                                                    UPDATE_BY)
                                            VALUES (REC1.FACTORY_CD,
                                                    vMODEL,
                                                    REC1.PLAN_DATE,
                                                    REC1.SHIFT,
                                                    REC1.LINE_CD,
                                                    REC1.CELL_NAME,
                                                    vSEQ_START,
                                                    REC1.MERCHANDISE_CD,
                                                    vDEST,
                                                    vCOLOR,
                                                    vROUND_START,
                                                    'N',
                                                    SYSDATE,
                                                    'SYSTEM',
                                                    SYSDATE,
                                                    'SYSTEM');
                                   vSEQ_START := vSEQ_START + 1;
                                   vROUND_START := vROUND_START + 1;
      COMMIT;             
      END LOOP;
            
   
    END LOOP;
   END LOOP;
   END P_SEQ_PLAN_DAISHA; 

PROCEDURE P_CALCULATE_PLAN ( pFACTORY_CD   VARCHAR2) AS
                              -- pPLAN_DATE     VARCHAR2) AS
                               --pOUTPUT_FLAG OUT NUMBER) AS
                                     
    CURSOR C1 IS SELECT * FROM T_PRD_PLAN_A3_ASSY_PLAN@FROM_EUCTEST_CHTINQ
                 WHERE FACTORY_CD = pFACTORY_CD
                 AND   PLAN_DATE BETWEEN to_char(to_date(sysdate ,'dd-MON-yy'),'YYYYMMDD') 
                 AND  to_char(to_date(sysdate +3,'dd-MON-yy'),'YYYYMMDD')
                 AND PRIORITY != '++' 
                 AND PRIORITY != '**'
                 --AND   MODEL_SEQ = 'AJ'
                 ORDER BY MODEL_SEQ, SHIFT, LINE_CD, PRIORITY;
    
    REC1                    C1%ROWTYPE;
    
  BEGIN
    FOR REC1 IN C1 LOOP
     INSERT INTO EX_SLANE_APLAN_PLAN (FACTORY_CD,
                                          MODEL_SEQ,
                                          PLAN_DATE,
                                          SHIFT,
                                          LINE_CD,
                                          CELL_NAME,
                                          PRIORITY,
                                          MERCHANDISE_CD,
                                          PLAN_QTY,
                                          CREATE_DATE,
                                          CREATE_BY,
                                          UPDATE_DATE,
                                          UPDATE_BY)
                                  VALUES (pFACTORY_CD,
                                          REC1.MODEL_SEQ,
                                          REC1.PLAN_DATE,
                                          REC1.SHIFT,
                                          REC1.LINE_CD,
                                          REC1.CELL_NAME,
                                          REC1.PRIORITY,
                                          REC1.MERCHANDISE_CD,
                                          REC1.PLAN_QTY,
                                          SYSDATE,
                                          'SYSTEM',
                                          SYSDATE,
                                          'SYSTEM');
    END LOOP;
     --pOUTPUT_FLAG :=0;
      EXCEPTION
          WHEN NO_DATA_FOUND THEN
             --pOUTPUT_FLAG :=1;
              NULL;
  END P_CALCULATE_PLAN;
END PG_RUN_SEQ_DAISHA;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_CYCLE_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_CYCLE_MASTER" AS

  PROCEDURE P_SLANE_CYCLE_MASTER_INS_UPD (
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pTYPE VARCHAR2,
                                        pZONE VARCHAR2,
                                        pCYCLE_TIME NUMBER,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pSLANE OUT NUMBER) AS
  BEGIN
    -- TODO: Implementation required for PROCEDURE PG_SLANE_CYCLE_MASTER.P_SLANE_DELIVERY_CYCLE_MASTER_INS_UPD
    INSERT INTO T_SLANE_DELIVERY_CYCLE_MASTER
                (   FACTORY_CD,
                    MODEL,
                    TYPE,
                    ZONE,
                    CYCLE_TIME,
                    CREATE_DATE,
                    CREATE_BY,
                    UPDATE_DATE,
                    UPDATE_BY
                ) 
        VALUES(    pFACTORY_CD ,
                   pMODEL,
                   pTYPE,
                   pZONE,
                   pCYCLE_TIME,
                   sysdate,
                   pCREATE_BY,
                   sysdate,
                   pUPDATE_BY
               )  ;
   
    pSLANE := 1;
   EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
   
   UPDATE T_SLANE_DELIVERY_CYCLE_MASTER SET 
   CYCLE_TIME = pCYCLE_TIME,
   UPDATE_DATE = SYSDATE,
   UPDATE_BY = pUPDATE_BY 
   WHERE FACTORY_CD = pFACTORY_CD
   AND MODEL = pMODEL 
   AND TYPE = pTYPE 
   AND ZONE = pZONE ;
    pSLANE := 1;
    
  END P_SLANE_CYCLE_MASTER_INS_UPD;
PROCEDURE P_SLANE_CYCLE_MASTER_DEL (    pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pTYPE VARCHAR2,
                                        pZONE VARCHAR2,
                                        pSLANE OUT NUMBER)AS
                                
  BEGIN
     DELETE FROM T_SLANE_DELIVERY_CYCLE_MASTER WHERE 
      FACTORY_CD = pFACTORY_CD
      AND MODEL = pMODEL 
      AND TYPE = pTYPE
      AND ZONE = pZONE ;
      
      pSLANE := 1;
  END P_SLANE_CYCLE_MASTER_DEL;
PROCEDURE P_SLANE_CYCLE_MASTER_SEL (    pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pTYPE VARCHAR2,
                                        pZONE VARCHAR2,
                                        pCREATE_DATE VARCHAR2,
                                        pDATE_FROM VARCHAR2,
                                        pDATE_TO VARCHAR2,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pCUERSOR OUT T_CURSOR)IS
          wk_select    					Varchar2(1000); 
   				wk_where              Varchar2(1000);
          --*** Check condition for search
    BEGIN
        IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    
    		IF pMODEL is not null then
    	 				wk_where := wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
    
    		IF pTYPE is not null then
    	 				wk_where := wk_where||' AND TYPE = '||''''||pTYPE||'''';
    		End IF;
        IF pZONE is not null then
    	 				wk_where := wk_where||' AND ZONE = '||''''||pZONE||'''';
    		End IF;
    		IF pCREATE_DATE is not null then

    					wk_where := wk_where||' AND to_char('||pCREATE_DATE||','||''''||'YYYYMMDD'||''''||')'
              ||'BETWEEN to_char(to_date('||''''||pDATE_FROM||''''||','||''''||'dd-MON-yyyy'||''''||'),'||''''||'YYYYMMDD'||''''||')
               AND to_char(to_date('||''''||pDATE_TO||''''||','||''''||'dd-MON-yyyy'||''''||'),'||''''||'YYYYMMDD'||''''||')';
                        	
        END IF;
        IF pCREATE_BY is not null then
    	 				wk_where := wk_where||' AND CREATE_BY = '||''''||pCREATE_BY||'''';
   			End IF;
        IF pUPDATE_BY is not null then
    	 				wk_where := wk_where||' AND UPDATE_BY = '||''''||pUPDATE_BY||'''';
   			End IF;
 
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT * FROM T_SLANE_DELIVERY_CYCLE_MASTER ' ||wk_where||' ORDER BY UPDATE_DATE DESC';
   
  		--*** Execute cursor
   			OPEN pCUERSOR FOR wk_select;

END P_SLANE_CYCLE_MASTER_SEL;
END PG_SLANE_CYCLE_MASTER;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_DAISHA_CONT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_DAISHA_CONT" AS

  PROCEDURE P_SLANE_DAISHA_CONT AS
  BEGIN
    -- TODO: Implementation required for PROCEDURE PG_SLANE_DAISHA_CONT.P_SLANE_DAISHA_CONT
    UPDATE T_SLANE_DAISHA_PROGRESSIVE
    SET PLAN_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
    , SHIFT = 'D'
    WHERE PLAN_DATE = (SELECT MAX(PLAN_DATE) 
      FROM T_SLANE_DAISHA_PROGRESSIVE WHERE LOCATION <> 'EMPTY'  )
    /*AND (LOCATION <> 'EMPTY' OR LOCATION IS NULL)
    AND LOCATION <> 'ASSY' ;*/
    --AND LOCATION <> 'EMPTY';
    --OR LOCATION <> 'ASSY') ;
     AND (LOCATION <> 'EMPTY' AND LOCATION <> 'ASSY' OR LOCATION IS NULL);
     
    UPDATE T_SLANE_DAISHA_PROGRESSIVE -------------- stock
    SET ORDER_NO = 0
    WHERE PLAN_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
    AND LOCATION = 'IN KITTING';
    
    UPDATE T_SLANE_PROGRESS_ORDER_DAISHA  -------------- stock
    SET PLAN_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
    , ROUND = 0
    , SHIFT = 'D'
    WHERE PLAN_DATE = (SELECT MAX(PLAN_DATE) FROM T_SLANE_PROGRESS_ORDER_DAISHA WHERE MIN_BLANE IS NULL)
    AND MIN_BLANE IS NULL
    AND SHIFT = 'N';
    
    COMMIT;
   
  END P_SLANE_DAISHA_CONT;

END PG_SLANE_DAISHA_CONT;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_DAISHA_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_DAISHA_MASTER" AS

  PROCEDURE SLANE_DAISHA_MASTER_INS_UPD ( pFACTORY_CD   VARCHAR2,
                                          pMODEL_SEQ    VARCHAR2,
                                          pMODEL        VARCHAR2,
                                          pMODEL_ALL    VARCHAR2,
                                          pLINE_CD      VARCHAR2,
                                          pDAISHA_TYPE  VARCHAR2,
                                          pDAISHA_GROUP VARCHAR2,
                                          pMIN          NUMBER,
                                          pMAX          NUMBER,
                                          pCREATE_BY    VARCHAR2,
                                          pUPDATE_BY    VARCHAR2,
                                          pSNP          NUMBER,
                                          pSLANE OUT NUMBER) AS
  BEGIN
    -- TODO: Implementation required for PROCEDURE PG_SLANE_DAISHA_MASTER.SLANE_DAISHA_MASTER_INS_UPD
    INSERT INTO T_SLANE_DAISHA_MASTER (  FACTORY_CD,
                                         MODEL_SEQ,
                                         MODEL,
                                         MODEL_ALL,
                                         LINE_CD,
                                         DAISHA_TYPE,
                                         DAISHA_GROUP,
                                         MIN,
                                         MAX,
                                         CREATE_DATE,
                                         CREATE_BY,
                                         UPDATE_DATE,
                                         UPDATE_BY,
                                         SNP) 
                              VALUES (   pFACTORY_CD,
                                         pMODEL_SEQ,
                                         pMODEL,
                                         pMODEL_ALL,
                                         pLINE_CD,
                                         pDAISHA_TYPE,
                                         pDAISHA_GROUP,
                                         pMIN,
                                         pMAX,
                                         sysdate,
                                         pCREATE_BY,
                                         sysdate,
                                         pUPDATE_BY,
                                         pSNP);
   
    pSLANE := 1;
    
  EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
   UPDATE T_SLANE_DAISHA_MASTER SET 
   MIN = pMIN,
   MAX = pMAX,
   UPDATE_DATE = SYSDATE,
   UPDATE_BY = pUPDATE_BY,
   SNP = pSNP
   WHERE FACTORY_CD = pFACTORY_CD 
   AND MODEL = pMODEL 
   AND LINE_CD = pLINE_CD 
   AND DAISHA_TYPE = pDAISHA_TYPE 
   AND DAISHA_GROUP = pDAISHA_GROUP;
    pSLANE := 1; 
  
  END SLANE_DAISHA_MASTER_INS_UPD;
  
 ----------------------------------------------------------------------------- 
  PROCEDURE SLANE_DAISHA_MASTER_DEL (   pFACTORY_CD VARCHAR2,
                                        pMODEL_SEQ VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pLINE_CD VARCHAR2,
                                        pDAISHA_TYPE VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pSLANE OUT NUMBER) AS
   BEGIN
      DELETE FROM T_SLANE_DAISHA_MASTER WHERE 
      FACTORY_CD = pFACTORY_CD
      AND MODEL_SEQ = pMODEL_SEQ
      AND MODEL = pMODEL 
      AND LINE_CD = pLINE_CD 
      AND DAISHA_TYPE = pDAISHA_TYPE
      AND DAISHA_GROUP = pDAISHA_GROUP;
      
      pSLANE := 1;
      
   END SLANE_DAISHA_MASTER_DEL;   
 ------------------------------------------------------------------------------  
   PROCEDURE SLANE_DAISHA_MASTER_SEL (  pFACTORY_CD   VARCHAR2,
                                        pMODEL_SEQ    VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pMODEL_ALL    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pCREATE_DATE  VARCHAR2,
                                        pDATE_FROM    VARCHAR2,
                                        pDATE_TO      VARCHAR2,
                                        pCREATE_BY    VARCHAR2,
                                        pUPDATE_BY    VARCHAR2,
                                        pSNP          VARCHAR2,
                                        pCUERSOR OUT T_CURSOR) IS
                                        
          wk_select    					Varchar2(1000); 
   				wk_where              Varchar2(1000);
          --*** Check condition for search
    BEGIN
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
        IF pMODEL_SEQ is not null then
    	 				wk_where :=  wk_where||' AND MODEL_SEQ = '||''''||pMODEL_SEQ||'''';
   			End IF;
    		IF pMODEL is not null then
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF pMODEL_ALL is not null then
    	 				wk_where :=  wk_where||' AND MODEL_ALL = '||''''||pMODEL_ALL||'''';
   			End IF;
    		IF pLINE_CD is not null then
    	 				wk_where := wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
    		End IF;
   
    		IF pDAISHA_TYPE is not null then
    	 				wk_where := wk_where||' AND DAISHA_TYPE = '||''''||pDAISHA_TYPE||'''';
    		End IF;
        
        IF pDAISHA_GROUP is not null then
    	 				wk_where := wk_where||' AND DAISHA_GROUP = '||''''||pDAISHA_GROUP||'''';
   			End IF;
        
    		IF pCREATE_DATE is not null then
    					wk_where := wk_where||' AND to_char('||pCREATE_DATE||','||''''||'YYYYMMDD'||''''||')'
              ||'BETWEEN to_char(to_date('||''''||pDATE_FROM||''''||','||''''||'dd-MON-yyyy'||''''||'),'||''''||'YYYYMMDD'||''''||')
               AND to_char(to_date('||''''||pDATE_TO||''''||','||''''||'dd-MON-yyyy'||''''||'),'||''''||'YYYYMMDD'||''''||')';
        END IF;
        
        IF pCREATE_BY is not null then
    	 				wk_where := wk_where||' AND CREATE_BY = '||''''||pCREATE_BY||'''';
   			End IF;  
        
        IF pUPDATE_BY is not null then
    	 				wk_where := wk_where||' AND UPDATE_BY = '||''''||pUPDATE_BY||'''';
   			End IF;
        
        IF pSNP is not null then
    	 				wk_where := wk_where||' AND SNP = '||''''||pSNP||'''';
   			End IF;
 
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT * FROM T_SLANE_DAISHA_MASTER ' ||wk_where||' ORDER BY UPDATE_DATE DESC';
   
  		--*** Execute cursor
   			OPEN pCUERSOR FOR wk_select;
                                        
    END SLANE_DAISHA_MASTER_SEL;  
END PG_SLANE_DAISHA_MASTER;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_DAISHA_PROGRESSIVE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_DAISHA_PROGRESSIVE" AS
PROCEDURE P_SLANE_DAISHA_PROGRESSIVE_SEL (  pFACTORY_CD   VARCHAR2,
                                            pMODEL        VARCHAR2,
                                            pPLAN_DATE    VARCHAR2,
                                            pLINE_CD      VARCHAR2,
                                            pDAISHA_TYPE  VARCHAR2,
                                            pDAISHA_GROUP VARCHAR2,
                                            pROUND        NUMBER,
                                            pCUERSOR      OUT T_CURSOR)IS
                                        
         wk_select    				 Varchar2(1000); 
         wk_where              Varchar2(1000);
         vSEQ  T_SLANE_DAISHA_PROGRESSIVE.SEQ%TYPE;
          --*** Check condition for search
    BEGIN
    
      SELECT MIN(SEQ) INTO vSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = pPLAN_DATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE 
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND ROUND = pROUND
      AND PLAN_OUT_SLANE_DT IS NOT NULL
      AND PLAN_OUT_SLANE_TM IS NOT NULL
      AND ACT_OUT_SLANE_DT IS NULL
      AND ACT_OUT_SLANE_TM IS NULL;
      
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    		IF pMODEL is not null then
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF pPLAN_DATE is not null then
    	 				wk_where :=  wk_where||' AND PLAN_DATE = '||''''||pPLAN_DATE||'''';
   			End IF;
    	  IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
    		IF pDAISHA_TYPE is not null then
    	 				wk_where := wk_where||' AND DAISHA_TYPE = '||''''||pDAISHA_TYPE||'''';
    		End IF;
        IF pDAISHA_GROUP is not null then
    	 				wk_where := wk_where||' AND DAISHA_GROUP = '||''''||pDAISHA_GROUP||'''';
   			End IF;
         IF vSEQ is not null then
    	 				wk_where := wk_where||' AND SEQ = '||''''||vSEQ||'''';
   			End IF;
        
         IF pROUND is not null then
    	 				wk_where := wk_where||' AND ROUND = '||''''||pROUND||'''';
   			End IF;
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT * FROM T_SLANE_DAISHA_PROGRESSIVE ' ||wk_where||' AND PLAN_OUT_SLANE_DT IS NOT NULL AND PLAN_OUT_SLANE_TM IS NOT NULL AND ACT_OUT_SLANE_DT IS NULL AND ACT_OUT_SLANE_TM IS NULL';
   
  		--*** Execute cursor
   			OPEN pCUERSOR FOR wk_select;
END P_SLANE_DAISHA_PROGRESSIVE_SEL;
 -----------------------------------------------------------------------------
PROCEDURE P_STORE_OUT_SLANE_INQ (       pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pCURSOR       OUT T_CURSOR) IS
                                        
         wk_select    VARCHAR2(2000); 
         wk_where     VARCHAR2(1000);
         vDATE        VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
         vTIME        VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS'); 
         --vTIME        VARCHAR2(8) := '00:32:00' ;
    BEGIN
    
        IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
          vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
          --vDATE := '20180709' ;
        ELSE
          vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
          -- vDATE := '20180713' ;
        END IF;
    
     	  IF pFACTORY_CD IS NOT NULL THEN
    	 				wk_where := ' AND A.FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    		IF pMODEL IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND A.MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF vDATE IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND A.PLAN_DATE = '||''''||vDATE||'''';
   			End IF;
      --*** Add WHERE and substr AND
    		IF wk_where is not null then
    		  	wk_where := ' WHERE '||substr(wk_where,5); 
    		End IF; 
        
           wk_select := 'SELECT A.MODEL, A.LINE_CD, A.CELL_NAME, D.DAISHA_TYPE_N, C.DAISHA_GROUP_N,
           A.DESTINATION, A.COLOR, B.COLOR_NAME, A.ROUND, A.PLAN_OUT_SLANE_DT, A.PLAN_OUT_SLANE_TM, A.ACT_OUT_SLANE_DT, A.ACT_OUT_SLANE_TM,
           CASE WHEN A.ACT_OUT_SLANE_TM <> '||''''||'xx:xx:xx'||''''||' THEN 
           ROUND((TO_DATE(TO_CHAR(TO_DATE(PLAN_OUT_SLANE_DT,'||''''||'YYYYMMDD'||''''||'),'||''''||'YYYYMMDD'||''''||')||SUBSTR(PLAN_OUT_SLANE_TM,0,5),'||''''||'YYYYMMDDHH24:MI'||''''||')
           - TO_DATE(TO_CHAR(TO_DATE(ACT_OUT_SLANE_DT,'||''''||'YYYYMMDD'||''''||'),'||''''||'YYYYMMDD'||''''||')||SUBSTR(ACT_OUT_SLANE_TM,0,5),'||''''||'YYYYMMDDHH24:MI'||''''||'))*1440) 
           ELSE NULL END AS DIFF
           FROM T_SLANE_DAISHA_PROGRESSIVE A LEFT JOIN COLOR_MASTER B ON A.COLOR = B.COLOR_CD
           LEFT JOIN T_SLANE_DAISHA_GROUP C ON A.DAISHA_GROUP = C.DAISHA_GROUP 
           LEFT JOIN T_SLANE_DAISHA_TYPE D ON A.DAISHA_TYPE = D.DAISHA_TYPE
           '||wk_where||' AND A.BLANE_SIGNAL_DT IS NOT NULL AND A.BLANE_SIGNAL_TM IS NOT NULL AND A.PLAN_OUT_SLANE_DT IS NOT NULL AND A.PLAN_OUT_SLANE_TM IS NOT NULL 
           AND A.LOCATION <> '''||'ASSY'||''' AND (A.LOCATION <> '''||'EMPTY'||''' OR ACT_OUT_SLANE_DT IS NULL)
           ORDER BY A.ACT_OUT_SLANE_TM ASC NULLS FIRST, A.PLAN_OUT_SLANE_TM, A.DAISHA_TYPE, A.ROUND, A.DAISHA_GROUP';
           
      --AND (ACT_OUT_SLANE_DT IS NULL AND ACT_OUT_SLANE_TM IS NULL) 
  		--*** Execute cursor
   			OPEN pCURSOR FOR wk_select;
        
END P_STORE_OUT_SLANE_INQ; 
--------------------------------------------------------------------------------  
PROCEDURE P_STORE_OUT_SLANE_KT (        pFACTORY_CD VARCHAR2,
                                        pMODEL      VARCHAR2,
                                        --pSHIFT      VARCHAR2,
                                        pLINE_CD    VARCHAR2,
                                        pTYPE       VARCHAR2,
                                        pGROUP      VARCHAR2,
                                        pROUND      NUMBER,
                                        pSLANE      OUT NUMBER) AS
                                        
    vDATE     VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME     VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS'); 
    --vTIME     VARCHAR2(8) := '21:40:00' ;
    vSEQ      T_SLANE_DAISHA_PROGRESSIVE.SEQ%TYPE;
    vROUND    T_SLANE_DAISHA_PROGRESSIVE.ROUND%TYPE;
    --vCYCLE    T_SLANE_DELIVERY_CYCLE_MASTER.CYCLE_TIME%TYPE;
    vSHIFT    T_SLANE_DAISHA_PROGRESSIVE.SHIFT%TYPE;
    vORDER    T_SLANE_DAISHA_PROGRESSIVE.ORDER_NO%TYPE;
    
    vMINROUND     NUMBER;
    vMINSEQ       NUMBER;
    vCHK_ROUND    NUMBER;
    vCHK_ROUND2   NUMBER;
    vCHK_SEQ      NUMBER;
    vCNTORDER     NUMBER;
    vMAXROUND     NUMBER;
    --vPLAN_OUT     VARCHAR2(8);-- := TO_CHAR(SYSDATE,'HH24:MI:SS');
    
    vZONE         VARCHAR2(1) := 'P';
    vCYCLE_TIME   VARCHAR2(16);
    vPLAN_OUT_SLANE_DT        T_SLANE_DAISHA_PROGRESSIVE.PLAN_OUT_SLANE_DT%TYPE;
    vPLAN_OUT_SLANE_TM        T_SLANE_DAISHA_PROGRESSIVE.PLAN_OUT_SLANE_TM%TYPE;
    vACT_OUT_SLANE_DT         T_SLANE_DAISHA_PROGRESSIVE.ACT_OUT_SLANE_DT%TYPE;
    vACT_OUT_SLANE_TM         T_SLANE_DAISHA_PROGRESSIVE.ACT_OUT_SLANE_TM%TYPE;
    --vORDER_NO     NUMBER;
    vCNT_SUCCESS  NUMBER;
    
    BEGIN
    
      IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
        vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
        --vDATE := '20180712' ;
      ELSE
        vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
        --vDATE := '20180815' ;
      END IF;
      
      IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
        vSHIFT := 'D';
      ELSE
        vSHIFT := 'N';
      END IF;      
      
    --GET MIN SEQ
    SELECT MIN(ROUND), MIN(SEQ) INTO vMINROUND, vMINSEQ
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    -- AND ROUND = pROUND 
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NULL
    AND ACT_OUT_SLANE_TM IS NULL;
    
    IF vMINSEQ IS NULL THEN
      vMINSEQ := 0;
    END IF;
    
    INSERT INTO T_SLANE_TEMP_PROCESS   (   MODEL,
                                             PLAN_DATE,
                                             SHIFT,
                                             LINE_CD,
                                             DAISHA_TYPE,
                                             DAISHA_GROUP,
                                             SEQ,
                                             ROUND,
                                             DESTINATION,
                                             COLOR,
                                             LOCATION,
                                             PROCESS_ID,
                                             PROCESS_NAME,
                                             STATUS,
                                             TIME)
                               VALUES    (   pMODEL,
                                             vDATE,
                                             vSHIFT,
                                             pLINE_CD,
                                             pTYPE,
                                             pGROUP,
                                             vMINSEQ,
                                             pROUND,
                                             'KITTING',
                                             NULL,
                                             'KITTING',
                                             4,
                                             'STORE_OUT_SLANE_KT',
                                             NULL,
                                             vTIME);                                 
          COMMIT;
    
    --GET SEQ OF ROUND
    SELECT MIN(SEQ) INTO vCHK_SEQ --vCHK_ROUND, 
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE MODEL = pMODEL
    AND PLAN_DATE = vDATE 
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND ROUND = pROUND
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NULL
    AND ACT_OUT_SLANE_TM IS NULL;
   -- GROUP BY ROUND;
    
    --GET MIN ROUND OF PRIORITY DAISHA FIFO
    SELECT ROUND INTO vCHK_ROUND2
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE MODEL = pMODEL
    --AND SHIFT = pSHIFT
    AND PLAN_DATE = vDATE 
    AND LINE_CD = pLINE_CD 
    AND DAISHA_TYPE = pTYPE 
    AND DAISHA_GROUP = pGROUP
    AND SEQ = vMINSEQ
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NULL
    AND ACT_OUT_SLANE_TM IS NULL;
    
    IF vCHK_ROUND2 = pROUND AND vMINSEQ = vCHK_SEQ THEN
      
    UPDATE T_SLANE_DAISHA_PROGRESSIVE
    SET LOCATION = 'KITTING',
        ACT_OUT_SLANE_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),
        ACT_OUT_SLANE_TM = vTIME,
        SHIFT = vSHIFT
    WHERE MODEL = pMODEL
    --AND SHIFT = pSHIFT --SEPARATE SHIFT FOR UPDATE ONE ROW
    AND PLAN_DATE = vDATE 
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND ROUND = pROUND 
    AND SEQ = vMINSEQ
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NULL
    AND ACT_OUT_SLANE_TM IS NULL;
    COMMIT;
    
      SELECT MAX(ORDER_NO) INTO vMAXROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE 
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND; 
      
      /*SELECT MAX(TO_NUMBER(ROUND)) INTO vMAXROUND
      FROM T_SLANE_PROGRESS_ORDER_DAISHA 
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      --AND SHIFT = pSHIFT
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND
      AND ACTUAL_TIME IS NULL;
      
      SELECT COUNT(*) INTO vCNTORDER
      FROM T_SLANE_PROGRESS_ORDER_DAISHA
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      --AND SHIFT = pSHIFT
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND 
      AND ROUND = vMAXROUND;*/
      
   /* SELECT PLAN_TIME INTO vPLAN_OUT
      FROM T_SLANE_PROGRESS_ORDER_DAISHA
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      --AND SHIFT = pSHIFT
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND 
      AND ROUND = vMAXROUND;*/
       
      --IF vCNTORDER != 0 THEN
      
      SELECT PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM 
      INTO vPLAN_OUT_SLANE_DT, vPLAN_OUT_SLANE_TM, vACT_OUT_SLANE_DT, vACT_OUT_SLANE_TM  
      FROM T_SLANE_DAISHA_PROGRESSIVE  
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND 
      AND SEQ = vMINSEQ
      AND PLAN_OUT_SLANE_DT IS NOT NULL
      AND PLAN_OUT_SLANE_TM IS NOT NULL
      AND ACT_OUT_SLANE_DT IS NOT NULL
      AND ACT_OUT_SLANE_TM IS NOT NULL;
    
      /*UPDATE T_SLANE_PROGRESS_ORDER_DAISHA 
      SET ACTUAL_TIME = vTIME,
          DIFF = (TO_DATE(TO_CHAR(TO_DATE(vPLAN_OUT_SLANE_DT,'YYYYMMDD'),'YYYYMMDD')||SUBSTR(vPLAN_OUT_SLANE_TM,0,5),'YYYYMMDDHH24:MI')
                 - TO_DATE(TO_CHAR(TO_DATE(vACT_OUT_SLANE_DT,'YYYYMMDD'),'YYYYMMDD')||SUBSTR(vACT_OUT_SLANE_TM,0,5),'YYYYMMDDHH24:MI'))*1440
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      --AND SHIFT = pSHIFT
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND 
      AND ROUND = vMAXROUND;
      COMMIT;     
        
      END IF;*/
        
      -- GET Max SEQ
      SELECT MAX(SEQ) +1 INTO vSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE 
      AND LINE_CD = pLINE_CD 
      AND DAISHA_TYPE = pTYPE 
      AND DAISHA_GROUP = pGROUP; 
      
      -- GET Max ROUND
      SELECT MAX(ROUND) +1 INTO vROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE 
      AND SEQ = vSEQ-1 
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE 
      AND DAISHA_GROUP = pGROUP; 
      
     -- GET Cycle Time PICKING Of KITTING
     /* SELECT CYCLE_TIME INTO vCYCLE
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'KITTING'
      AND ZONE = 'P';*/
      
      vCYCLE_TIME := GET_TIME_PICKING(pMODEL, pTYPE, vDATE, vSHIFT, vTIME, NULL, vZONE);
       
      IF vROUND > 20 THEN
        vROUND := 1;
      END IF;
      
        BEGIN
          INSERT INTO T_SLANE_DAISHA_PROGRESSIVE (FACTORY_CD,
                                                  MODEL,
                                                  PLAN_DATE,
                                                  SHIFT,
                                                  LINE_CD,
                                                  CELL_NAME,
                                                  DAISHA_TYPE,
                                                  DAISHA_GROUP,
                                                  SEQ,
                                                  ROUND,
                                                  MERCHANDISE_CD,
                                                  DESTINATION,
                                                  COLOR,
                                                  LOCATION,
                                                  PLAN_PICK_DT,
                                                  PLAN_PICK_TM,
                                                  ACT_PICK_DT,
                                                  ACT_PICK_TM,
                                                  SLANE_IN_DT,
                                                  SLANE_IN_TM,
                                                  BLANE_SIGNAL_DT,
                                                  BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT,
                                                  PLAN_OUT_SLANE_TM,
                                                  ACT_OUT_SLANE_DT,
                                                  ACT_OUT_SLANE_TM,
                                                  BLANE_IN_DT,
                                                  BLANE_IN_TM)
                                        VALUES    (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  vSHIFT,
                                                  pLINE_CD,
                                                  'ALL',
                                                  pTYPE,
                                                  pGROUP,
                                                  vSEQ,
                                                  vROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  NULL,
                                                  NULL,
                                                  SUBSTR(vCYCLE_TIME,0,8),--vDATE,
                                                  SUBSTR(vCYCLE_TIME,9,8),
                                                  --TO_CHAR(SYSDATE + (.000694 * vCYCLE), 'HH24:MI:SS'),
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL);                                 
        COMMIT;
        
        UPDATE T_SLANE_TEMP_PROCESS
        SET STATUS = 'OK',
        TIME = vTIME
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND SHIFT = vSHIFT
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND SEQ = vMINSEQ
        AND ROUND = pROUND
        AND DESTINATION = 'KITTING'
        AND LOCATION = 'KITTING'
        AND PROCESS_ID = 4;
        COMMIT;
        --pSLANE := 0;
        
        /*SELECT MAX(ORDER_NO) INTO vORDER_NO FROM T_SLANE_DAISHA_PROGRESSIVE  
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE 
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND COLOR IS NOT NULL
        AND LOCATION = 'S-LANE'
        AND BLANE_SIGNAL_DT IS NOT NULL
        AND BLANE_SIGNAL_DT IS NOT NULL
        AND PLAN_OUT_SLANE_DT IS NOT NULL
        AND PLAN_OUT_SLANE_TM IS NOT NULL;*/
        
        SELECT COUNT(*) INTO vCNT_SUCCESS FROM T_SLANE_DAISHA_PROGRESSIVE  
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE 
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND ORDER_NO = vMAXROUND
        AND ACT_OUT_SLANE_DT IS NULL
        AND ACT_OUT_SLANE_TM IS NULL;
        
        IF vCNT_SUCCESS != 0 THEN
          pSLANE := vCNT_SUCCESS; --REMAIN DAISHA
        ELSE 
          pSLANE := 888; --SUCCESS
        END IF;
        
        END;--BEGIN
         
      ELSE 
      pSLANE := 999||vCHK_ROUND2; --FIFO
    END IF;
    
    EXCEPTION
      WHEN NO_DATA_FOUND THEN 
        pSLANE := 999;   
       
      WHEN DUP_VAL_ON_INDEX THEN
        pSLANE := 999;  
        
      WHEN OTHERS THEN 
        pSLANE := 999;
        
  END P_STORE_OUT_SLANE_KT;
 -----------------------------------------------------------------------------
PROCEDURE P_STORE_OUT_SLANE (           pFACTORY_CD VARCHAR2,
                                        pMODEL      VARCHAR2,
                                        --pSHIFT      VARCHAR2,
                                        pLINE_CD    VARCHAR2,
                                        pTYPE       VARCHAR2,
                                        pGROUP      VARCHAR2,
                                        pROUND      NUMBER,
                                        pSLANE      OUT NUMBER) AS                                        
                                        
    vDATE         VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME         VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    --vTIME         VARCHAR2(8) := '00:00:00' ;
    vSEQ          T_SLANE_DAISHA_PROGRESSIVE.SEQ%TYPE;
    vROUND        T_SLANE_DAISHA_PROGRESSIVE.ROUND%TYPE;
    --vCYCLE        T_SLANE_DELIVERY_CYCLE_MASTER.CYCLE_TIME%TYPE;
    vSHIFT        T_SLANE_DAISHA_PROGRESSIVE.SHIFT%TYPE;
    CUR1          T_SLANE_PRODUCTION_PLAN_DAISHA%ROWTYPE;
    
    vMINROUND     NUMBER;
    vMINSEQ       NUMBER;
    vCHK_ROUND    NUMBER;
    vCHK_ROUND2   NUMBER;
    vCHK_SEQ      NUMBER;
    vCNT_ORDER    NUMBER;
    --vPLAN_OUT     VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    vMAXROUND     NUMBER;
    vCELL_NAME    VARCHAR(10);
    
    vZONE         VARCHAR2(1) := 'P';
    vCYCLE_TIME   VARCHAR2(16);
    vPLAN_OUT_SLANE_DT        T_SLANE_DAISHA_PROGRESSIVE.PLAN_OUT_SLANE_DT%TYPE;
    vPLAN_OUT_SLANE_TM        T_SLANE_DAISHA_PROGRESSIVE.PLAN_OUT_SLANE_TM%TYPE;
    vACT_OUT_SLANE_DT         T_SLANE_DAISHA_PROGRESSIVE.ACT_OUT_SLANE_DT%TYPE;
    vACT_OUT_SLANE_TM         T_SLANE_DAISHA_PROGRESSIVE.ACT_OUT_SLANE_TM%TYPE;
    vCNT_SUCCESS  NUMBER;
    
    BEGIN
    
      IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
        vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
        --vDATE := '20180712' ;
      ELSE
        vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
        --vDATE := '20180807' ;
      END IF;
      
      IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
        vSHIFT := 'D';
      ELSE
        vSHIFT := 'N';
      END IF;
      
    --GET MIN SEQ
    SELECT MIN(ROUND), MIN(SEQ) INTO vMINROUND, vMINSEQ
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
   -- AND ROUND = pROUND 
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NULL
    AND ACT_OUT_SLANE_TM IS NULL;
    
    /*IF vMINSEQ IS NULL THEN
      vMINSEQ := 0;
    END IF;*/
    
    INSERT INTO T_SLANE_TEMP_PROCESS   (   MODEL,
                                             PLAN_DATE,
                                             SHIFT,
                                             LINE_CD,
                                             DAISHA_TYPE,
                                             DAISHA_GROUP,
                                             SEQ,
                                             ROUND,
                                             DESTINATION,
                                             COLOR,
                                             LOCATION,
                                             PROCESS_ID,
                                             PROCESS_NAME,
                                             STATUS,
                                             TIME)
                               VALUES    (   pMODEL,
                                             vDATE,
                                             vSHIFT,
                                             pLINE_CD,
                                             pTYPE,
                                             pGROUP,
                                             vMINSEQ,
                                             pROUND,
                                             'B-LANE',
                                             NULL,
                                             'B-LANE',
                                             4,
                                             'STORE_OUT_BLANE',
                                             NULL,
                                             vTIME);                                 
          COMMIT;
          
    --GET SEQ OF ROUND
    SELECT MIN(SEQ) INTO vCHK_SEQ --vCHK_ROUND,
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE MODEL = pMODEL
    AND PLAN_DATE = vDATE 
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND ROUND = pROUND
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NULL
    AND ACT_OUT_SLANE_TM IS NULL;
    --GROUP BY ROUND;
    
    --GET MIN ROUND OF PRIORITY DAISHA FIFO
    SELECT ROUND INTO vCHK_ROUND2
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE MODEL = pMODEL
    AND PLAN_DATE = vDATE 
    AND LINE_CD = pLINE_CD 
    AND DAISHA_TYPE = pTYPE 
    AND DAISHA_GROUP = pGROUP
    AND SEQ = vMINSEQ
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NULL
    AND ACT_OUT_SLANE_TM IS NULL;
      
    IF vCHK_ROUND2 = pROUND AND vMINSEQ = vCHK_SEQ THEN
   
    UPDATE T_SLANE_DAISHA_PROGRESSIVE
    SET LOCATION = 'B-LANE',
        ACT_OUT_SLANE_DT = TO_CHAR(SYSDATE,'YYYYMMDD'), --vDATE,
        ACT_OUT_SLANE_TM = vTIME,
        SHIFT = vSHIFT
    WHERE MODEL = pMODEL
    --AND SHIFT = pSHIFT 
    AND PLAN_DATE = vDATE --vDATE
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND ROUND = pROUND -- Check ???
    AND SEQ = vMINSEQ
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL
    AND ACT_OUT_SLANE_DT IS NULL
    AND ACT_OUT_SLANE_TM IS NULL;
    COMMIT;
    
    SELECT MAX(ORDER_NO) INTO vMAXROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE 
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND;  
      
    /*SELECT MAX(TO_NUMBER(ROUND)) INTO vMAXROUND
      FROM T_SLANE_PROGRESS_ORDER_DAISHA 
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND
      AND ACTUAL_TIME IS NULL;
      
    SELECT COUNT(*) INTO vCNT_ORDER
      FROM T_SLANE_PROGRESS_ORDER_DAISHA
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      --AND SHIFT = pSHIFT
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND   -- ORDER_NO = 1-20
      AND ROUND = vMAXROUND;*/
      
      /*SELECT PLAN_TIME INTO vPLAN_OUT
      FROM T_SLANE_PROGRESS_ORDER_DAISHA
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      --AND SHIFT = pSHIFT
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND
      AND ROUND = vMAXROUND;*/
            
      --IF vCNT_ORDER != 0 THEN 
        SELECT PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM 
        INTO vPLAN_OUT_SLANE_DT, vPLAN_OUT_SLANE_TM, vACT_OUT_SLANE_DT, vACT_OUT_SLANE_TM  
        FROM T_SLANE_DAISHA_PROGRESSIVE  
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND ROUND = pROUND 
        AND SEQ = vMINSEQ
        AND PLAN_OUT_SLANE_DT IS NOT NULL
        AND PLAN_OUT_SLANE_TM IS NOT NULL
        AND ACT_OUT_SLANE_DT IS NOT NULL
        AND ACT_OUT_SLANE_TM IS NOT NULL;
        
        /*UPDATE T_SLANE_PROGRESS_ORDER_DAISHA
        SET ACTUAL_TIME = vTIME,
            DIFF = (TO_DATE(TO_CHAR(TO_DATE(vPLAN_OUT_SLANE_DT,'YYYYMMDD'),'YYYYMMDD')||SUBSTR(vPLAN_OUT_SLANE_TM,0,5),'YYYYMMDDHH24:MI')
                    - TO_DATE(TO_CHAR(TO_DATE(vACT_OUT_SLANE_DT,'YYYYMMDD'),'YYYYMMDD')||SUBSTR(vACT_OUT_SLANE_TM,0,5),'YYYYMMDDHH24:MI'))*1440
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        --AND SHIFT = pSHIFT
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND ORDER_NO = pROUND 
        AND ROUND = vMAXROUND; -- ORDER_NO = 1-20
        COMMIT;
      END IF;*/
      
      -- GET Max SEQ
      SELECT MAX(SEQ) +1 INTO vSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      --AND SHIFT = pSHIFT --CHECK FOR INSERT SEQ EACH SHIFT
      AND PLAN_DATE = vDATE 
      AND LINE_CD = pLINE_CD 
      AND DAISHA_TYPE = pTYPE 
      AND DAISHA_GROUP = pGROUP; 
      
      -- GET Max ROUND
      SELECT MAX(ROUND) +1 INTO vROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      --AND SHIFT = pSHIFT --CHECK FOR INSERT ROUND EACH SHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND SEQ = vSEQ-1 
      AND DAISHA_TYPE = pTYPE 
      AND DAISHA_GROUP = pGROUP;
      
      -- GET Cycle Time PICKING Of KITTING
      /*SELECT CYCLE_TIME INTO vCYCLE
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'BLANE'
      AND ZONE = 'P';*/
      vCYCLE_TIME := GET_TIME_PICKING(pMODEL, pTYPE, vDATE, vSHIFT, vTIME, NULL, vZONE);
      
      IF vROUND > 20 THEN
        vROUND := 1;
      END IF; 
      
      /*SELECT * INTO CUR1
      FROM T_SLANE_PRODUCTION_PLAN_DAISHA
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND SEQ = vSEQ;*/
     
      SELECT CELL_NAME INTO vCELL_NAME
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE 
      AND DAISHA_GROUP = pGROUP
      AND SEQ = vSEQ-1;
      
        BEGIN
          INSERT INTO T_SLANE_DAISHA_PROGRESSIVE (FACTORY_CD,
                                                  MODEL,
                                                  PLAN_DATE,
                                                  SHIFT,
                                                  LINE_CD,
                                                  CELL_NAME,
                                                  DAISHA_TYPE,
                                                  DAISHA_GROUP,
                                                  SEQ,
                                                  ROUND,
                                                  MERCHANDISE_CD,
                                                  DESTINATION,
                                                  COLOR,
                                                  LOCATION,
                                                  PLAN_PICK_DT,
                                                  PLAN_PICK_TM,
                                                  ACT_PICK_DT,
                                                  ACT_PICK_TM,
                                                  SLANE_IN_DT,
                                                  SLANE_IN_TM,
                                                  BLANE_SIGNAL_DT,
                                                  BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT,
                                                  PLAN_OUT_SLANE_TM,
                                                  ACT_OUT_SLANE_DT,
                                                  ACT_OUT_SLANE_TM,
                                                  BLANE_IN_DT,
                                                  BLANE_IN_TM)
                                        VALUES    (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  vSHIFT,
                                                  pLINE_CD,
                                                  vCELL_NAME,
                                                  pTYPE,
                                                  pGROUP,
                                                  vSEQ,
                                                  vROUND,
                                                  'COMMON',
                                                  'COMMON',
                                                  NULL,
                                                  NULL,
                                                  SUBSTR(vCYCLE_TIME,0,8),--vDATE,
                                                  SUBSTR(vCYCLE_TIME,9,8), --to_char(sysdate + (.000694 * vCYCLE), 'HH24:MI:SS'),
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL);                                 
                           
        END;
        COMMIT;
        
        BEGIN
        UPDATE T_SLANE_TEMP_PROCESS
        SET STATUS = 'OK',
        TIME = vTIME
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND SHIFT = vSHIFT
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND SEQ = vMINSEQ
        AND ROUND = pROUND
        AND DESTINATION = 'B-LANE'
        AND LOCATION = 'B-LANE'
        AND PROCESS_ID = 4;
        COMMIT;
        
         /*UPDATE T_SLANE_PRODUCTION_PLAN_DAISHA
         SET FLAG = 'Y'
         WHERE MODEL = pMODEL
         AND PLAN_DATE = vDATE --vDATE
         AND LINE_CD = pLINE_CD
         AND SEQ = vSEQ;*/
        SELECT COUNT(*) INTO vCNT_SUCCESS FROM T_SLANE_DAISHA_PROGRESSIVE  
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE 
        AND LINE_CD = pLINE_CD
        --AND DAISHA_TYPE = pTYPE
        AND ORDER_NO = vMAXROUND
        AND ACT_OUT_SLANE_DT IS NULL
        AND ACT_OUT_SLANE_TM IS NULL;
        
        IF vCNT_SUCCESS != 0 THEN
          pSLANE := vCNT_SUCCESS; --REMAIN DAISHA
        ELSE 
          pSLANE := 888; --SUCCESS
        END IF;
        
        END;--BEGIN  --pSLANE := 0; 
        
        ELSE 
           pSLANE := 999||vCHK_ROUND2; --FIFO
      END IF; 
      
      EXCEPTION
      WHEN NO_DATA_FOUND THEN 
        pSLANE := 999;   
    
      WHEN DUP_VAL_ON_INDEX THEN
        pSLANE := 999; 
        
      WHEN OTHERS THEN 
        pSLANE := 999;
        
  END P_STORE_OUT_SLANE;
 -----------------------------------------------------------------------------
PROCEDURE P_PICKING_IN (                pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pCUERSOR      OUT T_CURSOR) IS
                                        
         wk_select    				 Varchar2(1000); 
         wk_where              Varchar2(1000);
         vSEQ  T_SLANE_DAISHA_PROGRESSIVE.SEQ%TYPE;

    BEGIN
    
      SELECT MIN(SEQ) INTO vSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = pPLAN_DATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE 
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND ROUND = pROUND
      AND PLAN_PICK_DT IS NOT NULL
      AND PLAN_PICK_TM IS NOT NULL
      AND ACT_PICK_DT IS NULL
      AND ACT_PICK_TM IS NULL;
    
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    		IF pMODEL is not null then
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF pPLAN_DATE is not null then
    	 				wk_where :=  wk_where||' AND PLAN_DATE = '||''''||pPLAN_DATE||'''';
   			End IF;
    	 IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
    		IF pDAISHA_TYPE is not null then
    	 				wk_where := wk_where||' AND DAISHA_TYPE = '||''''||pDAISHA_TYPE||'''';
    		End IF;
        IF pDAISHA_GROUP is not null then
    	 				wk_where := wk_where||' AND DAISHA_GROUP = '||''''||pDAISHA_GROUP||'''';
   			End IF;
         IF vSEQ is not null then
    	 				wk_where := wk_where||' AND SEQ = '||''''||vSEQ||'''';
   			End IF;
         IF pROUND is not null then
    	 				wk_where := wk_where||' AND ROUND = '||''''||pROUND||'''';
   			End IF;
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT MODEL, LINE_CD, CELL_NAME, CASE DAISHA_TYPE  WHEN '''||'MA'||''' THEN '''||'MAIN'||''' WHEN '''||'SU'||''' THEN '''||'SUB'||'''  
            WHEN '''||'MS'||''' THEN '''||'MAIN+SUB'||'''  WHEN '''||'KT'||''' THEN '''||'KITTING'||''' END AS DAISHA_TYPE, 
            CASE DAISHA_GROUP WHEN '''||'KR'||''' THEN '''||'KORAT'||''' WHEN '''||'O1'||''' THEN '''||'OTHER1'||''' WHEN '''||'O2'||''' THEN '''||'OTHER2'||''' 
            END AS DAISHA_GROUP, DESTINATION, COLOR, ROUND, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM, ACT_PICK_DT, ACT_PICK_TM  FROM T_SLANE_DAISHA_PROGRESSIVE 
            ' ||wk_where||' AND PLAN_PICK_DT IS NOT NULL AND PLAN_PICK_TM IS NOT NULL AND ACT_PICK_DT IS NULL AND ACT_PICK_TM IS NULL';
   
  		--*** Execute cursor
   			OPEN pCUERSOR FOR wk_select;
        
END P_PICKING_IN;
 -----------------------------------------------------------------------------
PROCEDURE P_PICKING_IN_INQ (            pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pCURSOR       OUT T_CURSOR) IS
                                        
         wk_select    VARCHAR2(3000); 
         wk_where     VARCHAR2(1000);
         vDATE        VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
         vTIME        VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS'); 
         --vTIME        VARCHAR2(8) := '00:32:00' ;
    BEGIN
    
        IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
          vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
          --vDATE := '20180709';
        ELSE
          vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
          --vDATE := '20180713' ;
        END IF;
        
     	  IF pFACTORY_CD IS NOT NULL THEN
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    		IF pMODEL IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF vDATE IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND PLAN_DATE = '||''''||vDATE||'''';
   			End IF;
        /*IF pSHIFT IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND SHIFT = '||''''||pSHIFT||'''';
   			End IF;*/
    	--*** Add WHERE and substr AND
    		IF wk_where is not null then
    		  	wk_where := ' WHERE '||substr(wk_where,5); 
    		End IF; 
        
           wk_select := 'SELECT MODEL, LINE_CD, CELL_NAME, D.DAISHA_TYPE_N, C.DAISHA_GROUP_N,
           DESTINATION, COLOR, COLOR_NAME, ROUND, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM, ACT_PICK_DT, ACT_PICK_TM
           FROM T_SLANE_DAISHA_PROGRESSIVE A LEFT JOIN COLOR_MASTER B ON A.COLOR = B.COLOR_CD 
           LEFT JOIN T_SLANE_DAISHA_GROUP C ON A.DAISHA_GROUP = C.DAISHA_GROUP 
           LEFT JOIN T_SLANE_DAISHA_TYPE D ON A.DAISHA_TYPE = D.DAISHA_TYPE
           '||wk_where||' AND (LOCATION IS NULL OR LOCATION = '''||'PICKING'||''') AND PLAN_PICK_DT IS NOT NULL AND PLAN_PICK_TM IS NOT NULL 
           ORDER BY A.ACT_PICK_TM ASC NULLS FIRST, D.DAISHA_TYPE_N, C.DAISHA_GROUP_N, A.ROUND';
          
          --AND PLAN_DATE = (SELECT MAX(PLAN_DATE) FROM T_SLANE_DAISHA_PROGRESSIVE '||wk_where||')
          /*wk_select := ' SELECT MODEL, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP, LOCATION, ROUND, PLAN_PICK_DT, PLAN_PICK_TM, ACT_PICK_DT, ACT_PICK_TM, DESTINATION, A.COLOR, COLOR_NAME FROM 
          (SELECT A.MODEL, A.LINE_CD, A.CELL_NAME, CASE A.DAISHA_TYPE  WHEN '''||'MA'||''' THEN '''||'MAIN'||''' WHEN '''||'SU'||''' THEN '''||'SUB'||'''  WHEN '''||'MS'||''' THEN '''||'MAIN+SUB'||'''  WHEN '''||'KT'||''' THEN '''||'KITTING'||''' END AS DAISHA_TYPE,       
          CASE A.DAISHA_GROUP WHEN '''||'KR'||''' THEN '''||'KORAT'||''' WHEN '''||'O1'||''' THEN '''||'OTHER1'||''' WHEN '''||'O2'||''' THEN '''||'OTHER2'||''' END AS DAISHA_GROUP, A.LOCATION, A.ROUND, A.PLAN_PICK_DT, A.PLAN_PICK_TM, A.ACT_PICK_DT, A.ACT_PICK_TM, A.DESTINATION, A.COLOR  
          FROM (SELECT * FROM T_SLANE_DAISHA_PROGRESSIVE '||wk_where||' AND PLAN_PICK_TM IS NOT NULL AND (LOCATION IS NULL OR LOCATION = '''||'PICKING'||'''))A, (SELECT MODEL, LINE_CD,LOCATION, CELL_NAME,DAISHA_TYPE,DAISHA_GROUP   
          ,MAX (ROUND) AS ROUND FROM T_SLANE_DAISHA_PROGRESSIVE '||wk_where||' AND LOCATION IS NULL GROUP BY MODEL, LINE_CD, LOCATION, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP, ROUND)B,
          (SELECT MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION, MAX(ROUND) AS ROUND FROM T_SLANE_DAISHA_PROGRESSIVE '||wk_where||' 
          AND (LOCATION IS NULL OR LOCATION = '''||'PICKING'||''') GROUP by MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION)C WHERE A.MODEL = B.MODEL AND A.LINE_CD = B.LINE_CD AND A.CELL_NAME = B.CELL_NAME AND A.DAISHA_TYPE = B.DAISHA_TYPE
          AND A.DAISHA_GROUP = B.DAISHA_GROUP AND A.MODEL = C.MODEL AND A.LINE_CD = C.LINE_CD AND A.CELL_NAME = C.CELL_NAME AND A.DAISHA_TYPE = C.DAISHA_TYPE AND A.DAISHA_GROUP = C.DAISHA_GROUP
          AND (A.ROUND = B.ROUND OR A.ROUND = C.ROUND) GROUP by A.MODEL, A.LINE_CD, A.CELL_NAME, A.DAISHA_TYPE, A.DAISHA_GROUP, A.LOCATION, A.ROUND, A.PLAN_PICK_DT, A.PLAN_PICK_TM, A.ACT_PICK_DT, A.ACT_PICK_TM, A.DESTINATION, A.COLOR 
          ORDER BY A.ROUND DESC) A LEFT JOIN COLOR_MASTER B ON A.COLOR = B.COLOR_CD ';    */ 

  		--*** Execute cursor
   			OPEN pCURSOR FOR wk_select;
        
END P_PICKING_IN_INQ;
 -----------------------------------------------------------------------------
PROCEDURE P_PICKING_IN_UPD (            pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        --pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER) AS 
       
         vSEQ       T_SLANE_DAISHA_PROGRESSIVE.SEQ%TYPE;
         vDATE      VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
         vTIME      VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
         --vTIME      VARCHAR2(8) := '21:15:00';
         vSHIFT     T_SLANE_DAISHA_PROGRESSIVE.SHIFT%TYPE;
         vCOUNT     NUMBER;   
         vMINROUND  NUMBER; 
         
    BEGIN
    
      IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
         vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
         --vDATE := '20180709';
      ELSE
         vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
         --vDATE := '20180801' ;
      END IF;
        
      IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
        vSHIFT := 'D';
      ELSE
        vSHIFT := 'N';
      END IF;
      
      SELECT MIN(SEQ) INTO vSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE 
      AND DAISHA_GROUP = pDAISHA_GROUP
      --AND ROUND = pROUND
      AND PLAN_PICK_DT IS NOT NULL
      AND PLAN_PICK_TM IS NOT NULL
      AND ACT_PICK_DT IS NULL
      AND ACT_PICK_TM IS NULL;
         
    -- GET Min ROUND PICKING FIFO
      SELECT MIN(ROUND) INTO vMINROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE 
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND PLAN_PICK_DT IS NOT NULL
      AND PLAN_PICK_TM IS NOT NULL
      AND ACT_PICK_DT IS NULL
      AND ACT_PICK_TM IS NULL
      AND SEQ = vSEQ;
   
     /* INSERT INTO T_SLANE_TEMP_PROCESS   (   MODEL,
                                             PLAN_DATE,
                                             SHIFT,
                                             LINE_CD,
                                             DAISHA_TYPE,
                                             DAISHA_GROUP,
                                             SEQ,
                                             ROUND,
                                             DESTINATION,
                                             COLOR,
                                             LOCATION,
                                             PROCESS_ID,
                                             PROCESS_NAME,
                                             STATUS,
                                             TIME)
                               VALUES    (   pMODEL,
                                             vDATE,
                                             vSHIFT,
                                             pLINE_CD,
                                             pDAISHA_TYPE,
                                             pDAISHA_GROUP,
                                             vSEQ,
                                             pROUND,
                                             'KITTING',
                                             NULL,
                                             'PICKING',
                                             2,
                                             'PICKING_IN',
                                             NULL,
                                             vTIME);                                 
          COMMIT;*/
   
      IF vMINROUND =  pROUND  THEN
        BEGIN
          SELECT COUNT(*) INTO vCOUNT
          FROM T_SLANE_REC_EMPTY_DAISHA WHERE TOTAL_EMPTY >= 1
          AND MODEL = pMODEL
          AND CAL_DATE = (SELECT MAX(CAL_DATE) FROM T_SLANE_REC_EMPTY_DAISHA 
            WHERE MODEL = pMODEL 
            AND LINE_CD = pLINE_CD
            AND DAISHA_TYPE = pDAISHA_TYPE
            AND DAISHA_GROUP = pDAISHA_GROUP)
          --AND SHIFT = vSHIFT
          AND LINE_CD = pLINE_CD
          AND DAISHA_TYPE = pDAISHA_TYPE
          AND DAISHA_GROUP = pDAISHA_GROUP;
        
        IF vCOUNT >= 1 THEN
          UPDATE T_SLANE_DAISHA_PROGRESSIVE
          SET LOCATION = 'PICKING',
              ACT_PICK_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
              ACT_PICK_TM = vTIME
          WHERE MODEL = pMODEL
          AND PLAN_DATE = vDATE 
          AND LINE_CD = pLINE_CD
          AND DAISHA_TYPE = pDAISHA_TYPE
          AND DAISHA_GROUP = pDAISHA_GROUP
          AND SEQ = vSEQ 
          AND ROUND =  pROUND
          AND PLAN_PICK_DT IS NOT NULL
          AND PLAN_PICK_TM IS NOT NULL
          AND ACT_PICK_DT IS NULL
          AND ACT_PICK_TM IS NULL;              
          COMMIT;
        
          UPDATE T_SLANE_REC_EMPTY_DAISHA
          SET TOTAL_EMPTY = TOTAL_EMPTY-1,
              UPDATE_DATE = SYSDATE
          WHERE MODEL = pMODEL
          AND CAL_DATE = (SELECT MAX(CAL_DATE) FROM T_SLANE_REC_EMPTY_DAISHA 
            WHERE MODEL = pMODEL 
            AND LINE_CD = pLINE_CD
            AND DAISHA_TYPE = pDAISHA_TYPE
            AND DAISHA_GROUP = pDAISHA_GROUP)
          --AND SHIFT = vSHIFT
          AND LINE_CD = pLINE_CD
          AND DAISHA_TYPE = pDAISHA_TYPE
          AND DAISHA_GROUP = pDAISHA_GROUP;
          COMMIT;
          
         /* UPDATE T_SLANE_TEMP_PROCESS
          SET STATUS = 'OK',
          TIME = vTIME
          WHERE MODEL = pMODEL
          AND PLAN_DATE = vDATE
          AND SHIFT = vSHIFT
          AND LINE_CD = pLINE_CD
          AND DAISHA_TYPE = pDAISHA_TYPE
          AND DAISHA_GROUP = pDAISHA_GROUP
          AND SEQ = vSEQ
          AND ROUND = pROUND
          AND DESTINATION = 'KITTING'
          AND LOCATION = 'PICKING'
          AND PROCESS_ID = 2;
          COMMIT;*/
            pSLANE := 111;   
        ELSE 
          pSLANE := 999; 
          
        END IF;
      END;
        
      COMMIT;
        
      ELSIF vMINROUND IS NULL THEN 
        pSLANE := 222; 
      ELSE 
        pSLANE := vMINROUND; 
          
     END IF; 
     
     /* EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
        pSLANE := vMINROUND;*/
     
 END P_PICKING_IN_UPD;
 ----------------------------------------------------------------------------- 
PROCEDURE P_STORE_IN (                  pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pCUERSOR      OUT T_CURSOR) IS
                                        
         wk_select        Varchar2(1000); 
         wk_where         Varchar2(1000);
         vSEQ  T_SLANE_DAISHA_PROGRESSIVE.SEQ%TYPE;

    BEGIN
    
      SELECT MIN(SEQ) INTO vSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = pPLAN_DATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE 
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND ROUND = pROUND
      AND ACT_PICK_DT IS NOT NULL
      AND ACT_PICK_TM IS NOT NULL
      AND SLANE_IN_DT IS NULL
      AND SLANE_IN_TM IS NULL;
    
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    		IF pMODEL is not null then
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF pPLAN_DATE is not null then
    	 				wk_where :=  wk_where||' AND PLAN_DATE = '||''''||pPLAN_DATE||'''';
   			End IF;
    	 IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
    		IF pDAISHA_TYPE is not null then
    	 				wk_where := wk_where||' AND DAISHA_TYPE = '||''''||pDAISHA_TYPE||'''';
    		End IF;
        IF pDAISHA_GROUP is not null then
    	 				wk_where := wk_where||' AND DAISHA_GROUP = '||''''||pDAISHA_GROUP||'''';
   			End IF;
         IF vSEQ is not null then
    	 				wk_where := wk_where||' AND SEQ = '||''''||vSEQ||'''';
   			End IF;
        
         IF pROUND is not null then
    	 				wk_where := wk_where||' AND ROUND = '||''''||pROUND||'''';
   			End IF;
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT * FROM T_SLANE_DAISHA_PROGRESSIVE ' ||wk_where||' AND ACT_PICK_DT IS NOT NULL AND ACT_PICK_TM IS NOT NULL AND SLANE_IN_DT IS NULL AND SLANE_IN_TM IS NULL';
   
  		--*** Execute cursor
   			OPEN pCUERSOR FOR wk_select;
        
END P_STORE_IN;
 -----------------------------------------------------------------------------
PROCEDURE P_STORE_IN_INQ (              pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pCURSOR       OUT T_CURSOR) IS
                                        
         wk_select    VARCHAR2(4000); 
         wk_where     VARCHAR2(1000);
         vDATE        VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
         vTIME        VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
         --vTIME        VARCHAR2(8) := '00:32:00';

    BEGIN
    
        IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
          vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
          --vDATE := '20180709';
        ELSE
          vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
          -- vDATE := '20180713' ;
        END IF;
        
     	  IF pFACTORY_CD IS NOT NULL THEN
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    		IF pMODEL IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF vDATE IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND PLAN_DATE = '||''''||vDATE||'''';
   			End IF;
        /*IF pSHIFT IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND SHIFT = '||''''||pSHIFT||'''';
   			End IF;*/
    	--*** Add WHERE and substr AND
    		IF wk_where is not null then
    		  	wk_where := ' WHERE '||substr(wk_where,5); 
    		End IF; 
                
           /*wk_select := 'SELECT MODEL, LINE_CD, CELL_NAME, 
           CASE DAISHA_TYPE  WHEN '''||'MA'||''' THEN '''||'MAIN'||''' WHEN '''||'SU'||''' THEN '''||'SUB'||'''  WHEN '''||'MS'||''' THEN '''||'MAIN+SUB'||'''  WHEN '''||'KT'||''' THEN '''||'KITTING'||''' END AS DAISHA_TYPE, 
           CASE DAISHA_GROUP WHEN '''||'KR'||''' THEN '''||'KORAT'||''' WHEN '''||'O1'||''' THEN '''||'OTHER1'||''' WHEN '''||'O2'||''' THEN '''||'OTHER2'||''' END AS DAISHA_GROUP,
           DESTINATION, COLOR, COLOR_NAME, ROUND,LOCATION, PLAN_PICK_DT, PLAN_PICK_TM, SLANE_IN_DT, SLANE_IN_TM,
           ROUND((TO_DATE(TO_CHAR(TO_DATE(PLAN_PICK_TM,'||''''||'HH24:MI:SS'||''''||'),'||''''||'HH24:MI'||''''||'),'||''''||'HH24:MI'||''''||') - 
           TO_DATE(TO_CHAR(TO_DATE(SLANE_IN_TM,'||''''||'HH24:MI:SS'||''''||'),'||''''||'HH24:MI'||''''||'),'||''''||'HH24:MI'||''''||'))*24*60) AS DIFF
           FROM T_SLANE_DAISHA_PROGRESSIVE A LEFT JOIN COLOR_MASTER B ON A.COLOR = B.COLOR_CD 
           '||wk_where||' 
           ORDER BY ROUND, DAISHA_TYPE DESC';*/
           --AND (ROUND = '||vMAXROUND||' OR ROUND = '||vMAXROUND||'-1)
          /*wk_select := 'SELECT MODEL, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP, LOCATION, ROUND, PLAN_PICK_DT, PLAN_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, DESTINATION, COLOR, COLOR_NAME,
          ROUND((TO_DATE(TO_CHAR(TO_DATE(PLAN_PICK_TM,'||''''||'HH24:MI:SS'||''''||'),'||''''||'HH24:MI'||''''||'),'||''''||'HH24:MI'||''''||') - 
          TO_DATE(TO_CHAR(TO_DATE(SLANE_IN_TM,'||''''||'HH24:MI:SS'||''''||'),'||''''||'HH24:MI'||''''||'),'||''''||'HH24:MI'||''''||'))*24*60) AS DIFF FROM 
          (SELECT A.MODEL,A.LINE_CD,A.CELL_NAME,
          CASE A.DAISHA_TYPE  WHEN '''||'MA'||''' THEN '''||'MAIN'||''' WHEN '''||'SU'||''' THEN '''||'SUB'||'''  WHEN '''||'MS'||''' THEN '''||'MAIN+SUB'||'''  WHEN '''||'KT'||''' THEN '''||'KITTING'||''' END AS DAISHA_TYPE,       
          CASE A.DAISHA_GROUP WHEN '''||'KR'||''' THEN '''||'KORAT'||''' WHEN '''||'O1'||''' THEN '''||'OTHER1'||''' WHEN '''||'O2'||''' THEN '''||'OTHER2'||''' END AS DAISHA_GROUP,
          A.LOCATION, A.ROUND, A.PLAN_PICK_DT, A.PLAN_PICK_TM, A.SLANE_IN_DT, A.SLANE_IN_TM, A.DESTINATION, A.COLOR FROM (SELECT * FROM T_SLANE_DAISHA_PROGRESSIVE '||wk_where||' AND (LOCATION = '''||'PICKING'||'''
          OR LOCATION = '''||'S-LANE'||'''))A, (SELECT MODEL, LINE_CD, LOCATION, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP ,MAX (SEQ) AS SEQ ,ROUND FROM T_SLANE_DAISHA_PROGRESSIVE  
          '||wk_where||' AND LOCATION = '''||'PICKING'||''' GROUP BY MODEL, LINE_CD,LOCATION, CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,ROUND)B, (SELECT MODEL,LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP, LOCATION, MAX(SEQ) AS SEQ
          FROM T_SLANE_DAISHA_PROGRESSIVE '||wk_where||' AND SLANE_IN_DT IS NOT NULL OR SLANE_IN_DT IS NULL GROUP by MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION)C,
          (SELECT MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION, MAX(SEQ)-1 AS SEQ FROM T_SLANE_DAISHA_PROGRESSIVE '||wk_where||' AND SLANE_IN_DT IS NOT NULL OR SLANE_IN_DT IS NULL
          GROUP by MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION)D WHERE A.MODEL = B.MODEL(+) AND A.LINE_CD = B.LINE_CD(+) AND A.CELL_NAME = B.CELL_NAME(+) AND A.DAISHA_TYPE = B.DAISHA_TYPE(+)
          AND A.DAISHA_GROUP = B.DAISHA_GROUP(+) AND A.MODEL = C.MODEL (+) AND A.LINE_CD = C.LINE_CD(+) AND A.CELL_NAME = C.CELL_NAME(+) AND A.DAISHA_TYPE = C.DAISHA_TYPE(+)
          AND A.DAISHA_GROUP = C.DAISHA_GROUP(+) AND A.MODEL = D.MODEL (+) AND A.LINE_CD = D.LINE_CD(+) AND A.CELL_NAME = D.CELL_NAME(+) AND A.DAISHA_TYPE = D.DAISHA_TYPE(+)
          AND A.DAISHA_GROUP = D.DAISHA_GROUP(+) AND (A.ROUND = B.ROUND OR A.SEQ = C.SEQ OR A.SEQ = D.SEQ)
          GROUP BY A.MODEL, A.LINE_CD, A.CELL_NAME, A.DAISHA_TYPE, A.DAISHA_GROUP, A.LOCATION, A.ROUND, A.PLAN_PICK_DT, A.PLAN_PICK_TM, A.SLANE_IN_DT, A.SLANE_IN_TM, A.DESTINATION, A.COLOR 
          ORDER BY A.ROUND DESC)A LEFT JOIN COLOR_MASTER B ON A.COLOR = B.COLOR_CD '; */
          
        --AND LOCATION = '''||'S-LANE'||'''
  		  --*** Execute cursor
        wk_select := ' SELECT MODEL, LINE_CD, CELL_NAME, F.DAISHA_TYPE_N, E.DAISHA_GROUP_N, LOCATION, ROUND, PLAN_PICK_DT, PLAN_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, DESTINATION, COLOR, COLOR_NAME,  
        ROUND((TO_DATE(TO_CHAR(TO_DATE(PLAN_PICK_DT,'||''''||'YYYYMMDD'||''''||'),'||''''||'YYYYMMDD'||''''||')||SUBSTR(PLAN_PICK_TM,0,5),'||''''||'YYYYMMDDHH24:MI'||''''||')
        - TO_DATE(TO_CHAR(TO_DATE(SLANE_IN_DT,'||''''||'YYYYMMDD'||''''||'),'||''''||'YYYYMMDD'||''''||')||SUBSTR(SLANE_IN_TM,0,5),'||''''||'YYYYMMDDHH24:MI'||''''||'))*1440) AS DIFF 
        FROM (SELECT A.MODEL,A.LINE_CD,A.CELL_NAME, A.DAISHA_TYPE, A.DAISHA_GROUP, A.LOCATION, A.ROUND, A.PLAN_PICK_DT, A.PLAN_PICK_TM, A.SLANE_IN_DT, A.SLANE_IN_TM, A.DESTINATION, A.COLOR 
        FROM (SELECT * FROM T_SLANE_DAISHA_PROGRESSIVE '||wk_where||' AND (LOCATION = '''||'PICKING'||''' OR LOCATION = '''||'S-LANE'||''')) A, 
        (SELECT MODEL, LINE_CD, LOCATION, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP ,MAX (SEQ) AS SEQ ,ROUND FROM T_SLANE_DAISHA_PROGRESSIVE         
        '||wk_where||' AND LOCATION = '''||'PICKING'||''' GROUP BY MODEL, LINE_CD, LOCATION, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,ROUND)B,
        (SELECT MODEL,LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP, LOCATION, MAX(SEQ) AS SEQ         
        FROM T_SLANE_DAISHA_PROGRESSIVE '||wk_where||' AND LINE_CD = '''||'CM'||''' AND LOCATION = '''||'S-LANE'||''' 
        GROUP BY MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION)C,          
        (SELECT MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION, MAX(SEQ)-1 AS SEQ FROM T_SLANE_DAISHA_PROGRESSIVE 
        '||wk_where||' AND LINE_CD = '''||'CM'||''' AND LOCATION = '''||'S-LANE'||'''           
        GROUP by MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION)D ,
        (SELECT MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION, MAX(SEQ) AS SEQB FROM T_SLANE_DAISHA_PROGRESSIVE 
        '||wk_where||' AND LINE_CD <> '''||'CM'||''' AND LOCATION = '''||'S-LANE'||'''           
        GROUP by MODEL,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,LOCATION)E 
        WHERE A.MODEL = B.MODEL(+) 
        AND A.LINE_CD = B.LINE_CD(+) 
        AND A.CELL_NAME = B.CELL_NAME(+) 
        AND A.DAISHA_TYPE = B.DAISHA_TYPE(+)         
        AND A.DAISHA_GROUP = B.DAISHA_GROUP(+) 
        AND A.MODEL = C.MODEL (+) 
        AND A.LINE_CD = C.LINE_CD(+) 
        AND A.CELL_NAME = C.CELL_NAME(+) 
        AND A.DAISHA_TYPE = C.DAISHA_TYPE(+)       
        AND A.DAISHA_GROUP = C.DAISHA_GROUP(+) 
        AND A.MODEL = D.MODEL (+) 
        AND A.LINE_CD = D.LINE_CD(+) 
        AND A.CELL_NAME = D.CELL_NAME(+) 
        AND A.DAISHA_TYPE = D.DAISHA_TYPE(+)       
        AND A.DAISHA_GROUP = D.DAISHA_GROUP(+)
        AND A.MODEL = E.MODEL (+) 
        AND A.CELL_NAME = E.CELL_NAME(+) 
        AND A.DAISHA_TYPE = E.DAISHA_TYPE(+)       
        AND A.DAISHA_GROUP = E.DAISHA_GROUP(+) 
        AND (A.ROUND = B.ROUND OR A.SEQ = C.SEQ OR A.SEQ = D.SEQ OR A.SEQ = E.SEQB)     
        GROUP BY A.MODEL, A.LINE_CD, A.CELL_NAME, A.DAISHA_TYPE, A.DAISHA_GROUP, A.LOCATION, A.ROUND, A.PLAN_PICK_DT, A.PLAN_PICK_TM, A.SLANE_IN_DT, A.SLANE_IN_TM, A.DESTINATION, A.COLOR)A 
        LEFT JOIN COLOR_MASTER B ON A.COLOR = B.COLOR_CD 
        LEFT JOIN T_SLANE_DAISHA_GROUP E ON A.DAISHA_GROUP = E.DAISHA_GROUP    
        LEFT JOIN T_SLANE_DAISHA_TYPE F ON A.DAISHA_TYPE = F.DAISHA_TYPE
        ORDER BY A.SLANE_IN_TM asc nulls first,A.LINE_CD, A.ROUND';
        
        /*SLANE_IN_DT IS NULL OR SLANE_IN_DT IS NOT NULL*/ 
   			OPEN pCURSOR FOR wk_select;
        
END P_STORE_IN_INQ;
--------------------------------------------------------------------------------
PROCEDURE P_STORE_IN_UPD (              pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        --pPLAN_DATE    VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pDAISHA_TYPE  VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER) AS 
       
         vSEQ       T_SLANE_DAISHA_PROGRESSIVE.SEQ%TYPE;
         vDATE      VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
         vTIME      VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
         --vTIME      VARCHAR2(8) := '21:30:00';
         vSHIFT     T_SLANE_DAISHA_PROGRESSIVE.SHIFT%TYPE;
         vCOUNT     NUMBER;   
         vMINROUND  NUMBER;
         vCHK_DUP   NUMBER;
         
    BEGIN
    
      IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
         vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
         --vDATE := '20180709';
      ELSE
         vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
         --vDATE := '20180801' ;
      END IF;
        
      IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
        vSHIFT := 'D';
      ELSE
        vSHIFT := 'N';
      END IF;
      
      -- GET MIN SEQ
      SELECT MIN(SEQ) INTO vSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      --AND SHIFT = vSHIFT 
      AND LINE_CD = pLINE_CD 
      AND DAISHA_TYPE = pDAISHA_TYPE 
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND ACT_PICK_DT IS NOT NULL
      AND ACT_PICK_TM IS NOT NULL
      AND SLANE_IN_DT IS NULL
      AND SLANE_IN_TM IS NULL;
               
      -- GET MIN ROUND
      SELECT MIN(ROUND) INTO vMINROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE 
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND ACT_PICK_DT IS NOT NULL
      AND ACT_PICK_TM IS NOT NULL
      AND SLANE_IN_DT IS NULL
      AND SLANE_IN_TM IS NULL
      AND SEQ = vSEQ;
      
      --CHECK DUPLICATE
      /*SELECT ROUND INTO vCHK_DUP
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      --AND SHIFT = vSHIFT 
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE 
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND ROUND = pROUND
      AND SEQ = vSEQ
      AND ACT_PICK_DT IS NOT NULL
      AND ACT_PICK_TM IS NOT NULL
      AND SLANE_IN_DT IS NULL
      AND SLANE_IN_TM IS NULL;*/
         
     IF vMINROUND = pROUND THEN  
      
      UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'S-LANE',
          SHIFT = vSHIFT,
          SLANE_IN_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),
          SLANE_IN_TM = vTIME
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE 
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND SEQ = vSEQ 
      AND ROUND = pROUND
      AND PLAN_PICK_DT IS NOT NULL
      AND PLAN_PICK_TM IS NOT NULL
      AND SLANE_IN_DT IS  NULL
      AND SLANE_IN_TM IS  NULL;
      COMMIT;
        pSLANE := 0; 
      ELSIF vMINROUND IS NULL AND vSEQ IS NULL THEN
        pSLANE := 999;
      ELSE 
        pSLANE := vMINROUND; 
            
      END IF;
      
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        pSLANE := 999;
      WHEN OTHERS THEN
        pSLANE := 999;
 END P_STORE_IN_UPD;
 -----------------------------------------------------------------------------
 PROCEDURE P_SIGNAL_IN_KT (             pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER) AS  
                                        
    vDATE    VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME    VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    vSHIFT   VARCHAR2(1);
    vCOUNT   NUMBER; 
    
 BEGIN
 
    IF vTIME > '07:59:59' AND vTIME < '19:59:59' THEN
        vSHIFT := 'D';
    ELSE
        vSHIFT := 'N';
    END IF;
      
   SELECT COUNT(*) INTO vCOUNT 
   FROM T_SLANE_DAISHA_PROGRESSIVE 
   WHERE FACTORY_CD = pFACTORY_CD
   AND PLAN_DATE = vDATE
   AND MODEL = pMODEL
   AND LINE_CD = pLINE_CD
   AND DAISHA_TYPE = pTYPE
   AND DAISHA_GROUP = pGROUP
   AND ACT_OUT_SLANE_DT IS NOT NULL
   AND ACT_OUT_SLANE_TM IS NOT NULL
   AND BLANE_IN_DT IS NULL
   AND BLANE_IN_TM IS NULL
   --AND LOCATION = 'S-LANE'
   --AND SEQ = vMINSEQ
   AND ROUND = pROUND;
 
    IF vCOUNT = 1 THEN
    UPDATE T_SLANE_DAISHA_PROGRESSIVE
    SET LOCATION = 'IN KITTING',
        BLANE_IN_DT = vDATE,
        BLANE_IN_TM = vTIME
    WHERE MODEL = pMODEL
    AND SHIFT = vSHIFT
    AND PLAN_DATE = vDATE
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND ROUND = pROUND;
    COMMIT;
      pSLANE := 1;                          
    ELSE                                     
      pSLANE := 0; 
    END IF;
    
 END P_SIGNAL_IN_KT;
 ------------------------------------------------------------------------------
 PROCEDURE P_SIGNAL_MIN_KT (            pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pCOLOR        VARCHAR2,
                                        pSLANE        OUT NUMBER) AS  
                                        
    vDATE       VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME       VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    vSHIFT      VARCHAR2(1);
    vMINSEQ     NUMBER;
    vCOUNT      NUMBER;
    vCOUNT2     NUMBER;
    vCNT_ORDER  NUMBER;
    vORDER      NUMBER;
    vCYCLE      T_SLANE_DELIVERY_CYCLE_MASTER.CYCLE_TIME%TYPE;
    CUR1        T_SLANE_DAISHA_PROGRESSIVE%ROWTYPE;
     
 BEGIN
 
    IF vTIME > '07:59:59' AND vTIME < '19:59:59' THEN
        vSHIFT := 'D';
    ELSE
        vSHIFT := 'N';
    END IF;
    
    --GET MIN SEQ  
      SELECT MIN(SEQ) INTO vMINSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      --AND ROUND = pROUND 
      AND ACT_OUT_SLANE_DT IS NULL
      AND ACT_OUT_SLANE_TM IS NULL
      AND BLANE_SIGNAL_DT IS NULL
      AND BLANE_SIGNAL_TM IS NULL
      AND LOCATION = 'S-LANE';
 
    -- GET Cycle Time --> OUT KITTING
      SELECT CYCLE_TIME INTO vCYCLE
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'KITTING'
      AND ZONE = 'S';
      
   SELECT COUNT(*) INTO vCOUNT 
   FROM T_SLANE_DAISHA_PROGRESSIVE 
   WHERE FACTORY_CD = pFACTORY_CD
   AND PLAN_DATE = vDATE
   AND MODEL = pMODEL
   AND LINE_CD = pLINE_CD
   AND DAISHA_TYPE = pTYPE
   AND DAISHA_GROUP = pGROUP
   AND ACT_OUT_SLANE_DT IS NULL
   AND ACT_OUT_SLANE_TM IS NULL
   AND BLANE_IN_DT IS NULL
   AND BLANE_IN_TM IS NULL
   AND LOCATION = 'S-LANE'
   AND SEQ = vMINSEQ;
   --AND ROUND = pROUND;
 
    --GET MAX ORDER NO
    SELECT MAX(ORDER_NO) INTO vORDER
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE FACTORY_CD = pFACTORY_CD
    AND LINE_CD = pLINE_CD 
    AND MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND SHIFT = vSHIFT
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP;
    
    IF vORDER IS NULL THEN
      vORDER := 1;
    --ELSE IF vORDER > 20 THEN
    --  vORDER := 1;
    END IF;
    
    SELECT COUNT(*) INTO vCNT_ORDER
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE FACTORY_CD = pFACTORY_CD
    AND LINE_CD = pLINE_CD 
    AND MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND SHIFT = vSHIFT
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND ORDER_NO = vORDER;
    
    IF vCNT_ORDER = 2 THEN
      vORDER := vORDER + 1;
    END IF;
 
   IF vCOUNT = 1 THEN  --UPDATE ?????????
      UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'ASSY',
      BLANE_OUT_DT = vDATE,
      BLANE_OUT_TM = vTIME
      WHERE MODEL = pMODEL
      AND SHIFT = vSHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND;
      COMMIT;
      pSLANE := 1; 
      
      SELECT COUNT(*) INTO vCOUNT2
      FROM T_SLANE_PROGRESS_ORDER_DAISHA
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = vORDER ;
      
      IF vCOUNT2 != 0 THEN
        UPDATE T_SLANE_PROGRESS_ORDER_DAISHA
        SET MIN_BLANE = vTIME
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND SHIFT = vSHIFT
        AND DAISHA_GROUP = pGROUP
        AND ORDER_NO = pROUND ;
        COMMIT;
          pSLANE := 2;
      END IF;

      UPDATE T_SLANE_DAISHA_PROGRESSIVE -- UPDATE ???????????? + 1
      SET COLOR = pCOLOR,
          BLANE_SIGNAL_DT = vDATE,
          BLANE_SIGNAL_TM = vTIME,
          PLAN_OUT_SLANE_DT = vDATE,
          PLAN_OUT_SLANE_TM = to_char(sysdate + (.000694 * vCYCLE), 'HH24:MI:SS'),
          ORDER_NO = vORDER
      WHERE MODEL = pMODEL
      AND SHIFT = vSHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND SEQ = vMINSEQ;
      COMMIT;
        pSLANE := 3;
      
        --GET DATA TO INSERT T_SLANE_PROGRESS_ORDER_DAISHA
      SELECT * INTO CUR1
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND SEQ = vMINSEQ;        
    
      INSERT INTO T_SLANE_PROGRESS_ORDER_DAISHA   (   FACTORY_CD,
                                                      PLAN_DATE,
                                                      MODEL,
                                                      SHIFT,
                                                      LINE_CD,
                                                      DAISHA_TYPE,
                                                      DAISHA_GROUP,
                                                      ROUND,
                                                      ORDER_NO,
                                                      PLAN_TIME,
                                                      ACTUAL_TIME,
                                                      DIFF,
                                                      MIN_BLANE)
                                            VALUES   (CUR1.FACTORY_CD,
                                                      CUR1.PLAN_DATE,
                                                      CUR1.MODEL,
                                                      CUR1.SHIFT,
                                                      CUR1.LINE_CD,
                                                      CUR1.DAISHA_TYPE,
                                                      CUR1.DAISHA_GROUP,
                                                      vORDER ,
                                                      CUR1.ROUND ,
                                                      to_char(sysdate + (.000694 * vCYCLE), 'HH24:MI:SS'),
                                                      NULL,
                                                      NULL,
                                                      NULL);                                 
     
          COMMIT;
            pSLANE := 4; 
    ELSE                                     
      pSLANE := 0; 
    END IF;
    
 END P_SIGNAL_MIN_KT;       
 ------------------------------------------------------------------------------ 
 PROCEDURE P_SIGNAL_IN_BLANE  (         pFACTORY_CD VARCHAR2,
                                        pMODEL      VARCHAR2,
                                        pLINE_CD    VARCHAR2,
                                        pTYPE       VARCHAR2,
                                        pGROUP      VARCHAR2,
                                        pROUND      NUMBER,
                                        pSLANE      OUT NUMBER) AS 
                                        
    vDATE    VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME    VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    vSHIFT   VARCHAR2(1);
    vCOUNT   NUMBER; 
    
 BEGIN
 
   IF vTIME > '07:59:59' AND vTIME < '19:59:59' THEN
       vSHIFT := 'D';
   ELSE
       vSHIFT := 'N';
   END IF;
    
   SELECT COUNT(*) INTO vCOUNT 
   FROM T_SLANE_DAISHA_PROGRESSIVE 
   WHERE FACTORY_CD = pFACTORY_CD
   AND PLAN_DATE = vDATE
   AND MODEL = pMODEL
   AND LINE_CD = pLINE_CD
   AND DAISHA_TYPE = pTYPE
   AND DAISHA_GROUP = pGROUP
   AND ROUND = pROUND
   AND ACT_OUT_SLANE_DT IS NOT NULL
   AND ACT_OUT_SLANE_TM IS NOT NULL
   AND BLANE_IN_DT IS NULL
   AND BLANE_IN_TM IS NULL;
  
   IF vCOUNT = 1 THEN
    UPDATE T_SLANE_DAISHA_PROGRESSIVE
    SET LOCATION = 'IN B-LANE',
        BLANE_IN_DT = vDATE,
        BLANE_IN_TM = vTIME
    WHERE MODEL = pMODEL
    AND SHIFT = vSHIFT
    AND PLAN_DATE = vDATE
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND ROUND = pROUND;
    COMMIT;
      pSLANE := 1;                          
    ELSE                                     
      pSLANE := 0; 
    END IF;
    
 END P_SIGNAL_IN_BLANE;
 ------------------------------------------------------------------------------
 PROCEDURE P_SIGNAL_OUT_BLANE (         pFACTORY_CD VARCHAR2,
                                        pMODEL      VARCHAR2,
                                        pLINE_CD    VARCHAR2,
                                        pTYPE       VARCHAR2,
                                        pGROUP      VARCHAR2,
                                        pROUND      NUMBER,
                                        pSLANE      OUT NUMBER) AS 
                                        
    vDATE       VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME       VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    vSHIFT      VARCHAR2(1);
    vMINSEQ     NUMBER;
    vCOUNT      NUMBER; 
    vCYCLE      T_SLANE_DELIVERY_CYCLE_MASTER.CYCLE_TIME%TYPE;
    vCNT_ORDER  NUMBER;
    vORDER      NUMBER;
    vROUND      NUMBER;
    
 BEGIN
 
    IF vTIME > '07:59:59' AND vTIME < '19:59:59' THEN
        vSHIFT := 'D';
    ELSE
        vSHIFT := 'N';
    END IF;
    
    --GET MIN SEQ  
      SELECT MIN(SEQ) INTO vMINSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      --AND ROUND = pROUND 
      AND ACT_OUT_SLANE_DT IS NULL
      AND ACT_OUT_SLANE_TM IS NULL
      AND BLANE_SIGNAL_DT IS NULL
      AND BLANE_SIGNAL_TM IS NULL
      AND LOCATION = 'S-LANE';
 
    -- GET Cycle Time OUT KITTING
      SELECT CYCLE_TIME INTO vCYCLE
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'KITTING'
      AND ZONE = 'S';
      
   SELECT COUNT(*) INTO vCOUNT 
   FROM T_SLANE_DAISHA_PROGRESSIVE 
   WHERE FACTORY_CD = pFACTORY_CD
   AND PLAN_DATE = vDATE
   AND MODEL = pMODEL
   AND LINE_CD = pLINE_CD
   AND DAISHA_TYPE = pTYPE
   AND DAISHA_GROUP = pGROUP
   AND ACT_OUT_SLANE_DT IS NULL
   AND ACT_OUT_SLANE_TM IS NULL
   AND BLANE_IN_DT IS NULL
   AND BLANE_IN_TM IS NULL
   AND LOCATION = 'S-LANE'
   AND SEQ = vMINSEQ;
   --AND ROUND = pROUND;
 
   SELECT COUNT(*) INTO vCNT_ORDER
      FROM T_SLANE_PROGRESS_ORDER_DAISHA
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND SHIFT = vSHIFT
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND ;  -- ORDER_NO = 1-20
      
   --GET MAX ROUND FOR INSERT NEXT ROUND
      SELECT MAX(ORDER_NO) INTO vORDER
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND SHIFT = vSHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
       ;
          
      IF vORDER IS NULL THEN
        vORDER := 1;
      ELSE 
        vORDER := vORDER + 1;
      END IF;   
            --??????????? else if ????? ????????error ???????????????????
   IF vCOUNT = 1 AND vCNT_ORDER != 0 THEN
      UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'ASSY',
      BLANE_OUT_DT = vDATE,
      BLANE_OUT_TM = vTIME
      WHERE MODEL = pMODEL
      AND SHIFT = vSHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND;
    COMMIT;
      pSLANE := 1; 
      
        UPDATE T_SLANE_PROGRESS_ORDER_DAISHA  --UPDATE ?????????
        SET MIN_BLANE = vTIME
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND SHIFT = vSHIFT
        AND DAISHA_GROUP = pGROUP
        AND ORDER_NO = pROUND ;
        COMMIT;
          pSLANE := 2; 
            
        UPDATE T_SLANE_DAISHA_PROGRESSIVE
        SET BLANE_SIGNAL_DT = vDATE,
            BLANE_SIGNAL_TM = vTIME,
            PLAN_OUT_SLANE_DT = vDATE,
            PLAN_OUT_SLANE_TM = to_char(sysdate + (.000694 * vCYCLE), 'HH24:MI:SS'),
            ORDER_NO = vORDER
        WHERE MODEL = pMODEL
        AND SHIFT = vSHIFT
        AND PLAN_DATE = vDATE
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND SEQ = vMINSEQ;
        COMMIT;
          pSLANE := 3; 
                       
            SELECT ROUND INTO vROUND
            FROM T_SLANE_DAISHA_PROGRESSIVE
            WHERE MODEL = pMODEL
            AND SHIFT = vSHIFT
            AND PLAN_DATE = vDATE
            AND LINE_CD = pLINE_CD
            AND DAISHA_TYPE = pTYPE
            AND DAISHA_GROUP = pGROUP
            AND SEQ = vMINSEQ;
      
          INSERT INTO T_SLANE_PROGRESS_ORDER_DAISHA  (FACTORY_CD,
                                                      PLAN_DATE,
                                                      MODEL,
                                                      SHIFT,
                                                      LINE_CD,
                                                      DAISHA_TYPE,
                                                      DAISHA_GROUP,
                                                      ROUND,
                                                      ORDER_NO,
                                                      PLAN_TIME,
                                                      ACTUAL_TIME,
                                                      DIFF,
                                                      MIN_BLANE)
                                            VALUES   (pFACTORY_CD,
                                                      vDATE,
                                                      pMODEL,
                                                      vSHIFT,
                                                      pLINE_CD,
                                                      pTYPE,
                                                      pGROUP,
                                                      vORDER,
                                                      vROUND,
                                                      to_char(sysdate + (.000694 * vCYCLE), 'HH24:MI:SS'),
                                                      NULL,
                                                      NULL,
                                                      NULL);                                 
         
          COMMIT;
            pSLANE := 4; 
        
    ELSE                                     
      pSLANE := 0; 
    END IF;
    
 END P_SIGNAL_OUT_BLANE;          
 ------------------------------------------------------------------------------
END PG_SLANE_DAISHA_PROGRESSIVE;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_DNM_RLTMPLANBYSHF_W
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_DNM_RLTMPLANBYSHF_W" AS

  PROCEDURE MAIN as
    BEGIN
      P_SLANE_DNM_RLTMPLANBYSHF_W;
      P_CALCULATE_ACTUAL;
  END MAIN;
  
  PROCEDURE P_SLANE_DNM_RLTMPLANBYSHF_W AS
    vDATE VARCHAR2(8) ;
    vTIME     VARCHAR2(10) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    --vTIME     VARCHAR2(10) := '00:00:00';
    vSHIFT    VARCHAR2(1) ;
    --vCALDATE  VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vCOUNT   NUMBER(3,0);
    --vTIMEEND VARCHAR2(1) :=TO_CHAR(SYSDATE+1,'HH24:MI:SS');
    vSEQ     NUMBER(7,0);
    
    CURSOR C1 IS SELECT * FROM  T_PRD_PLAN_A3_RLTMPLANBYSHF_W@FROM_EUC_NPIS
                 WHERE CAL_DATE = vDATE
                 AND   SHIFT = vSHIFT
                 AND   SEQ   = vSEQ;
                 --AND   LINE_CD = 'TN'; -- FOR TEST
                 --ORDER BY LINE_CD;
    
    REC1     C1%ROWTYPE;
  
  BEGIN
  
  --vDATE
    IF   vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
    ELSE
       vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
    END IF;
    
    --vSHIFT
    IF   vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
    ELSE
      vSHIFT := 'N';
    END IF;
    --vSEQ
    SELECT MAX(SEQ) INTO vSEQ 
    FROM T_PRD_PLAN_A3_RLTMPLANBYSHF_W@FROM_EUC_NPIS
    WHERE CAL_DATE = vDATE;
    
   -- DELETE T_SLANE_DNM_RLTMPLANBYSHF_W
    --COMMIT;
      
    FOR REC1 IN C1 LOOP
     
     SELECT COUNT(*) INTO vCOUNT 
     FROM T_SLANE_DNM_RLTMPLANBYSHF_W
     WHERE CAL_DATE = vDATE
     AND SHIFT = vSHIFT
     AND LINE_CD = REC1.LINE_CD;
     
      IF vCOUNT = 0 THEN
      INSERT INTO T_SLANE_DNM_RLTMPLANBYSHF_W(SEQ,
                                              FACTORY_CD,
                                              CAL_DATE,
                                              CAL_TIME,
                                              SHIFT,
                                              LINE_CD,
                                              CELL_NAME,
                                              PLAN_QTY_BY_SHIFT,
                                              REALTIME_PLAN_QTY,
                                              ACTUAL_QTY,
                                              DIFF_QTY,
                                              CAP_QTY,
                                              CYCLE_TIME,
                                              CREATE_DATE,
                                              CREATE_BY,
                                              UPDATE_DATE,
                                              UPDATE_BY,
                                              HISTORY_ENTRY_DATE)
                                      VALUES (REC1.SEQ,
                                              REC1.FACTORY_CD,
                                              REC1.CAL_DATE,
                                              REC1.CAL_TIME,
                                              REC1.SHIFT,
                                              REC1.LINE_CD,
                                              REC1.CELL_NAME,
                                              REC1.PLAN_QTY_BY_SHIFT,
                                              REC1.REALTIME_PLAN_QTY,
                                              REC1.ACTUAL_QTY,
                                              REC1.DIFF_QTY,
                                              REC1.CAP_QTY,
                                              REC1.CYCLE_TIME,
                                              REC1.CREATE_DATE,
                                              REC1.CREATE_BY,
                                              REC1.UPDATE_DATE,
                                              REC1.UPDATE_BY,
                                              REC1.HISTORY_ENTRY_DATE);
                                              
     ELSE 
           UPDATE T_SLANE_DNM_RLTMPLANBYSHF_W
                    SET   SEQ = REC1.SEQ,
                    FACTORY_CD = REC1.FACTORY_CD,
                    CAL_TIME   =  REC1.CAL_TIME,
                    CELL_NAME  = REC1.CELL_NAME,
                    PLAN_QTY_BY_SHIFT =   REC1.PLAN_QTY_BY_SHIFT,
                    REALTIME_PLAN_QTY =  REC1.REALTIME_PLAN_QTY,
                    ACTUAL_QTY  = REC1.ACTUAL_QTY,
                    DIFF_QTY =  REC1.DIFF_QTY,
                    CAP_QTY  =  REC1.CAP_QTY,
                    CYCLE_TIME = REC1.CYCLE_TIME,
                    CREATE_DATE  = REC1.CREATE_DATE,
                    CREATE_BY =  REC1.CREATE_BY,
                    UPDATE_DATE =  REC1.UPDATE_DATE,
                    UPDATE_BY  =   REC1.UPDATE_BY,
                   HISTORY_ENTRY_DATE  =   REC1.HISTORY_ENTRY_DATE
           WHERE  CAL_DATE = vDATE
           AND    FACTORY_CD = REC1.FACTORY_CD
           AND   SHIFT   = vSHIFT
           AND   LINE_CD = REC1.LINE_CD;
          COMMIT;
       null;
      END IF;
      
    END LOOP;
  
    EXCEPTION 
    WHEN  OTHERS THEN
    NULL;
   --END;
      
  END P_SLANE_DNM_RLTMPLANBYSHF_W;
  
    PROCEDURE P_CALCULATE_ACTUAL 
  AS
    --vTIME     VARCHAR2(10) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    vTIME     VARCHAR2(10) := '22:50:00';
    vSHIFT    VARCHAR2(1) ;
    vCALDATE  VARCHAR2(8) ;
    vCALDATE2  VARCHAR2(8) ;
    vCOUNT    NUMBER(3,0);
    vCOUNTREC2 NUMBER(3,0);
    CURSOR C1 IS 
    SELECT * FROM T_SLANE_DNM_RLTMPLANBYSHF_W
                 WHERE CAL_DATE = vCALDATE
                 AND   SHIFT = vSHIFT ;
                 --AND   LINE_CD = 'TN'; -- FOR TEST
                 --ORDER BY LINE_CD;
    
    REC1     C1%ROWTYPE;
    REC2     V_SLANE_WORKING_TIME%ROWTYPE;
    vQ1     T_SLANE_CALCULATE_ACTUAL.ACTUAL_Q1%TYPE;
    vQ2     T_SLANE_CALCULATE_ACTUAL.ACTUAL_Q2%TYPE;
    vQ3     T_SLANE_CALCULATE_ACTUAL.ACTUAL_Q3%TYPE;
    vQ4     T_SLANE_CALCULATE_ACTUAL.ACTUAL_Q4%TYPE;
  
    BEGIN
        --vDATE
    IF   vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vCALDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
    ELSE
      vCALDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
    END IF;
    
    --vSHIFT
    IF   vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
    ELSE
      vSHIFT := 'N';
    END IF;
        
        
        FOR REC1 IN C1 LOOP
         SELECT COUNT(*) INTO vCOUNTREC2
          FROM V_SLANE_WORKING_TIME
          WHERE PLAN_DATE = vCALDATE
          AND   SHIFT   = vSHIFT
          AND   SUBSTR(LINE_CD,1,2) = REC1.LINE_CD;
          
           IF vCOUNTREC2 > 0 THEN
              SELECT * INTO REC2
              FROM V_SLANE_WORKING_TIME
              WHERE PLAN_DATE = vCALDATE
              AND   SHIFT   = vSHIFT
              AND   SUBSTR(LINE_CD,1,2) = REC1.LINE_CD;
              
              SELECT COUNT(*) INTO vCOUNT
              FROM T_SLANE_CALCULATE_ACTUAL
              WHERE PLAN_DATE = vCALDATE
              AND   SHIFT   = vSHIFT
              AND   LINE_CD = REC2.LINE_CD;
           
           IF vCOUNT = 0 THEN
             INSERT INTO T_SLANE_CALCULATE_ACTUAL(FACTORY_CD, 
                                                  MODEL,
                                                  PLAN_DATE,
                                                  LINE_CD,
                                                  SHIFT,
                                                  ACTUAL_Q1,
                                                  ACTUAL_Q2,
                                                  ACTUAL_Q3,
                                                  ACTUAL_Q4,
                                                  ACTUAL_Q5,
                                                  CREATE_DATE,
                                                  CREATE_BY,
                                                  UPDATE_DATE,
                                                  UPDATE_BY)
                                           VALUES(REC1.FACTORY_CD,
                                                  REC2.MODEL,
                                                  REC2.PLAN_DATE,
                                                  REC2.LINE_CD,
                                                  REC2.SHIFT,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  SYSDATE,
                                                  'SYSTEM',
                                                  SYSDATE,
                                                  'SYSTEM');
                           COMMIT;
           ELSE
                SELECT nvl(ACTUAL_Q1,0),nvl(ACTUAL_Q2,0), nvl(ACTUAL_Q3,0),nvl(ACTUAL_Q4,0) 
                INTO vQ1,vQ2,vQ3,vQ4
                FROM T_SLANE_CALCULATE_ACTUAL
                WHERE PLAN_DATE = vCALDATE
                AND   SHIFT   = vSHIFT
                AND   LINE_CD = REC2.LINE_CD;
                IF vSHIFT = 'D' THEN
                    IF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.WORK1_BEGIN AND REC2.WORK1_END THEN
                      UPDATE T_SLANE_CALCULATE_ACTUAL
                      SET   ACTUAL_Q1 = REC1.ACTUAL_QTY
                      WHERE PLAN_DATE = vCALDATE
                      AND   SHIFT   = vSHIFT
                      AND   LINE_CD = REC2.LINE_CD;
                    
                    ELSIF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.WORK2_BEGIN AND REC2.WORK2_END THEN
                     -- Result = ACTUAL_Q1 + REC1.ACTUAL_QTY
                      UPDATE T_SLANE_CALCULATE_ACTUAL
                      SET   ACTUAL_Q2 =  REC1.ACTUAL_QTY - vQ1
                      WHERE PLAN_DATE = vCALDATE
                      AND   SHIFT   = vSHIFT
                      AND   LINE_CD = REC2.LINE_CD;
                      
                    ELSIF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.WORK3_BEGIN AND REC2.WORK3_END THEN
                      UPDATE T_SLANE_CALCULATE_ACTUAL
                      SET   ACTUAL_Q3 = REC1.ACTUAL_QTY - (vQ2 + vQ1)
                      WHERE PLAN_DATE = vCALDATE
                      AND   SHIFT   = vSHIFT
                      AND   LINE_CD = REC2.LINE_CD;
                    
                    ELSIF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.WORK4_BEGIN AND REC2.WORK4_END THEN
                      UPDATE T_SLANE_CALCULATE_ACTUAL
                      SET   ACTUAL_Q4 = REC1.ACTUAL_QTY -(vQ3 + vQ2 + vQ1)
                      WHERE PLAN_DATE = vCALDATE
                      AND   SHIFT   = vSHIFT
                      AND   LINE_CD = REC2.LINE_CD;
                    
                     ELSIF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.OVERTIME_BEGIN AND REC2.OVERTIME_END THEN 
                      UPDATE T_SLANE_CALCULATE_ACTUAL
                      SET   ACTUAL_Q5 = REC1.ACTUAL_QTY -(vQ4 + vQ3 + vQ2 + vQ1)
                      WHERE PLAN_DATE = vCALDATE
                      AND   SHIFT   = vSHIFT
                      AND   LINE_CD = REC2.LINE_CD;
                ELSE
                        /* IF SUBSTR(REC2.WORK2_END,0,2) = '00' THEN
                           vCALDATE2 := SUBSTR(REC2.WORK2_END,0,2)+24||SUBSTR(REC2.WORK2_END,3,3);
                         ELSE
                          vCALDATE2 := SUBSTR(REC2.WORK2_END,0,2)||SUBSTR(REC2.WORK2_END,3,3);
                         END IF;
                         
                        
                         IF SUBSTR(REC2.WORK2_END,0,2) = '00' THEN
                         vCALDATE2 := TO_CHAR(SYSDATE+1,'YYYYMMDD');
                         ELSE
                         vCALDATE2 := TO_CHAR(SYSDATE,'YYYYMMDD');
                         END IF;
                         IF SUBSTR(REC2.WORK2_END,0,2) = '00' THEN
                            vCALDATE2 := SUBSTR(REC2.WORK2_END,0,2)+24||SUBSTR(REC2.WORK2_END,3,3);
                           ELSE 
                           REC2.WORK2_END 
                           END IF
                */
                        IF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.WORK1_BEGIN AND REC2.WORK1_END THEN
                          UPDATE T_SLANE_CALCULATE_ACTUAL
                          SET   ACTUAL_Q1 = REC1.ACTUAL_QTY
                          WHERE PLAN_DATE = vCALDATE
                          AND   SHIFT   = vSHIFT
                          AND   LINE_CD = REC2.LINE_CD;
                        
                         --ELSIF TO_CHAR(TO_DATE(vCALDATE,'YYYYMMDD')||TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI')) BETWEEN TO_CHAR(TO_DATE(vCALDATE,'YYYYMMDD')||TO_CHAR(TO_DATE(REC2.WORK2_BEGIN,'HH24:MI'),'HH24:MI')) AND TO_CHAR(TO_DATE(vCALDATE2,'YYYYMMDD')||TO_CHAR(TO_DATE(REC2.WORK2_END,'HH24:MI'),'HH24:MI')) THEN
                          
                          ELSIF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.WORK2_BEGIN AND REC2.WORK2_END THEN
                         -- Result = ACTUAL_Q1 + REC1.ACTUAL_QTY
                          UPDATE T_SLANE_CALCULATE_ACTUAL
                          SET   ACTUAL_Q2 =  REC1.ACTUAL_QTY - vQ1
                          WHERE PLAN_DATE = vCALDATE
                          AND   SHIFT   = vSHIFT
                          AND   LINE_CD = REC2.LINE_CD;
                          
                        ELSIF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.WORK3_BEGIN AND REC2.WORK3_END THEN
                          UPDATE T_SLANE_CALCULATE_ACTUAL
                          SET   ACTUAL_Q3 = REC1.ACTUAL_QTY - (vQ2 + vQ1)
                          WHERE PLAN_DATE = vCALDATE
                          AND   SHIFT   = vSHIFT
                          AND   LINE_CD = REC2.LINE_CD;
                        
                        ELSIF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.WORK4_BEGIN AND REC2.WORK4_END THEN
                          UPDATE T_SLANE_CALCULATE_ACTUAL
                          SET   ACTUAL_Q4 = REC1.ACTUAL_QTY -(vQ3 + vQ2 + vQ1)
                          WHERE PLAN_DATE = vCALDATE
                          AND   SHIFT   = vSHIFT
                          AND   LINE_CD = REC2.LINE_CD;
                        
                         ELSIF TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI') BETWEEN REC2.OVERTIME_BEGIN AND REC2.OVERTIME_END THEN 
                          UPDATE T_SLANE_CALCULATE_ACTUAL
                          SET   ACTUAL_Q5 = REC1.ACTUAL_QTY -(vQ4 + vQ3 + vQ2 + vQ1)
                          WHERE PLAN_DATE = vCALDATE
                          AND   SHIFT   = vSHIFT
                          AND   LINE_CD = REC2.LINE_CD;
                          
                    END IF;
                   
                  END IF;
                 
                END IF;
                COMMIT;
               
              END IF;  
             END IF;  
        END LOOP;
     
    END P_CALCULATE_ACTUAL;
  PROCEDURE P_GETDATA_FROM_DNM AS 
    
    vTIME     VARCHAR2(10) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    vCALDATE  VARCHAR2(8) ;
    
      BEGIN
        
             --vDATE
        IF   vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
          vCALDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
        ELSE
          vCALDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
        END IF;
        
        DELETE FROM T_SLANE_DNM_WORKSHIFT_CD;
      
        INSERT INTO T_SLANE_DNM_WORKSHIFT_CD
        SELECT * FROM T_PRD_PLAN_A3_WORKSHIFT_CD@FROM_EUC_NPIS;
        COMMIT;
        
        DELETE T_SLANE_DNM_OVERTIME_CD;
        
        INSERT INTO T_SLANE_DNM_OVERTIME_CD
        SELECT * FROM T_PRD_PLAN_A3_OVERTIME_CD@FROM_EUC_NPIS;
        COMMIT;

        DELETE T_SLANE_DNM_WORKSHIFT_N_CAP
        WHERE PLAN_DATE = vCALDATE;
        
        INSERT INTO T_SLANE_DNM_WORKSHIFT_N_CAP
        SELECT * FROM T_PRD_PLAN_A3_WORKSHIFT_N_CAP@FROM_EUC_NPIS
        WHERE PLAN_DATE = vCALDATE;
        COMMIT;
        
        
        
    END P_GETDATA_FROM_DNM;
    
  
  
  
  
  
  END PG_SLANE_DNM_RLTMPLANBYSHF_W;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_INITIAL_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_INITIAL_MASTER" AS

  PROCEDURE P_INITIAL_DATA_INQ     (pFACTORY_CD     VARCHAR2,
                                    pMODEL          VARCHAR2,
                                    pSHIFT          VARCHAR2,
                                    pLINE_CD        VARCHAR2,
                                    pDAISHA_TYPE    VARCHAR2,
                                    pDAISHA_GROUP   VARCHAR2,
                                    pLOCATION       VARCHAR2,
                                    pROUND          VARCHAR2,
                                    pCURSOR         OUT T_CURSOR) IS
                                    
        wk_select   VARCHAR2(1000); 
        wk_where    VARCHAR2(1000);   
        
  BEGIN
        
        IF pFACTORY_CD IS NOT NULL THEN
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    		IF pMODEL IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF pSHIFT IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND SHIFT = '||''''||pSHIFT||''''; 
   			End IF;
        
        IF pLINE_CD IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
        IF pDAISHA_TYPE IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND DAISHA_TYPE = '||''''||pDAISHA_TYPE||'''';
   			End IF;
        IF pDAISHA_GROUP IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND DAISHA_GROUP = '||''''||pDAISHA_GROUP||'''';
   			End IF;
        IF pLOCATION IS NOT NULL THEN
    	 				wk_where :=  wk_where||' AND LOCATION = '||''''||pLOCATION||'''';
   			End IF;
        IF pROUND is not null then
    	 				wk_where := wk_where||' AND ROUND = '||''''||pROUND||'''';
   			End IF;
        
    	--*** Add WHERE and substr AND
    		IF wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		End IF;
    	
           wk_select := 'SELECT * FROM T_SLANE_DAISHA_PROGRESSIVE ' ||wk_where||' AND PLAN_DATE = TO_CHAR(SYSDATE,'||''''||'YYYYMMDD'||''''||') AND LOCATION <> '''||'EMPTY'||''' ORDER BY MODEL, LINE_CD, SEQ';
           
  		--*** Execute cursor
   			OPEN pCURSOR FOR wk_select;
    
  END P_INITIAL_DATA_INQ;
-------------------------------------------------------------------------------
  PROCEDURE P_INITIAL_DATA_KITTING   (pFACTORY_CD     VARCHAR2,
                                      pMODEL          VARCHAR2,
                                      pSHIFT          VARCHAR2,
                                      pLINE_CD        VARCHAR2,
                                      pCELL_NAME      VARCHAR2,
                                      pDAISHA_TYPE    VARCHAR2,
                                      pDAISHA_GROUP   VARCHAR2,
                                      pLOCATION       VARCHAR2,
                                      pROUND          VARCHAR2,
                                      pSLANE          OUT NUMBER) AS 
    
    vDATE      VARCHAR2(8):= TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME      VARCHAR2(8):= TO_CHAR(SYSDATE,'HH24:MI:SS');
    vMAXSEQ    NUMBER(9,0);
    vSEQ       NUMBER(9,0);
    vORDER     NUMBER(2,0);
    vNEWORDER  NUMBER(2,0);
    vCOUNT     NUMBER(9,0);
    vROUND     NUMBER(2,0);
    vDES       VARCHAR2(8);
    
    BEGIN
      
        SELECT NVL(SEQ,0) INTO vSEQ
        FROM T_SLANE_DAISHA_PROGRESSIVE
        WHERE FACTORY_CD = pFACTORY_CD
        AND MODEL = pMODEL
        AND SHIFT = pSHIFT
        AND PLAN_DATE = vDATE
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pDAISHA_TYPE
        AND DAISHA_GROUP = pDAISHA_GROUP
        --AND LOCATION = pLOCATION
        AND ROUND = pROUND;          
             
        DELETE T_SLANE_DAISHA_PROGRESSIVE
        WHERE FACTORY_CD = pFACTORY_CD
        AND   MODEL      = pMODEL
        AND   PLAN_DATE  = vDATE
        AND   SHIFT      = pSHIFT
        AND   LINE_CD    = pLINE_CD
        AND   DAISHA_TYPE = pDAISHA_TYPE
        AND   DAISHA_GROUP = pDAISHA_GROUP
       -- AND   ROUND >= pROUND;   
        AND   SEQ >= vSEQ;  --???????????????
        COMMIT;
        pSLANE := 1; 
        --END IF;
                
    -- EXCEPTION 
    -- WHEN NO_DATA_FOUND THEN    
     
      SELECT NVL(MAX(SEQ),0)+1 INTO vMAXSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE FACTORY_CD = pFACTORY_CD
      AND MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE
      AND DAISHA_GROUP = pDAISHA_GROUP;   
          
      SELECT NVL(MAX(ORDER_NO),1) INTO vNEWORDER
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE FACTORY_CD = pFACTORY_CD
      AND MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND SHIFT = pSHIFT
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE
      AND DAISHA_GROUP = pDAISHA_GROUP;          

      SELECT  NVL(COUNT(*),0) INTO vCOUNT
      FROM T_SLANE_DAISHA_PROGRESSIVE 
      WHERE FACTORY_CD = pFACTORY_CD
      AND MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND SHIFT = pSHIFT
      AND DAISHA_TYPE = pDAISHA_TYPE
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND ORDER_NO = vNEWORDER;          
          
      IF vCOUNT = 0 OR vCOUNT = 1 THEN
         vNEWORDER := vNEWORDER;
      ELSE
         vNEWORDER := vNEWORDER+1;
      END IF;    
     
      IF pDAISHA_TYPE = 'KT' THEN
        vDES := 'KITTING';
      ELSE
        vDES := 'COMMON';
      END IF;
      
          IF pLOCATION = 'ASSY' OR pLOCATION = 'KITTING' OR pLOCATION = 'IN KITTING' THEN
            
            SELECT NVL(ROUND,0) INTO vORDER
            FROM T_SLANE_PROGRESS_ORDER_DAISHA
            WHERE FACTORY_CD = pFACTORY_CD
            AND MODEL = pMODEL
            AND SHIFT = pSHIFT
            AND PLAN_DATE = vDATE
            AND LINE_CD = pLINE_CD
            AND DAISHA_TYPE = pDAISHA_TYPE
            AND DAISHA_GROUP = pDAISHA_GROUP
            AND ORDER_NO =  TO_NUMBER(pROUND);
          
         -- IF vORDER > 0 THEN
            DELETE T_SLANE_PROGRESS_ORDER_DAISHA
            WHERE FACTORY_CD = pFACTORY_CD
            AND   MODEL      = pMODEL
            AND   PLAN_DATE  = vDATE
            AND   SHIFT      = pSHIFT
            AND   LINE_CD    = pLINE_CD
            AND   DAISHA_TYPE = pDAISHA_TYPE
            AND   DAISHA_GROUP = pDAISHA_GROUP
            AND   ORDER_NO   >= TO_NUMBER(pROUND);
            COMMIT;
            pSLANE := 2; 
         -- END IF; 
          
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vMAXSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  pLOCATION,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  vNEWORDER);
            COMMIT;    
            pSLANE := 3; 
            vROUND := TO_NUMBER(pROUND);                              
            for i in 1 .. 2 loop
            INSERT INTO T_SLANE_PROGRESS_ORDER_DAISHA(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, DAISHA_TYPE, DAISHA_GROUP,
                                                      ROUND, ORDER_NO, PLAN_TIME, ACTUAL_TIME, DIFF, MIN_BLANE)
                                              VALUES (pFACTORY_CD,
                                                      pMODEL,
                                                      vDATE,
                                                      pSHIFT,
                                                      pLINE_CD,
                                                      pDAISHA_TYPE,
                                                      pDAISHA_GROUP,
                                                      vNEWORDER,
                                                      --vORDER
                                                      vROUND,
                                                      vTIME,
                                                      NULL,
                                                      NULL,
                                                      NULL);  
            vROUND := vROUND + 1 ;
            end loop; 
            pSLANE := 4; 
           /* INSERT INTO T_SLANE_PROGRESS_ORDER_DAISHA(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, DAISHA_TYPE, DAISHA_GROUP,
                                                      ROUND, ORDER_NO, PLAN_TIME, ACTUAL_TIME, DIFF, MIN_BLANE)
                                              VALUES (pFACTORY_CD,
                                                      pMODEL,
                                                      vDATE,
                                                      pSHIFT,
                                                      pLINE_CD,
                                                      pDAISHA_TYPE,
                                                      pDAISHA_GROUP,
                                                      vORDER,
                                                      pROUND+1,
                                                      vTIME,
                                                      NULL,
                                                      NULL,
                                                      NULL);*/
            
          /*ELSIF pLOCATION = 'KITTING' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  NULL,
                                                  pLOCATION,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
          ELSIF pLOCATION = 'IN KITTING' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  NULL,
                                                  pLOCATION,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);*/
          ELSIF pLOCATION = 'S-LANE' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  pLOCATION,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  --vORDER ????????????? NULL
                                                  NULL);
            pSLANE := 4;                                       
          ELSIF pLOCATION = 'PICKING' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  pLOCATION,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  --*/vORDER
                                                  NULL);
            pSLANE := 4;                                       
          ELSE 
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  vDATE,
                                                  vTIME,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL);
            pSLANE := 4; 
         END IF;
         -- pSLANE := 1; 
      
      
    END P_INITIAL_DATA_KITTING;
--------------------------------------------------------------------------------
  PROCEDURE P_INITIAL_DATA_BLANE     (pFACTORY_CD     VARCHAR2,
                                      pMODEL          VARCHAR2,
                                      pSHIFT          VARCHAR2,
                                      pLINE_CD        VARCHAR2,
                                      pCELL_NAME      VARCHAR2,
                                      pDAISHA_TYPE    VARCHAR2,
                                      pDAISHA_GROUP   VARCHAR2,
                                      pLOCATION       VARCHAR2,
                                      pROUND          VARCHAR2,
                                      pSLANE          OUT NUMBER) AS 
                                      
    vDATE   VARCHAR2(8):= TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME   VARCHAR2(8):= TO_CHAR(SYSDATE,'HH24:MI:SS');
    vSEQ    NUMBER(9,0);
    vORDER  NUMBER(2,0);
    
    BEGIN

      IF pDAISHA_TYPE = 'KT' THEN
      
        DELETE T_SLANE_DAISHA_PROGRESSIVE
        WHERE FACTORY_CD = pFACTORY_CD
        AND   MODEL      = pMODEL
        AND   PLAN_DATE  = vDATE
        AND   SHIFT      = pSHIFT
        AND   LINE_CD    = pLINE_CD
        AND   DAISHA_TYPE = 'KT'
        AND   DAISHA_GROUP = pDAISHA_GROUP;
        
        --SELECT MAX(
          IF pLOCATION = 'ASSY' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
          
          ELSIF pLOCATION = 'B-LANE' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
          ELSIF pLOCATION = 'IN BLANE' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
          ELSIF pLOCATION = 'S-LANE' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
          ELSIF pLOCATION = 'PICKING' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
          ELSE 
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
         
         END IF;
      END IF;
      
    END P_INITIAL_DATA_BLANE;
--------------------------------------------------------------------------------   
  PROCEDURE P_INITIAL_DATA_UPD       (pFACTORY_CD     VARCHAR2,
                                      pMODEL          VARCHAR2,
                                      pSHIFT          VARCHAR2,
                                      pLINE_CD        VARCHAR2,
                                      pCELL_NAME      VARCHAR2,
                                      pDAISHA_TYPE    VARCHAR2,
                                      pDAISHA_GROUP   VARCHAR2,
                                      pLOCATION       VARCHAR2,
                                      pROUND          VARCHAR2,
                                      pSLANE          OUT NUMBER) AS 
    
    vDATE      VARCHAR2(8):= TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME      VARCHAR2(8):= TO_CHAR(SYSDATE,'HH24:MI:SS');
    vMAXSEQ    NUMBER(9,0);
    vMAXROUND  NUMBER(2,0);
    vCNT_SEQ   NUMBER(9,0);
    vCNT_ROUND NUMBER(9,0);
    vSEQ       NUMBER(9,0);
    vORDER     NUMBER(2,0);
    vNEWORDER  NUMBER(2,0);
    vCOUNT     NUMBER(9,0);
    vROUND     NUMBER(2,0);
    vDES       VARCHAR2(8);
    
    BEGIN
      
        SELECT NVL(MAX(ROUND),0) INTO vMAXROUND
        FROM T_SLANE_DAISHA_PROGRESSIVE
        WHERE FACTORY_CD = pFACTORY_CD
        AND MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND SHIFT = pSHIFT
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pDAISHA_TYPE
        AND DAISHA_GROUP = pDAISHA_GROUP;
        
        SELECT COUNT(SEQ) INTO vCNT_SEQ
        FROM T_SLANE_DAISHA_PROGRESSIVE
        WHERE FACTORY_CD = pFACTORY_CD
        AND MODEL = pMODEL
        AND SHIFT = pSHIFT
        AND PLAN_DATE = vDATE
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pDAISHA_TYPE
        AND DAISHA_GROUP = pDAISHA_GROUP
        AND ROUND = pROUND;    
        
        IF vCNT_SEQ = 1 THEN 
          SELECT NVL(SEQ,0) INTO vSEQ
          FROM T_SLANE_DAISHA_PROGRESSIVE
          WHERE FACTORY_CD = pFACTORY_CD
          AND MODEL = pMODEL
          AND SHIFT = pSHIFT
          AND PLAN_DATE = vDATE
          AND LINE_CD = pLINE_CD
          AND DAISHA_TYPE = pDAISHA_TYPE
          AND DAISHA_GROUP = pDAISHA_GROUP
          AND ROUND = pROUND;  
          
          DELETE T_SLANE_DAISHA_PROGRESSIVE
          WHERE FACTORY_CD = pFACTORY_CD
          AND   MODEL      = pMODEL
          AND   PLAN_DATE  = vDATE
          AND   SHIFT      = pSHIFT
          AND   LINE_CD    = pLINE_CD
          AND   DAISHA_TYPE = pDAISHA_TYPE
          AND   DAISHA_GROUP = pDAISHA_GROUP
          AND   SEQ >= vSEQ;  --???????????????
          COMMIT;
        END IF;
        pSLANE := 1; 
      
      
      
      SELECT NVL(MAX(SEQ),0)+1 INTO vMAXSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE FACTORY_CD = pFACTORY_CD
      AND MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE
      AND DAISHA_GROUP = pDAISHA_GROUP;   
          
      SELECT NVL(MAX(ORDER_NO),1) INTO vNEWORDER
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE FACTORY_CD = pFACTORY_CD
      AND MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND SHIFT = pSHIFT
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE
      AND DAISHA_GROUP = pDAISHA_GROUP;          

      SELECT  NVL(COUNT(*),0) INTO vCOUNT
      FROM T_SLANE_DAISHA_PROGRESSIVE 
      WHERE FACTORY_CD = pFACTORY_CD
      AND MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND SHIFT = pSHIFT
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pDAISHA_TYPE
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND ORDER_NO = vNEWORDER;          
      
      --------------------------------------IMPROVEMENT------------------
      IF pDAISHA_TYPE = 'KT' THEN  
        IF vCOUNT = 0 OR vCOUNT = 1 THEN
           vNEWORDER := vNEWORDER;
        ELSE
           vNEWORDER := vNEWORDER+1;
        END IF;    
      ELSE 
        IF vCOUNT = 0 THEN
           vNEWORDER := vNEWORDER;
        ELSE
           vNEWORDER := vNEWORDER+1;
        END IF;    
      END IF;
      --------------------------------------IMPROVEMENT------------------
      
      IF pDAISHA_TYPE = 'KT' THEN
        vDES := 'KITTING';
      ELSE
        vDES := 'COMMON';
      END IF;
      
    --  IF vMAXROUND = pROUND or vMAXROUND = 0 THEN
        --vROUND := TO_NUMBER(pROUND); 
      
          IF pLOCATION = 'ASSY' THEN
              
         /* SELECT COUNT(ROUND) INTO vCNT_ROUND
          FROM T_SLANE_PROGRESS_ORDER_DAISHA
          WHERE FACTORY_CD = pFACTORY_CD
          AND MODEL = pMODEL
          AND SHIFT = pSHIFT
          AND PLAN_DATE = vDATE
          AND LINE_CD = pLINE_CD
          AND DAISHA_TYPE = pDAISHA_TYPE
          AND DAISHA_GROUP = pDAISHA_GROUP
          AND ORDER_NO = TO_NUMBER(pROUND);    
              
            IF vCNT_ROUND = 1 THEN 
              SELECT NVL(ROUND,0) INTO vORDER
              FROM T_SLANE_PROGRESS_ORDER_DAISHA
              WHERE FACTORY_CD = pFACTORY_CD
              AND MODEL = pMODEL
              AND SHIFT = pSHIFT
              AND PLAN_DATE = vDATE
              AND LINE_CD = pLINE_CD
              AND DAISHA_TYPE = pDAISHA_TYPE
              AND DAISHA_GROUP = pDAISHA_GROUP
              AND ORDER_NO = TO_NUMBER(pROUND);
            
              DELETE T_SLANE_PROGRESS_ORDER_DAISHA
              WHERE FACTORY_CD = pFACTORY_CD
              AND   MODEL      = pMODEL
              AND   PLAN_DATE  = vDATE
              AND   SHIFT      = pSHIFT
              AND   LINE_CD    = pLINE_CD
              AND   DAISHA_TYPE = pDAISHA_TYPE
              AND   DAISHA_GROUP = pDAISHA_GROUP
              AND   ORDER_NO   >= TO_NUMBER(pROUND);
              COMMIT;
              pSLANE := 2; 
            END IF;*/
          
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vMAXSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  pLOCATION,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  'xx:xx:xx',
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  vNEWORDER);
            COMMIT;    
            pSLANE := 3; 
               
            /*INSERT INTO T_SLANE_PROGRESS_ORDER_DAISHA(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, DAISHA_TYPE, DAISHA_GROUP,
                                                      ROUND, ORDER_NO, PLAN_TIME, ACTUAL_TIME, DIFF, MIN_BLANE)
                                              VALUES (pFACTORY_CD,
                                                      pMODEL,
                                                      vDATE,
                                                      pSHIFT,
                                                      pLINE_CD,
                                                      pDAISHA_TYPE,
                                                      pDAISHA_GROUP,
                                                      vNEWORDER,
                                                      vROUND,
                                                      vTIME,
                                                      vTIME,
                                                      NULL,
                                                      NULL);*/ 
             
           /* INSERT INTO T_SLANE_PROGRESS_ORDER_DAISHA(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, DAISHA_TYPE, DAISHA_GROUP,
                                                      ROUND, ORDER_NO, PLAN_TIME, ACTUAL_TIME, DIFF, MIN_BLANE)
                                              VALUES (pFACTORY_CD,
                                                      pMODEL,
                                                      vDATE,
                                                      pSHIFT,
                                                      pLINE_CD,
                                                      pDAISHA_TYPE,
                                                      pDAISHA_GROUP,
                                                      vNEWORDER,
                                                      vROUND,
                                                      vTIME,
                                                      'xx:xx:xx',
                                                      NULL,
                                                      vTIME); 
            COMMIT; */
            pSLANE := 4; 
                       
          ELSIF pLOCATION = 'KITTING' OR pLOCATION = 'B-LANE' THEN
          
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vMAXSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  pLOCATION,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  vNEWORDER);
                                                  
           /* INSERT INTO T_SLANE_PROGRESS_ORDER_DAISHA(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, DAISHA_TYPE, DAISHA_GROUP,
                                                      ROUND, ORDER_NO, PLAN_TIME, ACTUAL_TIME, DIFF, MIN_BLANE)
                                              VALUES (pFACTORY_CD,
                                                      pMODEL,
                                                      vDATE,
                                                      pSHIFT,
                                                      pLINE_CD,
                                                      pDAISHA_TYPE,
                                                      pDAISHA_GROUP,
                                                      vNEWORDER,
                                                      vROUND,
                                                      vTIME,
                                                      NULL,
                                                      NULL,
                                                      NULL);                                         
            COMMIT;*/
            pSLANE := 4;              
            
          ELSIF pLOCATION = 'IN KITTING' OR pLOCATION = 'IN B-LANE' THEN
          
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vMAXSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  pLOCATION,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  'xx:xx:xx',
                                                  TO_CHAR(SYSDATE,'YYYYMMDD'),
                                                  vTIME,
                                                  NULL,
                                                  NULL,
                                                  vNEWORDER);
                                                  
           /* INSERT INTO T_SLANE_PROGRESS_ORDER_DAISHA(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, DAISHA_TYPE, DAISHA_GROUP,
                                                      ROUND, ORDER_NO, PLAN_TIME, ACTUAL_TIME, DIFF, MIN_BLANE)
                                              VALUES (pFACTORY_CD,
                                                      pMODEL,
                                                      vDATE,
                                                      pSHIFT,
                                                      pLINE_CD,
                                                      pDAISHA_TYPE,
                                                      pDAISHA_GROUP,
                                                      vNEWORDER,
                                                      vROUND,
                                                      vTIME,
                                                      'xx:xx:xx',
                                                      NULL,
                                                      NULL);                                         
            COMMIT; */
            pSLANE := 4; 
          ELSIF pLOCATION = 'S-LANE' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vMAXSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  pLOCATION,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  --vORDER ????????????? NULL
                                                  NULL);
            pSLANE := 4;                                       
          ELSIF pLOCATION = 'PICKING' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vMAXSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  pLOCATION,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  --*/vORDER
                                                  NULL);
            pSLANE := 4;                                       
          ELSE 
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  pLINE_CD,
                                                  pCELL_NAME,
                                                  pDAISHA_TYPE,
                                                  pDAISHA_GROUP,
                                                  vMAXSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  NULL,
                                                  vDATE,
                                                  vTIME,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL);
            pSLANE := 4; 
         END IF;
         -- pSLANE := 1; 
    /*     ELSE
         pSLANE := 888||vMAXROUND; --ROUND ????????????????????
       END IF;*/
        
   /* EXCEPTION 
    WHEN NO_DATA_FOUND THEN 
      pSLANE := 999;*/
      
    END P_INITIAL_DATA_UPD;
--------------------------------------------------------------------------------  
END PG_SLANE_INITIAL_MASTER;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_ORDER_MATRIX_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_ORDER_MATRIX_MASTER" AS
  
   PROCEDURE SLANE_ORDER_MATRIX_MASTER_IU (
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pDAISHA_TYPE VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pPART_NO VARCHAR2,
                                        pDIM_NO VARCHAR2,
                                        pPART_NAME VARCHAR2,
                                        pSUPP_CD VARCHAR2,
                                        pSUPP_NAME VARCHAR2,
                                        pFLG_DIFF VARCHAR2,
                                        pCOLOR VARCHAR2,
                                        pSNP NUMBER,
                                        pQTY VARCHAR2,
                                        pORDER_01 NUMBER,
                                        pORDER_02 NUMBER,
                                        pORDER_03 NUMBER,
                                        pORDER_04 NUMBER,
                                        pORDER_05 NUMBER,
                                        pORDER_06 NUMBER,
                                        pORDER_07 NUMBER,
                                        pORDER_08 NUMBER,
                                        pORDER_09 NUMBER,
                                        pORDER_10 NUMBER,
                                        pORDER_11 NUMBER,
                                        pORDER_12 NUMBER,
                                        pORDER_13 NUMBER,
                                        pORDER_14 NUMBER,
                                        pORDER_15 NUMBER,
                                        pORDER_16 NUMBER,
                                        pORDER_17 NUMBER,
                                        pORDER_18 NUMBER,
                                        pORDER_19 NUMBER,
                                        pORDER_20 NUMBER,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pSLANE OUT NUMBER) AS
                                        
  BEGIN
    -- TODO: Implementation required for PROCEDURE PG_SLANE_DAISHA_MASTER.SLANE_DAISHA_MASTER_INS_UPD
    INSERT INTO T_SLANE_METRIX_PART_MASTER
                (  FACTORY_CD,
                   MODEL,
                   DAISHA_TYPE,
                   DAISHA_GROUP,
                   PART_NO,
                   DIM_NO,
                   PART_NAME,
                   SUPP_CD,
                   SUPP_NAME,
                   FLG_DIFF,
                   COLOR,
                   SNP,
                   QTY,
                   ORDER_01,
                   ORDER_02,
                   ORDER_03,
                   ORDER_04,
                   ORDER_05,
                   ORDER_06,
                   ORDER_07,
                   ORDER_08,
                   ORDER_09,
                   ORDER_10,
                   ORDER_11,
                   ORDER_12,
                   ORDER_13,
                   ORDER_14,
                   ORDER_15,
                   ORDER_16,
                   ORDER_17,
                   ORDER_18,
                   ORDER_19,
                   ORDER_20,
                   CREATE_DATE,
                   CREATE_BY,
                   UPDATE_DATE,
                   UPDATE_BY
                ) 
        VALUES(    pFACTORY_CD,
                   pMODEL,
                   pDAISHA_TYPE,
                   pDAISHA_GROUP,
                   pPART_NO,
                   pDIM_NO,
                   pPART_NAME,
                   pSUPP_CD,
                   pSUPP_NAME,
                   pFLG_DIFF,
                   pCOLOR,
                   pSNP,
                   pQTY,
                   pORDER_01,
                   pORDER_02,
                   pORDER_03,
                   pORDER_04,
                   pORDER_05,
                   pORDER_06,
                   pORDER_07,
                   pORDER_08,
                   pORDER_09,
                   pORDER_10,
                   pORDER_11,
                   pORDER_12,
                   pORDER_13,
                   pORDER_14,
                   pORDER_15,
                   pORDER_16,
                   pORDER_17,
                   pORDER_18,
                   pORDER_19,
                   pORDER_20,
                   sysdate,
                   pCREATE_BY,
                   sysdate,
                   pUPDATE_BY
               )  ;
   
    pSLANE := 1;
    
 EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
   
   UPDATE T_SLANE_METRIX_PART_MASTER SET 
                   SNP = pSNP,
                   QTY = pQTY,
                   ORDER_01 = pORDER_01,
                   ORDER_02 = pORDER_02,
                   ORDER_03 = pORDER_03,
                   ORDER_04 = pORDER_04,
                   ORDER_05 = pORDER_05,
                   ORDER_06 = pORDER_06,
                   ORDER_07 = pORDER_07,
                   ORDER_08 = pORDER_08,
                   ORDER_09 = pORDER_09,
                   ORDER_10 = pORDER_10,
                   ORDER_11 = pORDER_11,
                   ORDER_12 = pORDER_12,
                   ORDER_13 = pORDER_13,
                   ORDER_14 = pORDER_14,
                   ORDER_15 = pORDER_15,
                   ORDER_16 = pORDER_16,
                   ORDER_17 = pORDER_17,
                   ORDER_18 = pORDER_18,
                   ORDER_19 = pORDER_19,
                   ORDER_20 = pORDER_20,
                   UPDATE_DATE = SYSDATE,
                   UPDATE_BY = pUPDATE_BY
   WHERE
   FACTORY_CD = pFACTORY_CD
   AND MODEL = pMODEL 
   AND DAISHA_TYPE = pDAISHA_TYPE 
   AND DAISHA_GROUP = pDAISHA_GROUP
   AND PART_NO = pPART_NO 
   AND DIM_NO = pDIM_NO
   AND SUPP_CD = pSUPP_CD;
   
    pSLANE := 1; 
  
  END SLANE_ORDER_MATRIX_MASTER_IU;

-----------------------------------------------------------------------------

  PROCEDURE SLANE_ORDER_MATRIX_MASTER_SEL (
                                        pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pDAISHA_TYPE VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pPART_NO VARCHAR2,
                                        pFLG_DIFF VARCHAR2,
                                        pSNP NUMBER,
                                        pSNP_NO VARCHAR2,
                                        pQTY VARCHAR2,
                                       -- pQTY_NO VARCHAR2,
                                        pCREATE_DATE VARCHAR2,
                                        pDATE_FROM VARCHAR2,
                                        pDATE_TO VARCHAR2,
                                        pCREATE_BY VARCHAR2,
                                        pUPDATE_BY VARCHAR2,
                                        pCUERSOR2 OUT T_CURSOR) IS
          wk_select    					Varchar2(2000) := NULL; 
   				wk_where              Varchar2(2000) := NULL;
          --*** Check condition for search
    BEGIN
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
    		IF pMODEL is not null then
    	 				wk_where := wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
    		IF pDAISHA_TYPE is not null then
    	 				wk_where := wk_where||' AND DAISHA_TYPE = '||''''||pDAISHA_TYPE||'''';
    		End IF;
        IF pDAISHA_GROUP is not null then
    	 				wk_where := wk_where||' AND DAISHA_GROUP = '||''''||pDAISHA_GROUP||'''';
   			End IF;
        
        IF pPART_NO is not null then
    	 				wk_where := wk_where||' AND PART_NO = '||''''||pPART_NO||'''';
   			End IF;
    	
    		IF pFLG_DIFF is not null then
    	 				wk_where := wk_where||' AND FLG_DIFF = '||''''||pFLG_DIFF||'''';
    		End IF;
      
        IF pSNP is not null then
    	 				wk_where := wk_where||' AND SNP '||pSNP_NO||''||pSNP||'';
   			End IF;
    		IF pQTY is not null then
    	 				wk_where := wk_where||' AND QTY = '||''''||pQTY||'''';
    		End IF;
        
    		IF pCREATE_DATE is not null then

    					wk_where := wk_where||' AND to_char('||pCREATE_DATE||','||''''||'YYYYMMDD'||''''||')'
              ||'BETWEEN to_char(to_date('||''''||pDATE_FROM||''''||','||''''||'dd-MON-yyyy'||''''||'),'||''''||'YYYYMMDD'||''''||')
               AND to_char(to_date('||''''||pDATE_TO||''''||','||''''||'dd-MON-yyyy'||''''||'),'||''''||'YYYYMMDD'||''''||')';
                        	
        END IF;
         IF pCREATE_BY is not null then
    	 				wk_where := wk_where||' AND CREATE_BY = '||''''||pCREATE_BY||'''';
   			End IF;
        IF pUPDATE_BY is not null then
    	 				wk_where := wk_where||' AND UPDATE_BY = '||''''||pUPDATE_BY||'''';
   			End IF;
 
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT * FROM T_SLANE_METRIX_PART_MASTER ' ||wk_where||' ORDER BY UPDATE_DATE DESC';
   
  		--*** Execute cursor
   			OPEN pCUERSOR2 FOR wk_select;

  END SLANE_ORDER_MATRIX_MASTER_SEL;
    
   ----------------------------------------------------------------------------- 
  PROCEDURE SLANE_ORDER_MATRIX_MASTER_DEL (   pFACTORY_CD VARCHAR2,
                                        pMODEL VARCHAR2,
                                        pDAISHA_TYPE VARCHAR2,
                                        pDAISHA_GROUP VARCHAR2,
                                        pPART_NO VARCHAR2,
                                        pDIM_NO VARCHAR2,
                                        pSUPP_CD VARCHAR2,
                                        pSLANE OUT NUMBER)AS
   BEGIN
      DELETE FROM T_SLANE_METRIX_PART_MASTER WHERE 
      FACTORY_CD = pFACTORY_CD
      AND MODEL = pMODEL 
      AND DAISHA_TYPE = pDAISHA_TYPE
      AND DAISHA_GROUP = pDAISHA_GROUP
      AND PART_NO = pPART_NO
      AND DIM_NO = pDIM_NO
      AND SUPP_CD = pSUPP_CD;
      
      pSLANE := 1;
      
   END SLANE_ORDER_MATRIX_MASTER_DEL;   
  
 ----------------------------------------------------------------------------- 

END PG_SLANE_ORDER_MATRIX_MASTER;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_PLAN_MASTER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_PLAN_MASTER" AS

  PROCEDURE P_SLANE_PLAN_MASTER_SEL(
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pMODEL VARCHAR2,
                               
                                   
                                   pCUERSOR OUT T_CURSOR
                                  ) IS
           wk_select VARCHAR(1000);         
           wk_where  Varchar2(1000);
          --*** Check condition for search
    BEGIN
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
         IF pMODEL_SEQ is not null then
    	 				wk_where :=  wk_where||' AND MODEL_SEQ = '||''''||pMODEL_SEQ||'''';
   			End IF;
    		IF pMODEL is not null then
    	 				wk_where := wk_where||' AND MODEL = '||''''||pMODEL||'''';
    		End IF;
        
       /* IF pMODEL_ALL is not null then
    	 				wk_where := wk_where||' AND MODEL_ALL = '||''''||pMODEL_ALL||'''';
    		End IF;*/
        
        if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
        
   					wk_select := 'SELECT * FROM V_PRD_PLAN_A3_MODEL_MS ' ||wk_where||' ORDER BY MODEL_SEQ DESC';
            
   OPEN pCUERSOR FOR wk_select;
  END P_SLANE_PLAN_MASTER_SEL;

END PG_SLANE_PLAN_MASTER;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_PRODUCTION_PLAN
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_PRODUCTION_PLAN" AS

  PROCEDURE P_SLANE_PRODUCTION_PLAN_SEL(
                                   pFACTORY_CD VARCHAR2,
                                   pMODEL_SEQ VARCHAR2,
                                   pPLAN_DATE VARCHAR2,
                                   pLINE_CD VARCHAR2,
                                   pCUERSOR OUT T_CURSOR
                                  )  IS
                                   
           wk_select    Varchar2(1000);         
           wk_where     Varchar2(1000);
      
    BEGIN
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
         IF pMODEL_SEQ is not null then
    	 				wk_where :=  wk_where||' AND MODEL_SEQ = '||''''||pMODEL_SEQ||'''';
   			End IF;
    		IF pPLAN_DATE is not null then
    	 				wk_where := wk_where||' AND PLAN_DATE = '||''''||pPLAN_DATE||'''';
    		End IF;
         IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
        if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
        
   					wk_select := 'SELECT * FROM T_SLANE_PRODUCTION_PLAN ' ||wk_where||' ORDER BY MODEL_SEQ,SHIFT,LINE_CD,PRIORITY';
            
   OPEN pCUERSOR FOR wk_select;
  END P_SLANE_PRODUCTION_PLAN_SEL;

END PG_SLANE_PRODUCTION_PLAN;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_REC_EMPTY_DAISHA
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_REC_EMPTY_DAISHA" AS

  PROCEDURE P_SLANE_REC_EMP_DAISHA_INSUP (
                                              pFACTORY_CD   VARCHAR2,
                                              pMODEL        VARCHAR2,
                                              pLINE_CD      VARCHAR2,
                                              pCELL_NAME    VARCHAR2,
                                              pDAISHA_TYPE  VARCHAR2,
                                              pDAISHA_GROUP VARCHAR2,
                                              pROUND        NUMBER,
                                              pTOTAL_EMPTY  VARCHAR2,
                                              pSLANE        OUT NUMBER)AS
      vCOUNT    NUMBER;    
      vDATE     VARCHAR2(8) ;
      vTIME     VARCHAR2(10) := TO_CHAR(SYSDATE,'HH24:MI:SS');
      --vTIME     VARCHAR2(10) := '00:11:00' ;
      vSHIFT    VARCHAR2(1) ;
      vSEQ      NUMBER; 
      
  BEGIN
  
    IF   vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
       vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
       --vDATE := '20180707' ;
    ELSE
       vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
       --vDATE := '20180801' ;
    END IF;
    
    --vSHIFT
    IF   vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
    ELSE
      vSHIFT := 'N';
    END IF;
                   
      SELECT COUNT(*) INTO vCOUNT 
                   FROM T_SLANE_REC_EMPTY_DAISHA
                   WHERE CAL_DATE = vDATE
                   AND MODEL = pMODEL 
                   AND LINE_CD = pLINE_CD
                   AND SHIFT = vSHIFT
                   AND DAISHA_TYPE = pDAISHA_TYPE 
                   AND DAISHA_GROUP = pDAISHA_GROUP;
      
    /*  SELECT SEQ INTO vSEQ 
                   FROM T_SLANE_DAISHA_PROGRESSIVE
                   WHERE PLAN_DATE = vDATE
                   AND MODEL = pMODEL 
                   AND LINE_CD = pLINE_CD
                   AND SHIFT = vSHIFT
                   AND DAISHA_TYPE = pDAISHA_TYPE 
                   AND DAISHA_GROUP = pDAISHA_GROUP
                   AND ROUND = pROUND
                   AND LOCATION = 'EMPTY';
                   
       INSERT INTO T_SLANE_TEMP_PROCESS   (   MODEL,
                                             PLAN_DATE,
                                             SHIFT,
                                             LINE_CD,
                                             DAISHA_TYPE,
                                             DAISHA_GROUP,
                                             SEQ,
                                             ROUND,
                                             DESTINATION,
                                             COLOR,
                                             LOCATION,
                                             PROCESS_ID,
                                             PROCESS_NAME,
                                             STATUS)
                               VALUES    (   pMODEL,
                                             vDATE,
                                             vSHIFT,
                                             pLINE_CD,
                                             pDAISHA_TYPE,
                                             pDAISHA_GROUP,
                                             vSEQ,
                                             pROUND,
                                             'KITTING',
                                             NULL,
                                             'EMPTY',
                                             1,
                                             'REC_EMPTY',
                                             NULL);                                 
          COMMIT;             */
                   
      IF  vCOUNT = 0  THEN
         DELETE FROM T_SLANE_REC_EMPTY_DAISHA
                   WHERE CAL_DATE = vDATE
                   AND MODEL = pMODEL 
                   AND LINE_CD = pLINE_CD
                   AND SHIFT = 'D'
                   AND DAISHA_TYPE = pDAISHA_TYPE 
                   AND DAISHA_GROUP = pDAISHA_GROUP;
                   -- TODO: Implementation required for PROCEDURE PG_SLANE_REC_EMPTY_DAISHA.P_SLANE_REC_EMP_DAISHA_INSUP
       END IF; 
    INSERT INTO T_SLANE_REC_EMPTY_DAISHA
                (
                  FACTORY_CD,
                  MODEL,
                  CAL_DATE,
                  SHIFT,
                  LINE_CD,
                  CELL_NAME,
                  DAISHA_TYPE,
                  DAISHA_GROUP,
                  TOTAL_EMPTY,
                  CREATE_DATE,
                  UPDATE_DATE,
                  ROUND
                )
                VALUES
                (
                  pFACTORY_CD,
                  pMODEL,
                  vDATE,
                  vSHIFT,
                  pLINE_CD,
                  pCELL_NAME,
                  pDAISHA_TYPE,
                  pDAISHA_GROUP,
                  pTOTAL_EMPTY,
                  sysdate,
                  sysdate,
                  pROUND
                );
                 
                  pSLANE := 1;
        
            EXCEPTION
                  WHEN DUP_VAL_ON_INDEX THEN
                   UPDATE T_SLANE_REC_EMPTY_DAISHA SET 
                   TOTAL_EMPTY = TOTAL_EMPTY + 1,
                   UPDATE_DATE = SYSDATE,
                   ROUND = pROUND
                   WHERE
                   FACTORY_CD = pFACTORY_CD
                   AND CAL_DATE = vDATE
                   AND MODEL = pMODEL 
                   AND LINE_CD = pLINE_CD
                   AND SHIFT = vSHIFT
                   AND DAISHA_TYPE = pDAISHA_TYPE 
                   AND DAISHA_GROUP = pDAISHA_GROUP;
                   COMMIT;                  
                   pSLANE := 2; 
                 
                   
  END P_SLANE_REC_EMP_DAISHA_INSUP;
  -----------------------------------------------------------------------------
PROCEDURE P_SLANE_REC_EMP_DAISHA_SEL (
                                              pFACTORY_CD    VARCHAR2,
                                              pMODEL         VARCHAR2,
                                              pLINE_CD       VARCHAR2,
                                              pCELL_NAME     VARCHAR2,
                                              pDAISHA_TYPE   VARCHAR2,
                                              pDAISHA_GROUP  VARCHAR2,
                                              pROUND        NUMBER,
                                              pCUERSOR       OUT T_CURSOR)IS
          wk_select   VARCHAR2(1000); 
   				wk_where    VARCHAR2(1000);
          vDATE       VARCHAR2(8) ;
          vTIME       VARCHAR2(10) := TO_CHAR(SYSDATE,'HH24:MI:SS');
          --vTIME       VARCHAR2(10) := '23:23:00';
          --*** Check condition for search
    BEGIN
      --vDATE
    IF   vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
        --vDATE := '20180707' ;
    ELSE
       vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
    END IF;
    
    
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
         IF vDATE is not null then
    	 				wk_where :=  wk_where||' AND CAL_DATE = '||''''||vDATE||'''';
   			End IF; 
    		IF pMODEL is not null then
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
    		IF pCELL_NAME is not null then
    	 				wk_where := wk_where||' AND CELL_NAME = '||''''||pCELL_NAME||'''';
    		End IF;
   
    		IF pDAISHA_TYPE is not null then
    	 				wk_where := wk_where||' AND DAISHA_TYPE = '||''''||pDAISHA_TYPE||'''';
    		End IF;
        
        IF pDAISHA_GROUP is not null then
    	 				wk_where := wk_where||' AND DAISHA_GROUP = '||''''||pDAISHA_GROUP||'''';
   			End IF;
        
        IF pROUND is not null then
    	 				wk_where := wk_where||' AND ROUND = '||''''||pROUND||'''';
   			End IF;
        
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					wk_select := 'SELECT CAL_DATE, CASE LINE_CD WHEN '''||'CM'||''' THEN '''||'ALL'||''' ELSE CELL_NAME END AS CELL_NAME, CASE DAISHA_TYPE  WHEN '''||'MA'||''' THEN '''||'MAIN'||''' WHEN '''||'SU'||''' THEN '''||'SUB'||'''  WHEN '''||'MS'||''' THEN '''||'MAIN+SUB'||'''  WHEN '''||'KT'||''' THEN '''||'KITTING'||''' END AS DAISHA_TYPE  , CASE DAISHA_GROUP WHEN '''||'KR'||''' THEN '''||'KORAT'||''' WHEN '''||'O1'||''' THEN '''||'OTHER1'||''' WHEN '''||'O2'||''' THEN '''||'OTHER2'||''' END AS DAISHA_GROUP, TOTAL_EMPTY FROM T_SLANE_REC_EMPTY_DAISHA ' ||wk_where||' group by CAL_DATE,LINE_CD,CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,TOTAL_EMPTY ORDER BY DAISHA_TYPE';
   	--wk_select := 'SELECT CELL_NAME,DAISHA_TYPE,DAISHA_GROUP,TOTAL_EMPTY FROM V_SLANE_DETAIL_EMPTY ' ||wk_where||'';
  		--*** Execute cursor
   			OPEN pCUERSOR FOR wk_select;
END P_SLANE_REC_EMP_DAISHA_SEL;
-------------------------------------------------------------------------------
PROCEDURE P_SLANE_REC_EMP_DAISHA_MAX_SEL (
                                              pFACTORY_CD     VARCHAR2,
                                              pMODEL          VARCHAR2,
                                              pLINE_CD        VARCHAR2,
                                              pDAISHA_TYPE    VARCHAR2,
                                              pDAISHA_GROUP   VARCHAR2,
                                              pCUERSOR        OUT T_CURSOR)IS
          wk_select    					Varchar2(1000); 
   				wk_where              Varchar2(1000);
          --*** Check condition for search
    BEGIN
     	  IF pFACTORY_CD is not null then
    	 				wk_where := ' AND FACTORY_CD = '||''''||pFACTORY_CD||'''';
   			End IF;
        
    		IF pMODEL is not null then
    	 				wk_where :=  wk_where||' AND MODEL = '||''''||pMODEL||'''';
   			End IF;
        
        IF pLINE_CD is not null then
    	 				wk_where :=  wk_where||' AND LINE_CD = '||''''||pLINE_CD||'''';
   			End IF;
        
    		IF pDAISHA_TYPE is not null then
    	 				wk_where := wk_where||' AND DAISHA_TYPE = '||''''||pDAISHA_TYPE||'''';
    		End IF;
        
        IF pDAISHA_GROUP is not null then
    	 				wk_where := wk_where||' AND DAISHA_GROUP = '||''''||pDAISHA_GROUP||'''';
   			End IF;
        
    	--*** Add WHERE and substr AND
    		if wk_where is not null then
    		  	wk_where := 'WHERE '||substr(wk_where,5); 
    		end if;
    
   					--wk_select := 'SELECT FACTORY_CD, MODEL, LINE_CD, DAISHA_TYPE, DAISHA_GROUP, Max(CAL_DATE)as CAL_DATE ,MAX(TOTAL_EMPTY)as TOTAL_EMPTY FROM T_SLANE_REC_EMPTY_DAISHA ' ||wk_where||' GROUP BY FACTORY_CD, MODEL, LINE_CD, DAISHA_TYPE, DAISHA_GROUP';
              wk_select := 'SELECT FACTORY_CD, MODEL, LINE_CD, DAISHA_TYPE, DAISHA_GROUP, CAL_DATE , TOTAL_EMPTY FROM T_SLANE_REC_EMPTY_DAISHA ' ||wk_where||' and CAL_DATE = (select max(cal_date) from T_SLANE_REC_EMPTY_DAISHA '||wk_where||')';
  		--*** Execute cursor
   			OPEN pCUERSOR FOR wk_select;
 END P_SLANE_REC_EMP_DAISHA_MAX_SEL;
END PG_SLANE_REC_EMPTY_DAISHA;

/
--------------------------------------------------------
--  DDL for Package Body PG_SLANE_SIGNAL
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."PG_SLANE_SIGNAL" AS

  PROCEDURE P_FIX_STORE_OUT  (          pFACTORY_CD VARCHAR2,
                                        pMODEL      VARCHAR2,
                                        pLINE_CD    VARCHAR2,
                                        pTYPE       VARCHAR2,
                                        pGROUP      VARCHAR2,
                                        pROUND      NUMBER,
                                        pSLANE      OUT NUMBER) AS 
                                        
    vDATE    VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME    VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    --vTIME    VARCHAR2(8) := '00:00:00';
    vSHIFT   VARCHAR2(1);
    vMAXSEQ  NUMBER; 
    vSEQ     NUMBER; 
    vROUND   NUMBER;
    vZONE         VARCHAR2(1) := 'P';
    vCYCLE_TIME   VARCHAR2(16);
    vMAXROUND     NUMBER;
    vTYPE         VARCHAR2(10);
    vLOCATION     VARCHAR2(10);
    vCELL_NAME    VARCHAR2(10);
    vDES          VARCHAR2(10);
    vCHK_SEQ      NUMBER;
    
 BEGIN
 
   IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
      --vDATE := '20180709';
   ELSE
      vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
      --vDATE := '20180807';
   END IF;
      
   IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
   ELSE
      vSHIFT := 'N';
   END IF;
   
   IF pTYPE = 'KT' THEN
      vLOCATION := 'IN KITTING';
      vDES := 'KITTING';
   ELSE
      vLOCATION := 'IN B-LANE';
      vDES := 'COMMON';
   END IF;
     
   -- GET Max SEQ
      SELECT MAX(SEQ) +1 INTO vMAXSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE 
      AND LINE_CD = pLINE_CD 
      AND DAISHA_TYPE = pTYPE 
      AND DAISHA_GROUP = pGROUP; 
       
      -- GET Max ROUND
      SELECT MAX(ROUND) +1 INTO vROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE 
      AND SEQ = vMAXSEQ-1 
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE 
      AND DAISHA_GROUP = pGROUP; 
      
      SELECT CELL_NAME INTO vCELL_NAME
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE 
      AND DAISHA_GROUP = pGROUP
      AND SEQ = vMAXSEQ-1;
      
      vCYCLE_TIME := GET_TIME_PICKING(pMODEL, pTYPE, vDATE, vSHIFT, vTIME, NULL, vZONE);
       
      IF vROUND > 20 THEN
        vROUND := 1;
      END IF;
     
     SELECT MAX(SEQ) INTO vSEQ 
     FROM T_SLANE_DAISHA_PROGRESSIVE 
     WHERE FACTORY_CD = pFACTORY_CD
     AND MODEL = pMODEL
     AND PLAN_DATE = vDATE
     AND LINE_CD = pLINE_CD
     AND DAISHA_TYPE = pTYPE
     AND DAISHA_GROUP = pGROUP
     AND BLANE_IN_DT IS NULL
     AND BLANE_IN_TM IS NULL
     AND ROUND = pROUND;
     
     SELECT NVL(MAX(SEQ),0) INTO vCHK_SEQ 
     FROM T_SLANE_DAISHA_PROGRESSIVE 
     WHERE FACTORY_CD = pFACTORY_CD
     AND MODEL = pMODEL
     AND PLAN_DATE = vDATE
     AND LINE_CD = pLINE_CD
     AND DAISHA_TYPE = pTYPE
     AND DAISHA_GROUP = pGROUP
     AND BLANE_SIGNAL_DT IS NOT NULL
     AND BLANE_SIGNAL_TM IS NOT NULL
     AND PLAN_OUT_SLANE_DT IS NOT NULL
     AND PLAN_OUT_SLANE_TM IS NOT NULL
     AND ROUND = pROUND;
     
     IF vSEQ = vCHK_SEQ THEN
      INSERT INTO T_SLANE_DAISHA_PROGRESSIVE (FACTORY_CD,
                                                  MODEL,
                                                  PLAN_DATE,
                                                  SHIFT,
                                                  LINE_CD,
                                                  CELL_NAME,
                                                  DAISHA_TYPE,
                                                  DAISHA_GROUP,
                                                  SEQ,
                                                  ROUND,
                                                  MERCHANDISE_CD,
                                                  DESTINATION,
                                                  COLOR,
                                                  LOCATION,
                                                  PLAN_PICK_DT,
                                                  PLAN_PICK_TM,
                                                  ACT_PICK_DT,
                                                  ACT_PICK_TM,
                                                  SLANE_IN_DT,
                                                  SLANE_IN_TM,
                                                  BLANE_SIGNAL_DT,
                                                  BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT,
                                                  PLAN_OUT_SLANE_TM,
                                                  ACT_OUT_SLANE_DT,
                                                  ACT_OUT_SLANE_TM,
                                                  BLANE_IN_DT,
                                                  BLANE_IN_TM)
                                        VALUES    (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  vSHIFT,
                                                  pLINE_CD,
                                                  vCELL_NAME,
                                                  pTYPE,
                                                  pGROUP,
                                                  vMAXSEQ,
                                                  vROUND,
                                                  'COMMON',
                                                  vDES,
                                                  NULL,
                                                  NULL,
                                                  SUBSTR(vCYCLE_TIME,0,8),--vDATE,
                                                  SUBSTR(vCYCLE_TIME,9,8),
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL);                                 
        COMMIT;
     
     UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = vLOCATION,
          BLANE_IN_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
          BLANE_IN_TM = vTIME,
          SHIFT = vSHIFT,
          ACT_OUT_SLANE_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
          ACT_OUT_SLANE_TM = 'xx:xx:xx'
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND
      AND SEQ = vSEQ 
      AND BLANE_IN_DT IS NULL
      AND BLANE_IN_TM IS NULL;
      COMMIT;
    
  /*    SELECT MAX(TO_NUMBER(ROUND)) INTO vMAXROUND
      FROM T_SLANE_PROGRESS_ORDER_DAISHA 
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND
      AND ACTUAL_TIME IS NULL;
      
      UPDATE T_SLANE_PROGRESS_ORDER_DAISHA 
      SET ACTUAL_TIME = 'xx:xx:xx'
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND 
      AND ROUND = vMAXROUND
      AND DIFF IS NULL;          
      COMMIT;
  */      
      INSERT INTO T_SLANE_TEMP_PROCESS   (   MODEL,
                                               PLAN_DATE,
                                               SHIFT,
                                               LINE_CD,
                                               DAISHA_TYPE,
                                               DAISHA_GROUP,
                                               SEQ,
                                               ROUND,
                                               DESTINATION,
                                               COLOR,
                                               LOCATION,
                                               PROCESS_ID,
                                               PROCESS_NAME,
                                               STATUS,
                                               TIME)
                                 VALUES    (   pMODEL,
                                               vDATE,
                                               vSHIFT,
                                               pLINE_CD,
                                               pTYPE,
                                               pGROUP,
                                               vSEQ,
                                               pROUND,
                                               vDES,
                                               NULL,
                                               vLOCATION,
                                               5,
                                               'SIGNAL_IN_EXTRA',
                                               'OK',
                                               vTIME);                                 
            COMMIT;  
      pSLANE := 3;
    ELSE
      pSLANE := 0;
    END IF;
  END P_FIX_STORE_OUT;
 ------------------------------------------------------------------------------
  PROCEDURE P_SIGNAL_IN_KT (            pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pSLANE        OUT NUMBER) AS  
                                        
    vDATE        VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME        VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS'); 
    --vTIME    VARCHAR2(8) := '22:15:00';
    vSHIFT       VARCHAR2(1);
    vCOUNT       NUMBER; 
    vSEQ         NUMBER;
    
    vCOUNT_OUT   NUMBER;
    vSEQ_OUT     NUMBER;
    --vZONE        VARCHAR2(1) := 'P';
    --vCYCLE_TIME  VARCHAR2(16);
    vMAXSEQ      NUMBER;
    vROUND       NUMBER;
    v_OUT        NUMBER;
    
 BEGIN
 
    IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
      --vDATE := '20180709';
    ELSE
      vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
      --vDATE := '20180801';
    END IF;
      
   IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
    ELSE
      vSHIFT := 'N';
    END IF;
   
   SELECT MAX(SEQ) INTO vSEQ_OUT 
   FROM T_SLANE_DAISHA_PROGRESSIVE 
   WHERE FACTORY_CD = pFACTORY_CD
   AND MODEL = pMODEL
   AND PLAN_DATE = vDATE
   AND LINE_CD = pLINE_CD
   AND DAISHA_TYPE = pTYPE
   AND DAISHA_GROUP = pGROUP
   AND ROUND = pROUND
   AND ACT_OUT_SLANE_DT IS NULL
   AND ACT_OUT_SLANE_TM IS NULL
   AND BLANE_IN_DT IS NULL
   AND BLANE_IN_TM IS NULL;
   
   SELECT COUNT(*) INTO vCOUNT_OUT 
   FROM T_SLANE_DAISHA_PROGRESSIVE 
   WHERE FACTORY_CD = pFACTORY_CD
   AND MODEL = pMODEL
   AND PLAN_DATE = vDATE
   AND LINE_CD = pLINE_CD
   AND DAISHA_TYPE = pTYPE
   AND DAISHA_GROUP = pGROUP
   AND ROUND = pROUND
   AND SEQ = vSEQ_OUT
   AND ACT_OUT_SLANE_DT IS NULL
   AND ACT_OUT_SLANE_TM IS NULL
   AND BLANE_IN_DT IS NULL
   AND BLANE_IN_TM IS NULL;
   
   IF vCOUNT_OUT = 1 THEN
   
     P_FIX_STORE_OUT(pFACTORY_CD, pMODEL, pLINE_CD, pTYPE, pGROUP, pROUND,v_OUT);
     pSLANE := v_OUT;
     
   ELSE
   
     SELECT MAX(SEQ) INTO vSEQ 
     FROM T_SLANE_DAISHA_PROGRESSIVE 
     WHERE FACTORY_CD = pFACTORY_CD
     AND MODEL = pMODEL
     AND PLAN_DATE = vDATE
     AND LINE_CD = pLINE_CD
     AND DAISHA_TYPE = pTYPE
     AND DAISHA_GROUP = pGROUP
     AND ACT_OUT_SLANE_DT IS NOT NULL
     AND ACT_OUT_SLANE_TM IS NOT NULL
     AND BLANE_IN_DT IS NULL
     AND BLANE_IN_TM IS NULL
     AND ROUND = pROUND;
     
     SELECT COUNT(*) INTO vCOUNT 
     FROM T_SLANE_DAISHA_PROGRESSIVE 
     WHERE FACTORY_CD = pFACTORY_CD
     AND PLAN_DATE = vDATE
     AND MODEL = pMODEL
     AND LINE_CD = pLINE_CD
     AND DAISHA_TYPE = pTYPE
     AND DAISHA_GROUP = pGROUP
     AND ACT_OUT_SLANE_DT IS NOT NULL
     AND ACT_OUT_SLANE_TM IS NOT NULL
     AND BLANE_IN_DT IS NULL
     AND BLANE_IN_TM IS NULL
     --AND LOCATION = 'S-LANE'
     AND SEQ = vSEQ
     AND ROUND = pROUND;
   
      IF vCOUNT = 1 THEN
      UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'IN KITTING',
          BLANE_IN_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),
          BLANE_IN_TM = vTIME,
          SHIFT = vSHIFT
      WHERE MODEL = pMODEL
      --AND SHIFT = vSHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND
      AND SEQ = vSEQ 
      AND BLANE_IN_DT IS NULL
      AND BLANE_IN_TM IS NULL
      AND ACT_OUT_SLANE_DT IS NOT NULL
      AND ACT_OUT_SLANE_TM IS NOT NULL;
      COMMIT;
        pSLANE := 1;
        
        INSERT INTO T_SLANE_TEMP_PROCESS   (   MODEL,
                                               PLAN_DATE,
                                               SHIFT,
                                               LINE_CD,
                                               DAISHA_TYPE,
                                               DAISHA_GROUP,
                                               SEQ,
                                               ROUND,
                                               DESTINATION,
                                               COLOR,
                                               LOCATION,
                                               PROCESS_ID,
                                               PROCESS_NAME,
                                               STATUS,
                                               TIME)
                                 VALUES    (   pMODEL,
                                               vDATE,
                                               vSHIFT,
                                               pLINE_CD,
                                               pTYPE,
                                               pGROUP,
                                               vSEQ,
                                               pROUND,
                                               'KITTING',
                                               NULL,
                                               'IN KITTING',
                                               5,
                                               'SIGNAL_IN_KT',
                                               'OK',
                                               vTIME);                                 
       
            COMMIT;
              pSLANE := 2;
      ELSE                                     
        pSLANE := 0; 
      END IF;
    
    END IF;
    
 END P_SIGNAL_IN_KT;
 ------------------------------------------------------------------------------
 -- START PICKING --
 PROCEDURE P_SIGNAL_MIN_KT (            pFACTORY_CD   VARCHAR2,
                                        pMODEL        VARCHAR2,
                                        pLINE_CD      VARCHAR2,
                                        pTYPE         VARCHAR2,
                                        pGROUP        VARCHAR2,
                                        pROUND        NUMBER,
                                        pCOLOR        VARCHAR2,
                                        pSLANE        OUT NUMBER) AS  
                                        
    vDATE       VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME       VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    --vTIME       VARCHAR2(8) := '00:00:10' ;
    vSHIFT      VARCHAR2(1);
    
    vMINSEQ     NUMBER;
    vCOUNT      NUMBER;
    vCOUNT2     NUMBER;
    vCNT_ORDER  NUMBER;
    vORDER      NUMBER;
    vCYCLE      T_SLANE_DELIVERY_CYCLE_MASTER.CYCLE_TIME%TYPE;
    CUR1        T_SLANE_DAISHA_PROGRESSIVE%ROWTYPE;
    --vCHKTIME    NUMBER; 
    --vPLAN_OUT   VARCHAR2(8) ;
    vCNT_ASSY   NUMBER;
    vZONE       VARCHAR2(1) := 'S';
    vCYCLE_TIME VARCHAR2(16);
    
 BEGIN
 
    IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
      --vDATE := '20180815';
    ELSE
      vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
      --vDATE := '20180907';
    END IF;
      
   IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
    ELSE
      vSHIFT := 'N';
    END IF;
    
    SELECT MIN(SEQ) INTO vMINSEQ
    FROM T_SLANE_DAISHA_PROGRESSIVE
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND ACT_OUT_SLANE_DT IS NULL
        AND ACT_OUT_SLANE_TM IS NULL
        AND BLANE_SIGNAL_DT IS NULL
        AND BLANE_SIGNAL_TM IS NULL
        AND LOCATION = 'S-LANE';
    
    IF vMINSEQ IS NULL THEN
      vMINSEQ := 0;
    END IF;
    
    INSERT INTO T_SLANE_TEMP_PROCESS   (     MODEL,
                                             PLAN_DATE,
                                             SHIFT,
                                             LINE_CD,
                                             DAISHA_TYPE,
                                             DAISHA_GROUP,
                                             SEQ,
                                             ROUND,
                                             DESTINATION,
                                             COLOR,
                                             LOCATION,
                                             PROCESS_ID,
                                             PROCESS_NAME,
                                             STATUS,
                                             TIME)
                               VALUES    (   pMODEL,
                                             vDATE,
                                             vSHIFT,
                                             pLINE_CD,
                                             pTYPE,
                                             pGROUP,
                                             vMINSEQ,
                                             pROUND,
                                             'KITTING',
                                             pCOLOR,
                                             'ASSY',
                                             6,
                                             'SIGNAL_MIN_KT',
                                             'OK',
                                             vTIME);                                 
          COMMIT;
          
     SELECT COUNT(*) INTO vCOUNT -- 1
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ACT_OUT_SLANE_DT IS NULL
      AND ACT_OUT_SLANE_TM IS NULL
      AND BLANE_SIGNAL_DT IS NULL
      AND BLANE_SIGNAL_TM IS NULL
      AND LOCATION = 'S-LANE'
      AND SEQ = vMINSEQ;
            
      /*SELECT CYCLE_TIME INTO vCYCLE
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'KITTING'
      AND ZONE = 'S';*/
      
    vCYCLE_TIME := GET_TIME_PICKING(pMODEL, pTYPE, vDATE, vSHIFT, vTIME, NULL, vZONE);
    
    --GET MAX ORDER NO
    /*SELECT NVL(MAX(ORDER_NO),0) INTO vORDER
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE FACTORY_CD = pFACTORY_CD
    AND LINE_CD = pLINE_CD 
    AND MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND SHIFT = vSHIFT
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP;*/
    
    --??????? 1 daisha / 1 round ??? NVL(ORDER_NO,0)+1 //NVL(MAX(ORDER_NO),0)+1 ?????? ??????????????? vCNT_ORDER ???
    SELECT NVL(MAX(ORDER_NO),0)+1 INTO vORDER
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND SHIFT = vSHIFT
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND SEQ = (SELECT MAX(SEQ)
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE MODEL = pMODEL
    AND PLAN_DATE = vDATE
    --AND SHIFT = vSHIFT
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND LOCATION = 'IN KITTING');
    
    IF vORDER IS NULL THEN
      vORDER := 1;
    END IF;
    /*    
    SELECT COUNT(*) INTO vCNT_ORDER
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE FACTORY_CD = pFACTORY_CD
    AND LINE_CD = pLINE_CD 
    AND MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND SHIFT = vSHIFT
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND ORDER_NO = vORDER;
    
    IF vCNT_ORDER = 2 THEN
      vORDER := vORDER + 1;
    ELSIF vCNT_ORDER = 0 THEN
      vORDER := 1;
    END IF;*/
    
    /*SELECT COUNT(*) INTO vCNT_ASSY --> OLD
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE FACTORY_CD = pFACTORY_CD
    AND LINE_CD = pLINE_CD
    AND MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND LOCATION = 'ASSY'
    AND SEQ = (SELECT MIN(SEQ)
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE FACTORY_CD = pFACTORY_CD
    AND LINE_CD = pLINE_CD 
    AND MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND LOCATION = 'ASSY');*/
    
    SELECT COUNT(*) INTO vCNT_ASSY
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE FACTORY_CD = pFACTORY_CD
    AND LINE_CD = pLINE_CD
    AND MODEL = pMODEL
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND LOCATION = 'ASSY'
    AND SEQ = (SELECT MAX(SEQ)  --MAX -> IF 1 DAISHA = 1 ROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE FACTORY_CD = pFACTORY_CD
      AND LINE_CD = pLINE_CD
      AND MODEL = pMODEL
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND LOCATION = 'ASSY')
    AND PLAN_DATE = (SELECT MAX(PLAN_DATE)
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE FACTORY_CD = pFACTORY_CD
      AND LINE_CD = pLINE_CD
      AND MODEL = pMODEL
    AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND LOCATION = 'ASSY');
    
    IF vCNT_ASSY = 1 THEN
      UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'EMPTY'
      WHERE MODEL = pMODEL
      --AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND LOCATION = 'ASSY'
      AND SEQ = (SELECT MAX(SEQ)  --MAX -> IF 1 DAISHA = 1 ROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE FACTORY_CD = pFACTORY_CD
      AND LINE_CD = pLINE_CD
      AND MODEL = pMODEL
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND LOCATION = 'ASSY')
      AND PLAN_DATE = (SELECT MAX(PLAN_DATE)
        FROM T_SLANE_DAISHA_PROGRESSIVE
        WHERE FACTORY_CD = pFACTORY_CD
        AND LINE_CD = pLINE_CD
        AND MODEL = pMODEL
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND LOCATION = 'ASSY');
      COMMIT;
 
    END IF;
 
   IF vCOUNT = 1 THEN  --UPDATE ?????????
       UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'ASSY',
      BLANE_OUT_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),
      BLANE_OUT_TM = vTIME
      WHERE MODEL = pMODEL
      --AND SHIFT = vSHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND
      AND BLANE_OUT_DT IS NULL
      AND BLANE_OUT_TM IS NULL
      AND LOCATION <> 'EMPTY';
      COMMIT;
      pSLANE := 1; 
      
  /*    SELECT COUNT(*) INTO vCOUNT2
      FROM T_SLANE_PROGRESS_ORDER_DAISHA
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND SHIFT = vSHIFT
      AND DAISHA_GROUP = pGROUP
      AND ORDER_NO = pROUND
      AND ROUND = vORDER-1
      AND MIN_BLANE IS NULL;
      
      IF vCOUNT2 = 1 THEN
        UPDATE T_SLANE_PROGRESS_ORDER_DAISHA
        SET MIN_BLANE = vTIME
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        --AND SHIFT = vSHIFT
        AND DAISHA_GROUP = pGROUP
        AND ORDER_NO = pROUND
        AND ROUND = vORDER-1
        AND MIN_BLANE IS NULL;
        COMMIT;
          pSLANE := 2;
      ELSE
        UPDATE T_SLANE_PROGRESS_ORDER_DAISHA
        SET MIN_BLANE = vTIME,
        ROUND = 0,
        SHIFT = vSHIFT
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        --AND SHIFT = vSHIFT
        AND DAISHA_GROUP = pGROUP
        AND ORDER_NO = pROUND 
        AND MIN_BLANE IS NULL;
        COMMIT;
          pSLANE := 2;
      END IF;
  */    
      UPDATE T_SLANE_DAISHA_PROGRESSIVE -- UPDATE ???????????? + 1
      SET COLOR = pCOLOR,
          BLANE_SIGNAL_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
          BLANE_SIGNAL_TM = vTIME,
          PLAN_OUT_SLANE_DT = SUBSTR(vCYCLE_TIME,0,8),--vDATE * ?????????????? cycle time 
          PLAN_OUT_SLANE_TM = SUBSTR(vCYCLE_TIME,9,8), --to_char(sysdate + (.000694 * vCYCLE), 'HH24:MI:SS'),
          ORDER_NO = vORDER,
          SHIFT = vSHIFT
      WHERE MODEL = pMODEL
      --AND SHIFT = vSHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND SEQ = vMINSEQ;
      COMMIT;
        pSLANE := 3;
      
  /*      --GET DATA TO INSERT T_SLANE_PROGRESS_ORDER_DAISHA
      SELECT * INTO CUR1
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND SEQ = vMINSEQ;        
    
      INSERT INTO T_SLANE_PROGRESS_ORDER_DAISHA   (   FACTORY_CD,
                                                      PLAN_DATE,
                                                      MODEL,
                                                      SHIFT,
                                                      LINE_CD,
                                                      DAISHA_TYPE,
                                                      DAISHA_GROUP,
                                                      ROUND,
                                                      ORDER_NO,
                                                      PLAN_TIME,
                                                      ACTUAL_TIME,
                                                      DIFF,
                                                      MIN_BLANE)
                                            VALUES   (CUR1.FACTORY_CD,
                                                      vDATE,
                                                      CUR1.MODEL,
                                                      vSHIFT,
                                                      CUR1.LINE_CD,
                                                      CUR1.DAISHA_TYPE,
                                                      CUR1.DAISHA_GROUP,
                                                      vORDER ,
                                                      CUR1.ROUND ,
                                                      SUBSTR(vCYCLE_TIME,9,8),
                                                      --TO_CHAR(SYSDATE + (.000694 * vCYCLE), 'HH24:MI:SS'),
                                                      NULL,
                                                      NULL,
                                                      NULL);                                 
     
          COMMIT;
  */
          pSLANE := 4; 
                
    ELSE                                     
      pSLANE := 0; 
    END IF;
    
 END P_SIGNAL_MIN_KT;       
 ------------------------------------------------------------------------------ 
 PROCEDURE P_SIGNAL_IN_BLANE  (         pFACTORY_CD VARCHAR2,
                                        pMODEL      VARCHAR2,
                                        pLINE_CD    VARCHAR2,
                                        pTYPE       VARCHAR2,
                                        pGROUP      VARCHAR2,
                                        pROUND      NUMBER,
                                        pSLANE      OUT NUMBER) AS 
                                        
    vDATE    VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME    VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    --vTIME    VARCHAR2(8) := '00:00:00';
    vSHIFT   VARCHAR2(1);
    vCOUNT   NUMBER; 
    vSEQ     NUMBER;
    
    vCOUNT_OUT   NUMBER;
    vSEQ_OUT     NUMBER;
    --vZONE        VARCHAR2(1) := 'P';
    --vCYCLE_TIME  VARCHAR2(8);
    vMAXSEQ      NUMBER;
    vROUND       NUMBER;
    v_OUT        NUMBER;
    
 BEGIN
 
   IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
      --vDATE := '20180709';
   ELSE
      vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
      --vDATE := '20180807';
   END IF;
      
   IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
   ELSE
      vSHIFT := 'N';
   END IF;
   
   SELECT MAX(SEQ) INTO vSEQ_OUT 
   FROM T_SLANE_DAISHA_PROGRESSIVE 
   WHERE FACTORY_CD = pFACTORY_CD
   AND MODEL = pMODEL
   AND PLAN_DATE = vDATE
   AND LINE_CD = pLINE_CD
   AND DAISHA_TYPE = pTYPE
   AND DAISHA_GROUP = pGROUP
   AND ROUND = pROUND
   AND ACT_OUT_SLANE_DT IS NULL
   AND ACT_OUT_SLANE_TM IS NULL
   AND BLANE_IN_DT IS NULL
   AND BLANE_IN_TM IS NULL;
   
   SELECT COUNT(*) INTO vCOUNT_OUT 
   FROM T_SLANE_DAISHA_PROGRESSIVE 
   WHERE FACTORY_CD = pFACTORY_CD
   AND MODEL = pMODEL
   AND PLAN_DATE = vDATE
   AND LINE_CD = pLINE_CD
   AND DAISHA_TYPE = pTYPE
   AND DAISHA_GROUP = pGROUP
   AND ROUND = pROUND
   AND SEQ = vSEQ_OUT
   AND ACT_OUT_SLANE_DT IS NULL
   AND ACT_OUT_SLANE_TM IS NULL
   AND BLANE_IN_DT IS NULL
   AND BLANE_IN_TM IS NULL;
   
   IF vCOUNT_OUT = 1 THEN
     P_FIX_STORE_OUT(pFACTORY_CD, pMODEL, pLINE_CD, pTYPE, pGROUP, pROUND,v_OUT);
     pSLANE := v_OUT;
     
   ELSE
     SELECT MAX(SEQ) INTO vSEQ 
     FROM T_SLANE_DAISHA_PROGRESSIVE 
     WHERE FACTORY_CD = pFACTORY_CD
     AND MODEL = pMODEL
     AND PLAN_DATE = vDATE
     AND LINE_CD = pLINE_CD
     AND DAISHA_TYPE = pTYPE
     AND DAISHA_GROUP = pGROUP
     AND ACT_OUT_SLANE_DT IS NOT NULL
     AND ACT_OUT_SLANE_TM IS NOT NULL
     AND BLANE_IN_DT IS NULL
     AND BLANE_IN_TM IS NULL
     AND ROUND = pROUND;
     
     SELECT COUNT(*) INTO vCOUNT 
     FROM T_SLANE_DAISHA_PROGRESSIVE 
     WHERE FACTORY_CD = pFACTORY_CD
     AND PLAN_DATE = vDATE
     AND MODEL = pMODEL
     AND LINE_CD = pLINE_CD
     AND DAISHA_TYPE = pTYPE
     AND DAISHA_GROUP = pGROUP
     AND ACT_OUT_SLANE_DT IS NOT NULL
     AND ACT_OUT_SLANE_TM IS NOT NULL
     AND BLANE_IN_DT IS NULL
     AND BLANE_IN_TM IS NULL
     --AND LOCATION = 'S-LANE'
     AND SEQ = vSEQ
     AND ROUND = pROUND;
          
      IF vCOUNT = 1 THEN
      UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'IN B-LANE',
          BLANE_IN_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
          BLANE_IN_TM = vTIME,
          SHIFT = vSHIFT
      WHERE MODEL = pMODEL
      --AND SHIFT = vSHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND
      AND SEQ = vSEQ 
      AND BLANE_IN_DT IS NULL
      AND BLANE_IN_TM IS NULL
      AND ACT_OUT_SLANE_DT IS NOT NULL
      AND ACT_OUT_SLANE_TM IS NOT NULL;
      COMMIT;
        pSLANE := 1;
        
        INSERT INTO T_SLANE_TEMP_PROCESS   (   MODEL,
                                                 PLAN_DATE,
                                                 SHIFT,
                                                 LINE_CD,
                                                 DAISHA_TYPE,
                                                 DAISHA_GROUP,
                                                 SEQ,
                                                 ROUND,
                                                 DESTINATION,
                                                 COLOR,
                                                 LOCATION,
                                                 PROCESS_ID,
                                                 PROCESS_NAME,
                                                 STATUS,
                                                 TIME)
                                   VALUES    (   pMODEL,
                                                 vDATE,
                                                 vSHIFT,
                                                 pLINE_CD,
                                                 pTYPE,
                                                 pGROUP,
                                                 vSEQ,
                                                 pROUND,
                                                 'KITTING',
                                                 NULL,
                                                 'IN B-LANE',
                                                 5,
                                                 'SIGNAL_IN_BLANE',
                                                 'OK',
                                                 vTIME);                                 
         
              COMMIT;
                pSLANE := 2;
        ELSE                                     
          pSLANE := 0; 
        END IF;
        
    END IF;
    
 END P_SIGNAL_IN_BLANE;
 ------------------------------------------------------------------------------
 PROCEDURE P_SIGNAL_OUT_BLANE (         pFACTORY_CD VARCHAR2,
                                        pMODEL      VARCHAR2,
                                        pLINE_CD    VARCHAR2,
                                        pTYPE       VARCHAR2,
                                        pGROUP      VARCHAR2,
                                        pROUND      NUMBER,
                                        pCOLOR      VARCHAR2,
                                        pDES        VARCHAR2,
                                        pSLANE      OUT NUMBER) AS 
                                        
    vDATE       VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME       VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    --vTIME       VARCHAR2(8) := '00:00:00' ;
    vSHIFT      VARCHAR2(1);
    
    vMINSEQ     NUMBER;
    vCOUNT      NUMBER; 
    vCOUNT2     NUMBER;
    vCNT_ORDER  NUMBER;
    vORDER      NUMBER;
    vCYCLE      T_SLANE_DELIVERY_CYCLE_MASTER.CYCLE_TIME%TYPE;
    CUR1        T_SLANE_DAISHA_PROGRESSIVE%ROWTYPE;
   
    vCNT_ASSY   NUMBER;
    vZONE       VARCHAR2(1) := 'S';
    vCYCLE_TIME VARCHAR2(16);
    vROUND      NUMBER;
    
 BEGIN
 
    IF vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
      --vDATE := '20180709';
    ELSE
      vDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
      --vDATE := '20180807';
    END IF;
      
    IF vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
    ELSE
      vSHIFT := 'N';
    END IF;
    
    --GET MIN SEQ  
      SELECT MIN(SEQ) INTO vMINSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      --AND ROUND = pROUND 
      AND ACT_OUT_SLANE_DT IS NULL
      AND ACT_OUT_SLANE_TM IS NULL
      AND BLANE_SIGNAL_DT IS NULL
      AND BLANE_SIGNAL_TM IS NULL
      AND LOCATION = 'S-LANE';
 
    IF vMINSEQ IS NULL THEN
      vMINSEQ := 0;
    END IF;
    
    INSERT INTO T_SLANE_TEMP_PROCESS   (   MODEL,
                                             PLAN_DATE,
                                             SHIFT,
                                             LINE_CD,
                                             DAISHA_TYPE,
                                             DAISHA_GROUP,
                                             SEQ,
                                             ROUND,
                                             DESTINATION,
                                             COLOR,
                                             LOCATION,
                                             PROCESS_ID,
                                             PROCESS_NAME,
                                             STATUS,
                                             TIME)
                               VALUES    (   pMODEL,
                                             vDATE,
                                             vSHIFT,
                                             pLINE_CD,
                                             pTYPE,
                                             pGROUP,
                                             vMINSEQ,
                                             pROUND,
                                             'KITTING',
                                             NULL,
                                             'ASSY',
                                             6,
                                             'SIGNAL_OUT_BLANE',
                                             'OK',
                                             vTIME);                                 
          COMMIT;
    -- GET Cycle Time OUT KITTING
    /*  SELECT CYCLE_TIME INTO vCYCLE
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'KITTING'
      AND ZONE = 'S';*/
           
   SELECT COUNT(*) INTO vCOUNT 
   FROM T_SLANE_DAISHA_PROGRESSIVE 
   WHERE FACTORY_CD = pFACTORY_CD
   AND MODEL = pMODEL
   AND PLAN_DATE = vDATE
   AND LINE_CD = pLINE_CD
   AND DAISHA_TYPE = pTYPE
   AND DAISHA_GROUP = pGROUP
   AND ACT_OUT_SLANE_DT IS NULL
   AND ACT_OUT_SLANE_TM IS NULL
   AND BLANE_IN_DT IS NULL
   AND BLANE_IN_TM IS NULL
   AND LOCATION = 'S-LANE'
   AND SEQ = vMINSEQ;
   --AND ROUND = pROUND;
     vCYCLE_TIME := GET_TIME_PICKING(pMODEL, pTYPE, vDATE, vSHIFT, vTIME, NULL, vZONE);

   --GET MAX ROUND FOR INSERT NEXT ROUND
      /*SELECT NVL(MAX(ORDER_NO),0)+1 INTO vORDER -- +1
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND SHIFT = vSHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP;*/
      SELECT NVL(MAX(ORDER_NO),0)+1 INTO vORDER
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND SHIFT = vSHIFT
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND SEQ = (SELECT MAX(SEQ)
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND SHIFT = vSHIFT
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND LOCATION = 'IN B-LANE');    
      
      /*IF vORDER IS NULL THEN -- SNP 20 = 1 DAISHA = 1 ROUND
        vORDER := 1;
      ELSE 
        vORDER := vORDER + 1;
      END IF;  */
      
    SELECT COUNT(*) INTO vCNT_ASSY
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE FACTORY_CD = pFACTORY_CD
    AND LINE_CD = pLINE_CD
    AND MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND LOCATION = 'ASSY'
    AND SEQ = (SELECT MIN(SEQ)
    FROM T_SLANE_DAISHA_PROGRESSIVE
    WHERE FACTORY_CD = pFACTORY_CD
    AND LINE_CD = pLINE_CD 
    AND MODEL = pMODEL
    AND PLAN_DATE = vDATE
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    AND LOCATION = 'ASSY');
    
    IF vCNT_ASSY = 1 THEN
      UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'EMPTY'
      WHERE MODEL = pMODEL
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND LOCATION = 'ASSY'
      AND SEQ = (SELECT MIN(SEQ)
        FROM T_SLANE_DAISHA_PROGRESSIVE
        WHERE FACTORY_CD = pFACTORY_CD
        AND LINE_CD = pLINE_CD 
        AND MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND LOCATION = 'ASSY');
      COMMIT;
 
    END IF;
            
   IF vCOUNT = 1 THEN
      UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'ASSY',
      BLANE_OUT_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
      BLANE_OUT_TM = vTIME
      WHERE MODEL = pMODEL
      --AND SHIFT = vSHIFT
      AND PLAN_DATE = vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND ROUND = pROUND
      AND BLANE_OUT_DT IS NULL
      AND BLANE_OUT_TM IS NULL;
      --AND LOCATION <> 'EMPTY';
    COMMIT;
      pSLANE := 1; 
        
   /*     SELECT COUNT(*) INTO vCOUNT2
        FROM T_SLANE_PROGRESS_ORDER_DAISHA
        WHERE MODEL = pMODEL
        AND PLAN_DATE = vDATE
        AND SHIFT = vSHIFT
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND ORDER_NO = pROUND
        AND ROUND = vORDER-1
        AND MIN_BLANE IS NULL;
      
        IF vCOUNT2 = 1 THEN
          UPDATE T_SLANE_PROGRESS_ORDER_DAISHA  --UPDATE ?????????
          SET MIN_BLANE = vTIME
          WHERE MODEL = pMODEL
          AND PLAN_DATE = vDATE
          --AND SHIFT = vSHIFT
          AND LINE_CD = pLINE_CD
          AND DAISHA_TYPE = pTYPE
          AND DAISHA_GROUP = pGROUP
          AND ORDER_NO = pROUND 
          AND ROUND = vORDER-1
          AND MIN_BLANE IS NULL;
          COMMIT;
            pSLANE := 2; 
        ELSE
          UPDATE T_SLANE_PROGRESS_ORDER_DAISHA  --INITIAL STOCK NIGHT SHIFT
          SET MIN_BLANE = vTIME,
          ROUND = 0,
          SHIFT = vSHIFT
          WHERE MODEL = pMODEL
          AND PLAN_DATE = vDATE
          --AND SHIFT = vSHIFT
          AND LINE_CD = pLINE_CD
          AND DAISHA_TYPE = pTYPE
          AND DAISHA_GROUP = pGROUP
          AND ORDER_NO = pROUND 
          AND MIN_BLANE IS NULL;
          COMMIT;
            pSLANE := 2;
      END IF;
   */   
        UPDATE T_SLANE_DAISHA_PROGRESSIVE
        SET COLOR = pCOLOR,
            DESTINATION = pDES,
            BLANE_SIGNAL_DT = TO_CHAR(SYSDATE,'YYYYMMDD'),--vDATE,
            BLANE_SIGNAL_TM = vTIME,
            PLAN_OUT_SLANE_DT = SUBSTR(vCYCLE_TIME,0,8),--vDATE,
            PLAN_OUT_SLANE_TM = SUBSTR(vCYCLE_TIME,9,8), --to_char(sysdate + (.000694 * vCYCLE), 'HH24:MI:SS'),
            ORDER_NO = vORDER,
            SHIFT = vSHIFT
        WHERE MODEL = pMODEL
        --AND SHIFT = vSHIFT
        AND PLAN_DATE = vDATE
        AND LINE_CD = pLINE_CD
        AND DAISHA_TYPE = pTYPE
        AND DAISHA_GROUP = pGROUP
        AND SEQ = vMINSEQ;
        COMMIT;
          pSLANE := 3; 
                       
   /*         SELECT ROUND INTO vROUND--ORDER_NO
            FROM T_SLANE_DAISHA_PROGRESSIVE
            WHERE MODEL = pMODEL
            AND SHIFT = vSHIFT
            AND PLAN_DATE = vDATE
            AND LINE_CD = pLINE_CD
            AND DAISHA_TYPE = pTYPE
            AND DAISHA_GROUP = pGROUP
            AND SEQ = vMINSEQ;
      
          INSERT INTO T_SLANE_PROGRESS_ORDER_DAISHA  (FACTORY_CD,
                                                      PLAN_DATE,
                                                      MODEL,
                                                      SHIFT,
                                                      LINE_CD,
                                                      DAISHA_TYPE,
                                                      DAISHA_GROUP,
                                                      ROUND,
                                                      ORDER_NO,
                                                      PLAN_TIME,
                                                      ACTUAL_TIME,
                                                      DIFF,
                                                      MIN_BLANE)
                                            VALUES   (pFACTORY_CD,
                                                      vDATE,
                                                      pMODEL,
                                                      vSHIFT,
                                                      pLINE_CD,
                                                      pTYPE,
                                                      pGROUP,
                                                      vORDER,
                                                      vROUND,
                                                      SUBSTR(vCYCLE_TIME,9,8),
                                                      --to_char(sysdate + (.000694 * vCYCLE), 'HH24:MI:SS'),
                                                      NULL,
                                                      NULL,
                                                      NULL);                                 
         
          COMMIT;
    */
          pSLANE := 4; 
        
    ELSE                                     
      pSLANE := 0; 
    END IF;
    
      EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
        pSLANE := 9;
        
 END P_SIGNAL_OUT_BLANE;          
 ------------------------------------------------------------------------------ 
 
/*FUNCTION GET_BREAK_TIME (pSEQ VARCHAR2,p_FACTORY_CD VARCHAR2,p_CAL_DATE VARCHAR2,p_SHIFT VARCHAR2, p_WORKSHIFT_CD VARCHAR2,p_OVERTIME_CD VARCHAR2,p_CURRENT_DATE VARCHAR2,p_CAL_TIME VARCHAR2) RETURN NUMBER IS

    W_BREAK_TIME        NUMBER(4,0) := NULL;
    W_BREAK2            NUMBER(4,0);
    W_BREAK_TIME_OT     NUMBER(4,0);
    W_CAL_TIME32        VARCHAR(5) := SUBSTR(p_CAL_TIME,1,2)||':'||SUBSTR(p_CAL_TIME,3,2);
    W_CAL_TIME24        VARCHAR(5) := SUBSTR(p_CAL_TIME,1,2)||':'||SUBSTR(p_CAL_TIME,3,2);
    W_OVERTIME_BEGIN24  VARCHAR(5);
    W_OVERTIME_END24    VARCHAR(5);
    W_OVERTIME_BEGIN32  VARCHAR(5);
    W_OVERTIME_END32    VARCHAR(5);
    W_START_SHIFT       VARCHAR(8);
    W_END_SHIFT         VARCHAR(8);
    
    REC32   V_SLANE_DNM_WORKSHIFT_CD;
    REC24   V_SLANE_DNM_WORKSHIFT_CD;
    
  BEGIN
    BEGIN --Get workshift time format 32Hr. for compare condition
      SELECT SEQ,FACTORY_CD,WORKSHIFT_CD,SHIFT,
              CASE WHEN substr(WORK1_BEGIN,0,2)||substr(WORK1_BEGIN,4,2) BETWEEN '0000' AND '0759' THEN SUBSTR(WORK1_BEGIN,1,2)+ 24||':'||SUBSTR(WORK1_BEGIN,4,2) ELSE WORK1_BEGIN END AS WORK1_BEGIN,
              CASE WHEN substr(WORK1_END,0,2)||substr(WORK1_END,4,2) BETWEEN '0000' AND '0759' THEN SUBSTR(WORK1_END,1,2)+ 24||':'||SUBSTR(WORK1_END,4,2) ELSE WORK1_END END AS WORK1_END,
              CASE WHEN substr(BREAK1_BEGIN,0,2)||substr(BREAK1_BEGIN,4,2) BETWEEN '0000' AND '0759' THEN SUBSTR(BREAK1_BEGIN,1,2)+ 24||':'||SUBSTR(BREAK1_BEGIN,4,2) ELSE BREAK1_BEGIN END AS BREAK1_BEGIN,
              CASE WHEN substr(BREAK1_END,0,2)||substr(BREAK1_END,4,2) BETWEEN '0000' AND '0759' THEN SUBSTR(BREAK1_END,1,2)+ 24||':'||SUBSTR(BREAK1_END,4,2) ELSE BREAK1_END END AS BREAK1_END,
              CASE WHEN substr(WORK2_BEGIN,0,2)||substr(WORK2_BEGIN,4,2) BETWEEN '0000' AND '0759' THEN SUBSTR(WORK2_BEGIN,1,2)+ 24||':'||SUBSTR(WORK2_BEGIN,4,2) ELSE WORK2_BEGIN END AS WORK2_BEGIN,
              CASE WHEN substr(WORK2_END,0,2)||substr(WORK2_END,4,2) BETWEEN '0000' AND '0759' THEN SUBSTR(WORK2_END,1,2)+ 24||':'||SUBSTR(WORK2_END,4,2) ELSE WORK2_END END AS WORK2_END,
              CASE WHEN substr(BREAK2_BEGIN,0,2)||substr(BREAK2_BEGIN,4,2) BETWEEN '0000' AND '0759' THEN SUBSTR(BREAK2_BEGIN,1,2)+ 24||':'||SUBSTR(BREAK2_BEGIN,4,2) ELSE BREAK2_BEGIN END AS BREAK2_BEGIN,
              CASE WHEN substr(BREAK2_END,0,2)||substr(BREAK2_END,4,2) BETWEEN '0000' AND '0759' THEN SUBSTR(BREAK2_END,1,2)+ 24||':'||SUBSTR(BREAK2_END,4,2) ELSE BREAK2_END END AS BREAK2_END,
              CASE WHEN substr(WORK3_BEGIN,0,2)||substr(WORK3_BEGIN,4,2) BETWEEN '0000' AND '0759' THEN SUBSTR(WORK3_BEGIN,1,2)+ 24||':'||SUBSTR(WORK3_BEGIN,4,2) ELSE WORK3_BEGIN END AS WORK3_BEGIN,
              CASE WHEN substr(WORK3_END,0,2)||substr(WORK3_END,4,2) BETWEEN '0000' AND '0759' THEN SUBSTR(WORK3_END,1,2)+ 24||':'||SUBSTR(WORK3_END,4,2) ELSE WORK3_END END AS WORK3_END,
              CASE WHEN substr(BREAK3_BEGIN,0,2)||substr(BREAK3_BEGIN,4,2) BETWEEN '0000' AND '0759' THEN SUBSTR(BREAK3_BEGIN,1,2)+ 24||':'||SUBSTR(BREAK3_BEGIN,4,2) ELSE BREAK3_BEGIN END AS BREAK3_BEGIN,
              CASE WHEN substr(BREAK3_END,0,2)||substr(BREAK3_END,4,2) BETWEEN '0000' AND '0759' THEN SUBSTR(BREAK3_END,1,2)+ 24||':'||SUBSTR(BREAK3_END,4,2) ELSE BREAK3_END END AS BREAK3_END,
              CASE WHEN substr(WORK4_BEGIN,0,2)||substr(WORK4_BEGIN,4,2) BETWEEN '0000' AND '0759' THEN SUBSTR(WORK4_BEGIN,1,2)+ 24||':'||SUBSTR(WORK4_BEGIN,4,2) ELSE WORK4_BEGIN END AS WORK4_BEGIN,
              CASE WHEN substr(WORK4_END,0,2)||substr(WORK4_END,4,2) BETWEEN '0000' AND '0759' THEN SUBSTR(WORK4_END,1,2)+ 24||':'||SUBSTR(WORK4_END,4,2) ELSE WORK4_END END AS WORK4_END,
            WORKINGTIME_MIN,CREATE_DATE,CREATE_BY,UPDATE_DATE,UPDATE_BY,HISTORY_ENTRY_DATE,HISTORY_ENTRY_TIME,HISTORY_PGM_ID
      INTO REC32
      FROM V_SLANE_DNM_WORKSHIFT_CD
      WHERE SEQ        = pSEQ
        AND FACTORY_CD = p_FACTORY_CD
        AND WORKSHIFT_CD = p_WORKSHIFT_CD
        AND SHIFT        = p_SHIFT ;
    END;
    
    BEGIN --Get workshift time format 24Hr. for calculate
      SELECT * INTO REC24
      FROM T_PRD_PLAN_A3_WRKSHF_CD_RT_LG@FROM_EUC_NPIS 
      WHERE SEQ        = pSEQ
        AND FACTORY_CD = p_FACTORY_CD
        AND WORKSHIFT_CD = p_WORKSHIFT_CD
        AND SHIFT        = p_SHIFT ;
    END;
        
        IF p_CAL_TIME > '2359' THEN 
           W_CAL_TIME24 := SUBSTR(LPAD(p_CAL_TIME - 2400,4,'0'),1,2)||':'||SUBSTR(p_CAL_TIME,3,2);
        END IF;
          
        IF W_CAL_TIME32 BETWEEN REC32.WORK1_BEGIN AND REC32.WORK1_END THEN--1
          W_BREAK_TIME := 0;
          
        ELSIF W_CAL_TIME32 BETWEEN REC32.BREAK1_BEGIN AND REC32.BREAK1_END THEN--2
          W_BREAK_TIME := (TO_DATE(W_CAL_TIME24,'HH24:MI') - TO_DATE(REC24.BREAK1_BEGIN,'HH24:MI'))*1440 ;
          
        ELSIF W_CAL_TIME32 BETWEEN REC32.WORK2_BEGIN AND REC32.WORK2_END THEN--3
          W_BREAK_TIME := (TO_DATE(REC24.BREAK1_END,'HH24:MI') - TO_DATE(REC24.BREAK1_BEGIN,'HH24:MI'))*1440 ;
          
        ELSIF W_CAL_TIME32 BETWEEN REC32.BREAK2_BEGIN AND REC32.BREAK2_END THEN--4
          W_BREAK_TIME := (TO_DATE(REC24.BREAK1_END,'HH24:MI') - TO_DATE(REC24.BREAK1_BEGIN,'HH24:MI'))*1440 ;
          W_BREAK_TIME := W_BREAK_TIME + ((TO_DATE(W_CAL_TIME24,'HH24:MI') - TO_DATE(REC24.BREAK2_BEGIN,'HH24:MI'))*1440) ;
          
        ELSIF W_CAL_TIME32 BETWEEN REC32.WORK3_BEGIN AND REC32.WORK3_END THEN--5  
          W_BREAK_TIME := (TO_DATE(REC24.BREAK1_END,'HH24:MI') - TO_DATE(REC24.BREAK1_BEGIN,'HH24:MI'))*1440 ;
          W_BREAK_TIME := W_BREAK_TIME + ((TO_DATE(REC24.BREAK2_END,'HH24:MI') - TO_DATE(REC24.BREAK2_BEGIN,'HH24:MI'))*1440) ;
        
        ELSIF W_CAL_TIME32 BETWEEN REC32.BREAK3_BEGIN AND REC32.BREAK3_END THEN--6  
          W_BREAK_TIME := (TO_DATE(REC24.BREAK1_END,'HH24:MI') - TO_DATE(REC24.BREAK1_BEGIN,'HH24:MI'))*1440 ;
          W_BREAK_TIME := W_BREAK_TIME + ((TO_DATE(REC24.BREAK2_END,'HH24:MI') - TO_DATE(REC24.BREAK2_BEGIN,'HH24:MI'))*1440) ;
          W_BREAK_TIME := W_BREAK_TIME + ((TO_DATE(W_CAL_TIME24,'HH24:MI') - TO_DATE(REC24.BREAK3_BEGIN,'HH24:MI'))*1440) ;
        
        ELSIF W_CAL_TIME32 BETWEEN REC32.WORK4_BEGIN AND REC32.WORK4_END THEN--7  
          W_BREAK_TIME := (TO_DATE(REC24.BREAK1_END,'HH24:MI') - TO_DATE(REC24.BREAK1_BEGIN,'HH24:MI'))*1440 ;
          W_BREAK_TIME := W_BREAK_TIME + ((TO_DATE(REC24.BREAK2_END,'HH24:MI') - TO_DATE(REC24.BREAK2_BEGIN,'HH24:MI'))*1440) ;
          W_BREAK_TIME := W_BREAK_TIME + ((TO_DATE(REC24.BREAK3_END,'HH24:MI') - TO_DATE(REC24.BREAK3_BEGIN,'HH24:MI'))*1440) ;
          
        ELSIF W_CAL_TIME32 > REC32.WORK4_END THEN
          BEGIN
           SELECT OVERTIME_BEGIN ,OVERTIME_END ,
                  CASE WHEN substr(OVERTIME_BEGIN,0,2)||substr(OVERTIME_BEGIN,4,2) BETWEEN '0000' AND '0759' THEN SUBSTR(OVERTIME_BEGIN,1,2)+ 24||':'||SUBSTR(OVERTIME_BEGIN,4,2) ELSE OVERTIME_BEGIN END AS OVERTIME_BEGIN32,
                  CASE WHEN substr(OVERTIME_END,0,2)||substr(OVERTIME_END,4,2) BETWEEN '0000' AND '0759' THEN SUBSTR(OVERTIME_END,1,2)+ 24||':'||SUBSTR(OVERTIME_END,4,2) ELSE OVERTIME_END END AS OVERTIME_END32
             INTO W_OVERTIME_BEGIN24,W_OVERTIME_END24 ,W_OVERTIME_BEGIN32,W_OVERTIME_END32  
             FROM T_PRD_PLAN_A3_OVERTIMECD_RT_LG@FROM_EUC_NPIS
            WHERE SEQ         = pSEQ
              AND FACTORY_CD  = p_FACTORY_CD
              AND OVERTIME_CD = p_OVERTIME_CD
              AND SHIFT       = p_SHIFT;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              W_BREAK_TIME := (TO_DATE(REC24.BREAK1_END,'HH24:MI') - TO_DATE(REC24.BREAK1_BEGIN,'HH24:MI'))*1440 ;
              W_BREAK_TIME := W_BREAK_TIME + ((TO_DATE(REC24.BREAK2_END,'HH24:MI') - TO_DATE(REC24.BREAK2_BEGIN,'HH24:MI'))*1440) ;
              W_BREAK_TIME := W_BREAK_TIME + ((TO_DATE(REC24.BREAK3_END,'HH24:MI') - TO_DATE(REC24.BREAK3_BEGIN,'HH24:MI'))*1440) ;           
              W_BREAK_TIME := W_BREAK_TIME + ((TO_DATE(W_CAL_TIME24,'HH24:MI') - TO_DATE(REC24.WORK4_END,'HH24:MI'))*1440) ;
              IF W_BREAK_TIME < 0 THEN
                W_BREAK_TIME := W_BREAK_TIME+1440; --# +1440 because convert time to value+ 
              END IF;
              RETURN W_BREAK_TIME;
          END;
          
          IF W_CAL_TIME32  BETWEEN REC32.WORK4_END AND W_OVERTIME_BEGIN32 THEN
            W_BREAK_TIME_OT := (TO_DATE(W_CAL_TIME24,'HH24:MI') - TO_DATE(REC24.WORK4_END,'HH24:MI'))*1440;
            
          ELSIF W_CAL_TIME32  BETWEEN W_OVERTIME_BEGIN32 AND W_OVERTIME_END32  THEN
            W_BREAK_TIME_OT := (TO_DATE(W_OVERTIME_BEGIN24,'HH24:MI') - TO_DATE(REC24.WORK4_END,'HH24:MI'))*1440;
            
          ELSIF W_CAL_TIME32 > W_OVERTIME_END32 THEN
            W_BREAK_TIME_OT := (TO_DATE(W_OVERTIME_BEGIN24,'HH24:MI') - TO_DATE(REC24.WORK4_END,'HH24:MI'))*1440;
            W_BREAK_TIME_OT := W_BREAK_TIME_OT + (TO_DATE(W_CAL_TIME24,'HH24:MI') - TO_DATE(W_OVERTIME_END24,'HH24:MI'))*1440;
          END IF;
          
          W_BREAK_TIME := (TO_DATE(REC24.BREAK1_END,'HH24:MI') - TO_DATE(REC24.BREAK1_BEGIN,'HH24:MI'))*1440 ;
          W_BREAK_TIME := W_BREAK_TIME + ((TO_DATE(REC24.BREAK2_END,'HH24:MI') - TO_DATE(REC24.BREAK2_BEGIN,'HH24:MI'))*1440) ;
          W_BREAK_TIME := W_BREAK_TIME + ((TO_DATE(REC24.BREAK3_END,'HH24:MI') - TO_DATE(REC24.BREAK3_BEGIN,'HH24:MI'))*1440) ;
          W_BREAK_TIME := W_BREAK_TIME + W_BREAK_TIME_OT ;
        END IF;
        
    IF W_BREAK_TIME < 0 THEN
      W_BREAK_TIME := W_BREAK_TIME+1440; --# +1440 because convert time to value+ 
    END IF;
    RETURN W_BREAK_TIME;
  END;*/
END PG_SLANE_SIGNAL;

/
--------------------------------------------------------
--  DDL for Package Body STATUS_DAISHA
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."STATUS_DAISHA" AS

  PROCEDURE P_STORE_OUT_SLANE_KT (pFACTORY_CD VARCHAR2,
                                  pMODEL      VARCHAR2,
                                  pLINE_CD    VARCHAR2,
                                  pTYPE       VARCHAR2,
                                  pGROUP      VARCHAR2,
                                  pROUND      VARCHAR2) AS
  
  vDATE VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
  vTIME VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MM:SS');
  vSEQ  T_SLANE_DAISHA_PROGRESSIVE.SEQ%TYPE;
  vROUND  T_SLANE_DAISHA_PROGRESSIVE.ROUND%TYPE;
  vCYCLE  T_SLANE_DELIVERY_CYCLE_MASTER.CYCLE_TIME%TYPE;
  vSHIFT  T_SLANE_DAISHA_PROGRESSIVE.SHIFT%TYPE;
  BEGIN
    
    UPDATE T_SLANE_DAISHA_PROGRESSIVE
    SET LOCATION = 'KITTING',
        ACT_OUT_SLANE_DT = vDATE,
        ACT_OUT_SLANE_TM = vTIME
    WHERE MODEL = pMODEL
    AND PLAN_DATE = '20180329' --vDATE
    AND LINE_CD = pLINE_CD
    AND DAISHA_TYPE = pTYPE
    AND DAISHA_GROUP = pGROUP
    --AND ROUND = pROUND -- Check ???
    AND PLAN_OUT_SLANE_DT IS NOT NULL
    AND PLAN_OUT_SLANE_TM IS NOT NULL;
    
    COMMIT;
      -- GET Max SEQ
      SELECT MAX(SEQ) +1 INTO vSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = '20180329' --vDATE
      AND LINE_CD = pLINE_CD; --pLINE_CD
      
      -- GET Max ROUND
      SELECT MAX(ROUND) +1 INTO vROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = '20180329' --vDATE
      AND LINE_CD = pLINE_CD
      AND SEQ = vSEQ-1; 

      -- GET Cycle Time PICKING Of KITTING
      SELECT CYCLE_TIME INTO vCYCLE
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'KITTING'
      AND ZONE = 'P';
      
      IF vTIME > '08:00:00' THEN
        vSHIFT := 'D';
      ELSE
        vSHIFT := 'N';
      END IF;
        BEGIN
          INSERT INTO T_SLANE_DAISHA_PROGRESSIVE (FACTORY_CD,
                                                  MODEL,
                                                  PLAN_DATE,
                                                  SHIFT,
                                                  LINE_CD,
                                                  CELL_NAME,
                                                  DAISHA_TYPE,
                                                  DAISHA_GROUP,
                                                  SEQ,
                                                  ROUND,
                                                  MERCHANDISE_CD,
                                                  DESTINATION,
                                                  COLOR,
                                                  LOCATION,
                                                  PLAN_PICK_DT,
                                                  PLAN_PICK_TM,
                                                  ACT_PICK_DT,
                                                  ACT_PICK_TM,
                                                  SLANE_IN_DT,
                                                  SLANE_IN_TM,
                                                  BLANE_SIGNAL_DT,
                                                  BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT,
                                                  PLAN_OUT_SLANE_TM,
                                                  ACT_OUT_SLANE_DT,
                                                  ACT_OUT_SLANE_TM,
                                                  BLANE_IN_DT,
                                                  BLANE_IN_TM)
                                        VALUES    (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  vSHIFT,
                                                  pLINE_CD,
                                                  'ALL',
                                                  pTYPE,
                                                  pGROUP,
                                                  vSEQ,
                                                  2,
                                                  'COMMON',
                                                  'KITTING',
                                                  NULL,
                                                  NULL,
                                                  vDATE,
                                                  'TEST',
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL);                                 
                                                  
        END;
        COMMIT;

  END P_STORE_OUT_SLANE_KT;
  
  PROCEDURE P_STORE_OUT_SLANE (pFACTORY_CD VARCHAR2,
                               pMODEL      VARCHAR2,
                               pLINE_CD    VARCHAR2,
                               pTYPE       VARCHAR2,
                               pGROUP      VARCHAR2,
                               pROUND      VARCHAR2) AS
  
  vDATE   VARCHAR2(8) := TO_CHAR(SYSDATE,'YYYYMMDD');
  vTIME   VARCHAR2(8) := TO_CHAR(SYSDATE,'HH24:MM:SS');
  vSEQ    T_SLANE_DAISHA_PROGRESSIVE.SEQ%TYPE;
  vROUND  T_SLANE_DAISHA_PROGRESSIVE.ROUND%TYPE;
  vCYCLE  T_SLANE_DELIVERY_CYCLE_MASTER.CYCLE_TIME%TYPE;
  vSHIFT  T_SLANE_DAISHA_PROGRESSIVE.SHIFT%TYPE;
  CUR1    T_SLANE_PRODUCTION_PLAN_DAISHA%ROWTYPE;
    BEGIN
    
      UPDATE T_SLANE_DAISHA_PROGRESSIVE
      SET LOCATION = 'B-LANE',
          ACT_OUT_SLANE_DT = vDATE,
          ACT_OUT_SLANE_TM = vTIME
      WHERE MODEL = pMODEL
      AND PLAN_DATE = '20180329' --vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      --AND ROUND = pROUND -- Check ???
      AND PLAN_OUT_SLANE_DT IS NOT NULL
      AND PLAN_OUT_SLANE_TM IS NOT NULL;
    
      COMMIT;
      -- GET Max SEQ
      SELECT MAX(SEQ) +1 INTO vSEQ
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = '20180329' --vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP; 
      
      -- GET Max ROUND
      SELECT MAX(ROUND) +1 INTO vROUND
      FROM T_SLANE_DAISHA_PROGRESSIVE
      WHERE MODEL = pMODEL
      AND PLAN_DATE = '20180329' --vDATE
      AND LINE_CD = pLINE_CD
      AND DAISHA_TYPE = pTYPE
      AND DAISHA_GROUP = pGROUP
      AND SEQ = vSEQ-1; 

      -- GET Cycle Time PICKING Of KITTING
      SELECT CYCLE_TIME INTO vCYCLE
      FROM T_SLANE_DELIVERY_CYCLE_MASTER
      WHERE MODEL = pMODEL
      AND TYPE = 'BLANE'
      AND ZONE = 'P';
      
      SELECT * INTO CUR1
      FROM T_SLANE_PRODUCTION_PLAN_DAISHA
      WHERE MODEL = pMODEL
      AND PLAN_DATE = '20180329' --vDATE
      AND LINE_CD = pLINE_CD
      AND SEQ = vSEQ;
      
        BEGIN
          INSERT INTO T_SLANE_DAISHA_PROGRESSIVE (FACTORY_CD,
                                                  MODEL,
                                                  PLAN_DATE,
                                                  SHIFT,
                                                  LINE_CD,
                                                  CELL_NAME,
                                                  DAISHA_TYPE,
                                                  DAISHA_GROUP,
                                                  SEQ,
                                                  ROUND,
                                                  MERCHANDISE_CD,
                                                  DESTINATION,
                                                  COLOR,
                                                  LOCATION,
                                                  PLAN_PICK_DT,
                                                  PLAN_PICK_TM,
                                                  ACT_PICK_DT,
                                                  ACT_PICK_TM,
                                                  SLANE_IN_DT,
                                                  SLANE_IN_TM,
                                                  BLANE_SIGNAL_DT,
                                                  BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT,
                                                  PLAN_OUT_SLANE_TM,
                                                  ACT_OUT_SLANE_DT,
                                                  ACT_OUT_SLANE_TM,
                                                  BLANE_IN_DT,
                                                  BLANE_IN_TM)
                                        VALUES    (pFACTORY_CD,
                                                  pMODEL,
                                                  CUR1.PLAN_DATE,
                                                  CUR1.SHIFT,
                                                  CUR1.LINE_CD,
                                                  CUR1.CELL_NAME,
                                                  pTYPE,
                                                  pGROUP,
                                                  CUR1.SEQ,
                                                  CUR1.ROUND,
                                                  CUR1.MERCHANDISE_CD,
                                                  CUR1.DESTINATION,
                                                  CUR1.COLOR,
                                                  NULL,
                                                  vDATE,
                                                  'TEST',
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL,
                                                  NULL);                                 
                                                  
        END;
        COMMIT;
      
    END P_STORE_OUT_SLANE;
    
END STATUS_DAISHA;

/
--------------------------------------------------------
--  DDL for Package Body TEST
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "LCDRA"."TEST" AS

    PROCEDURE P_INITIAL_DATA_KITTING (pFACTORY_CD     VARCHAR2,
                                      pMODEL          VARCHAR2,
                                      pSHIFT          VARCHAR2,
                                      pLINE_CD        VARCHAR2,
                                      pDAISHA_TYPE    VARCHAR2,
                                      pDAISHA_GROUP   VARCHAR2,
                                      pLOCATION       VARCHAR2,
                                      pROUND          VARCHAR2) AS
    
    vDATE   VARCHAR2(8):= TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME   VARCHAR2(8):= TO_CHAR(SYSDATE,'HH24:MI:SS');
    vSEQ    NUMBER(9,0);
    vORDER  NUMBER(2,0);
    vCOUNT  NUMBER(9,0);
    
    BEGIN
      
        DELETE T_SLANE_DAISHA_PROGRESSIVE
        WHERE FACTORY_CD = pFACTORY_CD
        AND   MODEL      = pMODEL
        AND   PLAN_DATE  = vDATE
        AND   SHIFT      = pSHIFT
        AND   LINE_CD    = pLINE_CD
        AND   DAISHA_TYPE = 'KT'
        AND   DAISHA_GROUP = pDAISHA_GROUP;
        COMMIT;
        
          SELECT NVL(MAX(SEQ),0)+1 INTO vSEQ
          FROM T_SLANE_DAISHA_PROGRESSIVE
          WHERE FACTORY_CD = pFACTORY_CD
          AND   MODEL = pMODEL
          AND   PLAN_DATE = vDATE
          AND   LINE_CD = pLINE_CD
          AND   DAISHA_TYPE = pDAISHA_TYPE
          AND   DAISHA_GROUP = pDAISHA_GROUP;
          
          SELECT NVL(MAX(ORDER_NO),0) INTO vORDER
          FROM T_SLANE_DAISHA_PROGRESSIVE
          WHERE FACTORY_CD = pFACTORY_CD
          AND MODEL = pMODEL
          AND PLAN_DATE = vDATE
          AND SHIFT = pLINE_CD
          AND DAISHA_TYPE = pDAISHA_TYPE
          AND DAISHA_GROUP = pDAISHA_GROUP;

          SELECT  NVL(COUNT(*),0) INTO vCOUNT
          FROM T_SLANE_DAISHA_PROGRESSIVE 
          WHERE FACTORY_CD = pFACTORY_CD
          AND MODEL = pMODEL
          AND PLAN_DATE = vDATE
          AND SHIFT = pSHIFT
          AND DAISHA_TYPE = pDAISHA_TYPE
          AND DAISHA_GROUP = pDAISHA_GROUP
          AND ORDER_NO = vORDER;
          
          IF vCOUNT = 0 OR vCOUNT = 1 THEN
             vORDER := vORDER;
          ELSE
             vORDER := vORDER+1;
          END IF;

      IF pDAISHA_TYPE = 'KT' THEN
      
          IF pLOCATION = 'ASSY' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
          
          ELSIF pLOCATION = 'KITTING' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
          ELSIF pLOCATION = 'IN KITTING' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
          ELSIF pLOCATION = 'S-LANE' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
          ELSIF pLOCATION = 'PICKING' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
          ELSE 
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
         
         END IF;
      END IF;
      
    END P_INITIAL_DATA_KITTING;
    
    ----------------------------------------------------------------------------
    PROCEDURE P_INITIAL_DATA_BLANE (pFACTORY_CD     VARCHAR2,
                                      pMODEL          VARCHAR2,
                                      pSHIFT          VARCHAR2,
                                      pLINE_CD        VARCHAR2,
                                      pDAISHA_TYPE    VARCHAR2,
                                      pDAISHA_GROUP   VARCHAR2,
                                      pLOCATION       VARCHAR2,
                                      pROUND          VARCHAR2) AS
    
    vDATE   VARCHAR2(8):= TO_CHAR(SYSDATE,'YYYYMMDD');
    vTIME   VARCHAR2(8):= TO_CHAR(SYSDATE,'HH24:MI:SS');
    vSEQ    NUMBER(9,0);
    vORDER  NUMBER(2,0);
    
    BEGIN

      IF pDAISHA_TYPE = 'KT' THEN
      
        DELETE T_SLANE_DAISHA_PROGRESSIVE
        WHERE FACTORY_CD = pFACTORY_CD
        AND   MODEL      = pMODEL
        AND   PLAN_DATE  = vDATE
        AND   SHIFT      = pSHIFT
        AND   LINE_CD    = pLINE_CD
        AND   DAISHA_TYPE = 'KT'
        AND   DAISHA_GROUP = pDAISHA_GROUP;
        
        --SELECT MAX(
          IF pLOCATION = 'ASSY' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
          
          ELSIF pLOCATION = 'B-LANE' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
          ELSIF pLOCATION = 'IN BLANE' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
          ELSIF pLOCATION = 'S-LANE' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
          ELSIF pLOCATION = 'PICKING' THEN
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
          ELSE 
            INSERT INTO T_SLANE_DAISHA_PROGRESSIVE(FACTORY_CD, MODEL, PLAN_DATE, SHIFT, LINE_CD, CELL_NAME, DAISHA_TYPE, DAISHA_GROUP,
                                                  SEQ, ROUND, MERCHANDISE_CD, DESTINATION, COLOR, LOCATION, PLAN_PICK_DT, PLAN_PICK_TM,
                                                  ACT_PICK_DT, ACT_PICK_TM, SLANE_IN_DT, SLANE_IN_TM, BLANE_SIGNAL_DT, BLANE_SIGNAL_TM,
                                                  PLAN_OUT_SLANE_DT, PLAN_OUT_SLANE_TM, ACT_OUT_SLANE_DT, ACT_OUT_SLANE_TM, BLANE_IN_DT,
                                                  BLANE_IN_TM, BLANE_OUT_DT, BLANE_OUT_TM, ORDER_NO)
                                          VALUES (pFACTORY_CD,
                                                  pMODEL,
                                                  vDATE,
                                                  pSHIFT,
                                                  'CM',
                                                  'ALL',
                                                  'KT',
                                                  pDAISHA_GROUP,
                                                  vSEQ,
                                                  pROUND,
                                                  'COMMON',
                                                  'KITTING',
                                                  'BK',
                                                  'ASSY',
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vDATE,
                                                  vTIME,
                                                  vORDER);
         
         END IF;
      END IF;
      
    END P_INITIAL_DATA_BLANE;
    
    PROCEDURE P_CALCULATE_ACTUAL 
  AS
    --vTIME     VARCHAR2(10) := TO_CHAR(SYSDATE,'HH24:MI:SS');
    vTIME     VARCHAR2(10) := '22:50:00';
    vSHIFT    VARCHAR2(1) ;
    vCALDATE  VARCHAR2(8) ;
    vCALDATE2  VARCHAR2(8) ;
    vCOUNT    NUMBER(3,0);
    vCOUNTREC2 NUMBER(3,0);

  
    BEGIN
        --vDATE
    IF   vTIME >= '08:00:00' and vTIME < '23:59:59' THEN
      vCALDATE := TO_CHAR(SYSDATE,'YYYYMMDD');
    ELSE
      vCALDATE := TO_CHAR(SYSDATE-1,'YYYYMMDD');
    END IF;
    
    --vSHIFT
    IF   vTIME >= '08:00:00' and vTIME < '20:00:00' THEN
      vSHIFT := 'D';
    ELSE
      vSHIFT := 'N';
    END IF;
    
    
        IF vSHIFT = 'D' THEN
         IF TO_CHAR(TO_DATE(vCALDATE,'YYYYMMDD')||TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI')) 
         BETWEEN TO_CHAR(TO_DATE(vCALDATE,'YYYYMMDD')||TO_CHAR(TO_DATE('22:00','HH24:MI'),'HH24:MI')) 
         AND TO_CHAR(TO_DATE(vCALDATE,'YYYYMMDD')||TO_CHAR(TO_DATE('00:20','HH24:MI'),'HH24:MI'))
         THEN
         vSHIFT := 'D';
         END IF;
        ELSE
         IF   TO_CHAR(TO_DATE( TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD')||TO_CHAR(TO_DATE('22:00','HH24:MI'),'HH24:MI')) 
         >= TO_CHAR(TO_DATE(vCALDATE+1,'YYYYMMDD')||TO_CHAR(TO_DATE('00:01','HH24:MI'),'HH24:MI'))  
         THEN
                vCALDATE2 := TO_CHAR(SYSDATE+1,'YYYYMMDD');
              ELSE
                vCALDATE2 := TO_CHAR(SYSDATE,'YYYYMMDD');
              END IF;
        
        
           IF TO_CHAR(TO_DATE(vCALDATE,'YYYYMMDD')||TO_CHAR(TO_DATE(vTIME,'HH24:MI:SS'),'HH24:MI')) 
           BETWEEN TO_CHAR(TO_DATE(vCALDATE,'YYYYMMDD')||TO_CHAR(TO_DATE('22:00','HH24:MI'),'HH24:MI')) 
           AND TO_CHAR(TO_DATE(vCALDATE2,'YYYYMMDD')||TO_CHAR(TO_DATE('00:20','HH24:MI'),'HH24:MI'))
         THEN
         
          vSHIFT := 'N';
         
         END IF;
        END IF;
        
    

    END P_CALCULATE_ACTUAL;
    
END TEST;

/
--------------------------------------------------------
--  DDL for Procedure GET_CUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "LCDRA"."GET_CUSTOMER" (pCustomer OUT SYS_REFCURSOR)
AS
BEGIN
  OPEN pCustomer FOR
       SELECT *
         FROM CUSTOMER;
END;

/
--------------------------------------------------------
--  DDL for Procedure MY_STORED_PROCEDURE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "LCDRA"."MY_STORED_PROCEDURE" 
as
begin
DBMS_OUTPUT.PUT_LINE('Hello World! Canon');
end;

/
--------------------------------------------------------
--  DDL for Procedure P_GET_CUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "LCDRA"."P_GET_CUSTOMER" 
  (pCountryCode IN VARCHAR2, pCustomer OUT SYS_REFCURSOR)
AS
BEGIN
  OPEN pCustomer FOR
       SELECT *
         FROM TEST_CUSTOMER WHERE COUNTRY_CODE = pCountryCode;
END;

/
--------------------------------------------------------
--  DDL for Procedure P_SLANE_DAISHA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "LCDRA"."P_SLANE_DAISHA" 
  (SLANE_DAISHA OUT SYS_REFCURSOR)
AS
BEGIN
  OPEN SLANE_DAISHA FOR
       SELECT *
         FROM T_SLANE_DAISHA_MASTER ;
END;

/
--------------------------------------------------------
--  DDL for Procedure SP_DEL_PULL_DELETE_EUC_J300
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "LCDRA"."SP_DEL_PULL_DELETE_EUC_J300" AS 
BEGIN
  DELETE j300_recstatus;
  COMMIT;
INSERT INTO j300_recstatus(no_po,no_part,QT_ORD,DT_DELV,TM_DELV,vender_id,palletze,rack_add,
use_block,del_place,INS_TYPE)
SELECT J300_PURCHASE_ORDER_STATUS.NO_PO@FROM_EUC_NPIS,
  J300_PURCHASE_ORDER_STATUS.NO_PARTS@FROM_EUC_NPIS,
  J300_PURCHASE_ORDER_STATUS.QT_ORD@FROM_EUC_NPIS,
  J300_PURCHASE_ORDER_STATUS.DT_DELV@FROM_EUC_NPIS,
  J300_PURCHASE_ORDER_STATUS.TM_DELV@FROM_EUC_NPIS,
  J300_PURCHASE_ORDER_STATUS.NO_ARRANGE@FROM_EUC_NPIS,
  J300_PURCHASE_ORDER_STATUS.CF_PALLETIZE@FROM_EUC_NPIS,
  J300_PURCHASE_ORDER_STATUS.CD_RACK_ADD@FROM_EUC_NPIS,
  J300_PURCHASE_ORDER_STATUS.CD_USE_BLOCK@FROM_EUC_NPIS,
  J300_PURCHASE_ORDER_STATUS.cd_delv_place@FROM_EUC_NPIS,
  J300_PURCHASE_ORDER_STATUS.CD_INSP_TYPE@FROM_EUC_NPIS
FROM J300_PURCHASE_ORDER_STATUS@FROM_EUC_NPIS
WHERE (J300_PURCHASE_ORDER_STATUS.cd_delv_place@FROM_EUC_NPIS = 'RAS1'
OR J300_PURCHASE_ORDER_STATUS.cd_delv_place@FROM_EUC_NPIS = 'MRS1')
AND (J300_PURCHASE_ORDER_STATUS.CD_USE_BLOCK='6100' 
OR J300_PURCHASE_ORDER_STATUS.CD_USE_BLOCK='6200'
OR J300_PURCHASE_ORDER_STATUS.CD_USE_BLOCK='6012'
OR J300_PURCHASE_ORDER_STATUS.CD_USE_BLOCK='8888') 
AND J300_PURCHASE_ORDER_STATUS.NM_ARGMET_STAT@FROM_EUC_NPIS ='DO'
AND J300_PURCHASE_ORDER_STATUS.MK_SUM_FLG@FROM_EUC_NPIS ='2'
AND J300_PURCHASE_ORDER_STATUS.DT_DELV@FROM_EUC_NPIS <= to_char(sysdate +5,'YYYYMMDD');
END SP_DEL_PULL_DELETE_EUC_J300;

/
--------------------------------------------------------
--  DDL for Procedure SP_ECN_PULL_DELETE_EUC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "LCDRA"."SP_ECN_PULL_DELETE_EUC" AS 

BEGIN
      delete del_ecn;
      commit;  
      
            
    INSERT INTO DEL_ECN
  (
    NM_ARGMET_STAT,
    CD_SPLY,
    CD_ORD_CLASS,
    MK_SUM_FLG,
    NO_PARTS,
    NO_ADJ_DIM,
    NO_DRAW,
    CD_CHG_HIST_ALL,
    DT_PO,
    DT_DELV,
    NO_PO,
    MK_PO_CHK_DIGIT,
    QT_ORD,
    DT_REC,
    QT_REC,
    CD_DELV_PLACE,
    CD_USE_BLOCK,
    NO_ORD_CLASS,
    CD_ORD_RESN
  )  
SELECT NM_ARGMET_STAT,
CD_SPLY,
CD_ORD_CLASS,
MK_SUM_FLG,
NO_PARTS,
NO_ADJ_DIM,
NO_DRAW,
CD_CHG_HIST_ALL,
DT_PO,
DT_DELV,
NO_PO,
MK_PO_CHK_DIGIT,
QT_ORD,
DT_REC,
QT_REC,
CD_DELV_PLACE,
CD_USE_BLOCK,
NO_ORD_CLASS,
CD_ORD_RESN 

FROM V_LCD_MIN_DELV_BY_DRAW@FROM_EUC_NPIS 
WHERE (CD_USE_BLOCK = '6100' 
OR CD_USE_BLOCK = '6200' 
OR CD_USE_BLOCK = '6012') 
AND CD_ORD_RESN = '1' 
AND (NM_ARGMET_STAT = 'IV' 
OR NM_ARGMET_STAT = 'UI' 
OR NM_ARGMET_STAT = 'DO') 
AND DT_DELV >= '20170501' 
AND MK_SUM_FLG = '2' ;

commit;      
END SP_ECN_PULL_DELETE_EUC;

/
--------------------------------------------------------
--  DDL for Procedure SP_LCDINFO_DELETE_PARTS_NAME
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "LCDRA"."SP_LCDINFO_DELETE_PARTS_NAME" AS 
BEGIN
delete LCDINFO_F1_T003_PARTS_NAME ;
COMMIT;
insert into LCDINFO_F1_T003_PARTS_NAME (
SELECT ID_SEQ_PART.NEXTVAL, CD_FACT, NO_PARTS, NO_ADJ_DIM,NM_PARTS_ENG FROM V_CID_G003_PART_NAME@FROM_EUC_NPIS);
END SP_LCDINFO_DELETE_PARTS_NAME;

/
--------------------------------------------------------
--  DDL for Procedure SP_LCDINFO_DELETE_PART_PRO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "LCDRA"."SP_LCDINFO_DELETE_PART_PRO" AS 
BEGIN
   DELETE LCDINFO_F1_T004_PART_PRO ;
  COMMIT;
  INSERT INTO LCDINFO_F1_T004_PART_PRO (SELECT * FROM LCDINFO_F1_V001_PART_PRO);
END SP_LCDINFO_DELETE_PART_PRO;

/
--------------------------------------------------------
--  DDL for Procedure SP_LCDINFO_DELETE_PART_SUPP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "LCDRA"."SP_LCDINFO_DELETE_PART_SUPP" AS 
BEGIN
  DELETE LCDINFO_F1_T005_PART_SUPP ;
  COMMIT;
  INSERT INTO LCDINFO_F1_T005_PART_SUPP (SELECT * FROM LCDINFO_F1_V002_PART_SUPP);
END SP_LCDINFO_DELETE_PART_SUPP;

/
--------------------------------------------------------
--  DDL for Procedure SP_LCDINFO_DELETE_SUPP_NAME
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "LCDRA"."SP_LCDINFO_DELETE_SUPP_NAME" AS 
BEGIN
DELETE LCDINFO_F1_T002_SUPP_NAME;
COMMIT;
insert into LCDINFO_F1_T002_SUPP_NAME (
SELECT ID_SEQ_SUP.NEXTVAL, SUPPTYPE, NO_ARRANGE, NM_SPLY_ENG FROM V_SUPP_NAME );
END SP_LCDINFO_DELETE_SUPP_NAME;

/
--------------------------------------------------------
--  DDL for Procedure SP_TR_PULL_DELETE_EUC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "LCDRA"."SP_TR_PULL_DELETE_EUC" AS 
  
BEGIN
      
      delete tr;
      commit;  
                 
     
INSERT INTO TR
  (
    PART_NO,
    DIM,
    FLAGE,
    STATUS,
    PO_NO,
    PARTIAL,
    PROCESS,
    DWG,
    ECN_HIST,
    HISTORY,
    PO_INPUT,
    DEL_DATE,
    ORDER_QT,
    ART_NM,
    PLACE,
    REASON,
    COMENT,
    DT_REC,
    QT_REC,
    DT_ACC,
    QT_ACC,
    supp
  )
 SELECT
NO_PARTS,
NO_ADJ_DIM,
MK_SUM_FLG,
NM_ARGMET_STAT,
NO_PO,
NO_SPLIT_DEIV_SFX,
CD_PROCESS ,
NO_DRAW ,
CD_CHG_HIST_ALL ,
CF_RPT_PARTS_ORD ,
DT_PO ,
DT_DELV,
QT_ORD,
NM_PARTS_ENG ,
CD_DELV_PLACE,
CD_ORD_RESN ,
CM_COMENT ,
DT_REC ,
QT_REC ,
DT_ACPTC ,
QT_ACPTD,
CD_SPLY
FROM J300_PURCHASE_ORDER_STATUS@FROM_EUC_NPIS
WHERE MK_SUM_FLG = '2' 
AND (NM_ARGMET_STAT = 'IV' 
OR NM_ARGMET_STAT = 'DO') 
AND (NO_PARTS Like 'ZPR%' 
OR NO_PARTS Like 'TQ%' 
OR NO_PARTS Like 'TR%')  
ORDER BY NO_PARTS ASC ;
commit;
            
      
END SP_TR_PULL_DELETE_EUC;

/
